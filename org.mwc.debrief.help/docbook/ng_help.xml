<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="http://docbook.org/xml/5.0/rng/docbook.rng" schematypens="http://relaxng.org/ns/structure/1.0"?>
<?xml-model href="http://docbook.org/xml/5.0/rng/docbook.rng" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?>
<book xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0">
  <info>
    <keywordset>
      <keyword>Maritime Analysis</keyword>
      <keyword>Open Source Tool</keyword>
    </keywordset>
    <title>Debrief NG User Documentation</title>
    <mediaobject>
      <imageobject>
        <imagedata align="center" fileref="figures/DebriefNGlogo.png"/>
      </imageobject>
    </mediaobject>
    <author>
      <personname>Ian Mayo</personname>
      <affiliation>
        <org>
          <orgname/>
          <orgdiv><inlinemediaobject>
              <imageobject>
                <imagedata fileref="figures/DeepBlueC.png" width="400"/>
              </imageobject>
            </inlinemediaobject></orgdiv>
          <orgdiv><inlinemediaobject>
              <imageobject>
                <imagedata fileref="figures/mwc_crest.gif"/>
              </imageobject>
            </inlinemediaobject></orgdiv>
        </org>
      </affiliation>
    </author>
    <edition>Documentation for Debrief NG</edition>
    <pubdate>Autumn 2017</pubdate>
    <abstract>
      <title>Contact details</title>
      <para>Should you wish to learn more about <application>Debrief</application> please make contact the Project Manager:</para>
      <formalpara xml:id="project_manager">
        <title>Debrief Project Manager</title>
        <para>
          <address>
            <personname>Mr Ian Mayo</personname>
            <otheraddr>Deep Blue C Technology Ltd</otheraddr>
            <city>Fareham</city>
            <state>HANTS</state>
            <country>UK</country>
            <country>e-mail: ian@DeepBlueC.com</country>
          </address>
        </para>
      </formalpara>
    </abstract>
    <revhistory>
      <revision>
        <revnumber>2.8</revnumber>
        <date>6th October 2015</date>
        <authorinitials>IM</authorinitials>
        <revremark>Update images to new look &amp; feel</revremark>
      </revision>
      <revision>
        <revnumber>2.7</revnumber>
        <date>4th June 2015</date>
        <authorinitials>IM</authorinitials>
        <revremark>Natural Earth, dynamic annotations, new Symbology</revremark>
      </revision>
      <revision>
        <revnumber>2.6</revnumber>
        <date>22nd May 2014</date>
        <authorinitials>IM</authorinitials>
        <revremark>Include SATC, plus updates to reflect GitHub hosting</revremark>
      </revision>
      <revision>
        <revnumber>2.5</revnumber>
        <date>10th June 2012</date>
        <authorinitials>IM</authorinitials>
        <revremark>Include Charting, plus Exercise Planning</revremark>
      </revision>
      <revision>
        <revnumber>2.4</revnumber>
        <date>1st June 2011</date>
        <authorinitials>IM</authorinitials>
        <revremark>Full document update/tidying. Update to DocBook 5.0</revremark>
      </revision>
      <revision>
        <revnumber>2.3</revnumber>
        <date>1st December 2010</date>
        <authorinitials>IM</authorinitials>
        <revremark>Add guidance for right-click integration, worm in the hole</revremark>
      </revision>
      <revision>
        <revnumber>2.2</revnumber>
        <date>1st July 2009</date>
        <authorinitials>IM</authorinitials>
        <revremark>Update for single-sided reconstruction</revremark>
      </revision>
      <revision>
        <revnumber>2.1</revnumber>
        <date>1st July 2007</date>
        <authorinitials>IM</authorinitials>
        <revremark>Polish final Debrief NG content</revremark>
      </revision>
      <revision>
        <revnumber>2.0</revnumber>
        <date>1st March 2006</date>
        <authorinitials>IM</authorinitials>
        <revremark>Start transition to Debrief NG</revremark>
      </revision>
      <revision>
        <revnumber>1.7</revnumber>
        <date>10th July 2004</date>
        <authorinitials>IM</authorinitials>
        <revremark>Include track-shifting</revremark>
      </revision>
      <revision>
        <revnumber>1.6</revnumber>
        <date>10th March 2003</date>
        <authorinitials>IM</authorinitials>
        <revremark>Update to Debrief 2003 functionality</revremark>
      </revision>
      <revision>
        <revnumber>1.5</revnumber>
        <date>10th Nov 2002</date>
        <authorinitials>IM</authorinitials>
        <revremark>Add ETOPO-2 data support</revremark>
      </revision>
      <revision>
        <revnumber>1.4</revnumber>
        <date>10th July 2002</date>
        <authorinitials>IM</authorinitials>
        <revremark>D2002 post-beta revisions, including starting with higher memory allocation</revremark>
      </revision>
      <revision>
        <revnumber>1.3</revnumber>
        <date>7th May 2002</date>
        <authorinitials>IM</authorinitials>
        <revremark>Update to reflect Debrief 2002</revremark>
      </revision>
      <revision>
        <revnumber>1.2</revnumber>
        <date>13th February 2002</date>
        <authorinitials>IM</authorinitials>
        <revremark>Bought up to date with new features (per-fix colouring, cascade/tile, x-y plot tracking bar)</revremark>
      </revision>
      <revision>
        <revnumber>1.1</revnumber>
        <date>25th October 2001</date>
        <authorinitials>IM</authorinitials>
        <revremark>Acknowledged Debrief users added, together with extended Welcome/History</revremark>
      </revision>
      <revision>
        <revnumber>1.0</revnumber>
        <date>8th October 2001</date>
        <authorinitials>IM</authorinitials>
        <revremark>Initial version, following collation of existing HTML pages to DocBook format, together with full review by SMTAC OA.</revremark>
      </revision>
    </revhistory>
    <copyright>
      <year>2000-2017</year>
      <holder>This library is free software; you can redistribute it and/or modify it under the terms of the Eclipse Public License v1.0 (http://www.eclipse.org/legal/epl-v10.html) This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</holder>
    </copyright>
  </info>

  <preface xml:id="PrefaceIntro">
    <title>Introduction</title>

    <sect1 xml:id="intro_welcome">
      <title>Welcome</title>

      <para>Welcome to the documentation for <application>Debrief NG</application>. <application>Debrief</application> was developed by the Maritime Warfare Centre in Portsmouth UK in the mid 90&apos;s, to support the analysis and reporting of maritime tactical exercises.</para>

      <tip>
        <para>There&apos;s lots more Debrief goodness on the Debrief Home Page: <link xlink:href="http://www.debrief.info">http://www.debrief.info</link></para>
      </tip>

      <para>In December 2000 the Maritime Warfare Centre decided to give <application>Debrief</application> an Open Source status, opening the application and its source code into the public domain. Debrief has been made <indexterm>
          <primary>Open Source</primary>
        </indexterm>Open Source to facilitate its wider use, encouraging adoption of standard file formats, presentation and practices between analysis agencies.</para>

      <para>Debrief provides the following features: <itemizedlist>
          <listitem>
            <para>2-Dimensional (top-down) view of vessel tracks</para>
          </listitem>

          <listitem>
            <para>Ability for user to <emphasis>step-through</emphasis> exercise serials</para>
          </listitem>

          <listitem>
            <para>Full formatting of data presented on screen</para>
          </listitem>

          <listitem>
            <para>Palette of tactical, vector map and chart-related features for insertion onto <glossterm linkend="g_plt">plot</glossterm></para>
          </listitem>

          <listitem>
            <para>Export of plot images for insertion into word processor</para>
          </listitem>

          <listitem>
            <para>X-Y plotting of relationships between tracks</para>
          </listitem>

          <listitem>
            <para>3-Dimensional view of tracks using height/depth data</para>
          </listitem>

          <listitem>
            <para>Gridded database of bathymetry/elevation</para>
          </listitem>

          <listitem>
            <para>Display of time-stamped text and sensor data</para>
          </listitem>
        </itemizedlist></para>
    </sect1>

    <sect1 xml:id="History">
      <title>History</title>

      <sect2 xml:id="PreHistory">
        <title>Prehistory</title>

        <para><application>Debrief</application> was originally <indexterm>
            <primary>History</primary>
          </indexterm>produced in 1995 in the <glossterm linkend="g_MWC">Maritime Warfare Centre</glossterm> to act as a desktop viewer for results produced by the MWC&apos;s ASSET <indexterm>
            <primary>ASSET</primary>
          </indexterm> submarine simulator. In use it quickly became apparent that real exercise data could also be viewed in the application removing the requirement for clerical staff to produce paper plots for use in analysis. The initial version of <application>Debrief</application> was a 16-bit MS Windows C++ application.</para>

        <para><application>Debrief</application> was updated in late 1996 to 32 bits, in order to exploit the richer user interface components available for 32 bit Windows applications. It was at this stage that the application was demonstrated and subsequently issued under license to <indexterm>
            <primary>COMSUBDEVRON 12</primary>
            <secondary>CSDS 12</secondary>
          </indexterm>COMSUBDEVRON 12 of the US Navy.</para>

        <para>In 1999 development of an updated version of <application>Debrief</application>, <application>Debrief</application> 2000 was started. Over the previous four years a number of fresh requirements had arisen, requirements which could not be economically met using the existing architecture. Accordingly development of the <application>Debrief</application> 2000 application started from a fresh-whiteboard, adopting a modern modular approach to allow incremental implementation and insertion of future modules as they were required. The rapid maturity experienced by Java together with the availability of cheaply available development environments, rich application libraries (serialisation, Java3D and XML in particular) and its platform independence made Java the natural choice for the application.</para>

        <para>During 2000 <application>Debrief</application> gained wider use within the Maritime Warfare Centre, being used for more varied types of submarine exercise analysis together with analysis in surface-related warfare areas.</para>
      </sect2>

      <sect2 xml:id="SwitchToOpen">
        <title>The Switch to Open Source</title>

        <para>In Summer 2000 the Maritime Warfare Centre committed to switching the <application>Debrief</application> application to <indexterm significance="preferred">
            <primary>Open Source</primary>
          </indexterm>Open Source status. The adoption of the Open Source licensing model affects MWC in a number of ways: <orderedlist>
            <title>Debrief&apos;s Open Source benefits</title>

            <listitem>
              <para>Organisations that are currently using <application>Debrief</application> will have full access to the source code of <application>Debrief</application>, allowing them to identify and correct bugs (provided they have sufficiently trained staff). The licensing is such that these modifications can be again made public through the re-insertion into the central, online "code base".</para>
            </listitem>

            <listitem>
              <para>Organisations that are not currently using <application>Debrief</application> also have full access to the application and its source code. Since the application and its supporting documentation clearly describe its origins in MWC this will spread the name of the organisation together with enforcing its reputation as a centre of maritime tactical analysis.</para>
            </listitem>

            <listitem>
              <para>Any organisation using <application>Debrief</application> that identifies a bug/algorithmic problem is able to independently correct the problem and submit the corrected code back into the central "code base". In time, this will greatly increase the accuracy and reliability of the application. MWC may then freely utilise these improvements, only incurring the administrative overhead of "checking-in" code modified by third party organisations.</para>
            </listitem>

            <listitem>
              <para>The free, open source status of the application makes it easier for third party, commercial organisations to bid for development contracts to maintain or extend <application>Debrief</application>. This wider availability will only bring economic advantages to MWC and fellow organisations.</para>
            </listitem>

            <listitem>
              <para>The wider national/international use of <application>Debrief</application> will also lead to easier exchange of exercise data between nations (through common file formats) and potentially offer an increase in efficiency and the general quality of naval exercise analysis</para>
            </listitem>
          </orderedlist></para>
      </sect2>

      <sect2 xml:id="TwoThouOnwards">
        <title>Debrief 2001 onwards</title>

        <para>At the end of 2000, Ian Mayo, the developer and project manager (see <xref linkend="contact_details"/>) of <application>Debrief</application>, left full-time employment at the Maritime Warfare Centre to setup his own software development consultancy, <indexterm>
            <primary>PlanetMayo</primary>
          </indexterm>PlanetMayo Ltd, now known as <indexterm>
            <primary>Deep Blue C</primary>
          </indexterm>Deep Blue C Technology Ltd.</para>

        <para>A competitive open tender process was conducted during late 2001 to supply the Maritime Warfare Centre with <application>Debrief</application> support. The contract was won by Deep Blue C, who grouped up the implementation of the MWC&apos;s fresh requirements in a major update to <application>Debrief</application>, titled <application>Debrief 2001</application>. This update bought new, large areas of functionality to <application>Debrief</application> including vectored chart data, display of narrative text, and display of sensor-data.</para>

        <para>Debrief development continued in 2002, with the update to <application>Debrief 2002</application>, which bought greatly improved 3D plotting facilities and a number of incremental improvements to other areas of functionality.</para>

        <para>The year 2002 also saw the first conference paper extolling the virtues of Debrief and the Open Source principles behind it, at <indexterm>
            <primary>UDT</primary>
          </indexterm>Undersea Defence Technology 2002 in La Spezia, Italy. The paper itself is available for viewing at the <link xlink:href="http://www.debrief.info" xmlns:xlink="http://www.w3.org/1999/xlink">Debrief web site</link>.</para>

        <para>Another significant step forward for Debrief in 2002 was the contribution from <indexterm>
            <primary>NUWC</primary>
          </indexterm>
          <link linkend="nuwc_address">NUWC</link> of an algorithm and code suitable for shifting tracks. NUWC developed a set of experimental classes used to perform track shifting (see <xref linkend="track_shifting"/>). The algorithms used in these classes were taken and modified to complement the Debrief look and feel, and to provide greater usability resulting in the track-shifting editor included in Debrief 2002.</para>

        <para>Through 2003-2007 Deep Blue C continued to provide MWC with contracted support for Debrief. This support included user guidance, bug fixes and addition of new features. Additionally, this support contract was used to deliver Debrief 2003 (including the provision of a bathymetric bottom in 3D views, presentation of TMA data, and improved time-variable graphs), and the fundamental rebuild of Debrief into Debrief NG (providing a modular architecture ready to seamlessly accommodate ad-hoc analysis tools).</para>

        <para>In 2009 MWC extended Debrief to support Single Sided Reconstruction, that is the derivation of a Red track from a Blue track plus sensor data. These extensions also included Track Grooming changes that support the removal of jumps and general data smoothing.</para>

        <para>2011 saw the introduction of support for plotting chart backdrops in GeoTiff format. Unfortunately, this exposed performance shortcomings in the render cycle and has been temporarily removed pending streamlining / cacheing of the render pipeline. </para>
        <para>Charting support recommenced in Spring 2012, and a suitable implementation was found (See <xref linkend="ChartBackdrops"/>). Support was also introduced for using Debrief in the process of Exercise Planning (See <xref linkend="ExercisePlanning"/>).</para>
        <para>In 2015, under <link xlink:href="https://www.gov.uk/government/organisations/defence-science-and-technology-laboratory">DSTL</link> sponsorship, support for the Natural Earth dataset and sponsorship for the development of Semi Automatic Track Construction, was added to Debrief. Both are of enormous value, the former to the wide body of Debrief users (see <xref linkend="natural_earth"/>), and the latter to specialists interested in this small but select niche (see <xref linkend="satc"/>).</para>
      </sect2>
    </sect1>

    <sect1 xml:id="users">
      <title>Debrief users</title>

      <para>Whilst <application>Debrief</application> was originally developed for use within the Maritime Warfare Centre, the switch to Open Source licensing has led to its adoption by the following organisations and companies:</para>

      <para><table frame="none" xml:id="contact_details">
          <title>List of acknowledged Debrief users</title>

          <tgroup cols="2">
            <colspec colname="col01" colnum="1" colwidth="1.30*"/>

            <colspec colname="col1" colnum="2" colwidth="1.5*"/>

            <tbody>
              <row>
                <entry><para><inlinemediaobject>
                      <imageobject>
                        <imagedata fileref="figures/mwc_crest.gif" width="100"/>
                      </imageobject>
                    </inlinemediaobject></para></entry>

                <entry xml:id="project_sponsor"><para>Original Debrief project sponsor. <address>
                      <personname>Lt Cdr David Whitehouse RN</personname>
                      <otheraddr>Maritime Warfare Centre</otheraddr>
                      <street>Marlborough Building, HMS Collingwood</street>
                      <city>Fareham, HANTS</city>
                      <postcode> PO14 1AS</postcode>
                      <country>United Kingdom</country></address></para></entry>
              </row>
              <row>
                <entry><inlinemediaobject>
                    <imageobject>
                      <imagedata fileref="figures/DeepBlueC.png" width="100"/>
                    </imageobject>
                  </inlinemediaobject></entry>
                <entry><para>Debrief Project Manager.</para>
                  <address>
                    <personname>Mr Ian Mayo</personname>
                    <otheraddr>Deep Blue C Technology Ltd</otheraddr>
                    <city>Fareham, HANTS</city>
                    <country>United Kingdom</country>
                    <email>ian@DeepBlueC.com</email></address></entry>
              </row>

              <row>
                <entry><para><inlinemediaobject>
                      <imageobject>
                        <imagedata fileref="figures/csds12.gif" width="100"/>
                      </imageobject>
                    </inlinemediaobject></para></entry>

                <entry><para xml:id="csds">COMSUBDEVRON 12 <address>
                      <street>Submarine Development Squadron Twelve</street>
                      <city>Naval Submarine Base New London</city>
                      <state>Groton, CT, 06349-5200</state>
                      <country>USA</country>
                    </address></para></entry>
              </row>
              <row>
                <entry><para><inlinemediaobject>
                      <imageobject>
                        <imagedata fileref="figures/nuwc.gif" width="100"/>
                      </imageobject>
                    </inlinemediaobject></para></entry>

                <entry xml:id="nuwc_address"><para>Naval Undersea Warfare Center (NUWC) <address>
                      <personname>Roger Howlett </personname>
                      <otheraddr>Code 2212 Combat Systems</otheraddr>
                      <street>ICE Development Team</street> Naval Undersea Warfare Center (NUWC) <city>1176 Howell St</city>
                      <state>Bldg 1171 CSTL Laboratory</state>
                      <postcode>Newport, Rhode Island, USA</postcode>
                      <email>HowletRW@npt.nuwc.navy.mil</email>
                    </address></para></entry>
              </row>

              <row>
                <entry><para><inlinemediaobject>
                      <imageobject>
                        <imagedata fileref="figures/CSP_LOGO_SM.gif" width="100"/>
                      </imageobject>
                    </inlinemediaobject></para></entry>

                <entry><para xml:id="comsubpac"><address>
                      <personname>Joe Sileo</personname>
                      <otheraddr>COMSUBPAC Tactical Analysis Group (N7231)</otheraddr>
                      <street>Commander Submarine Force, U.S. Pacific Fleet</street>
                      <city>1430 Morton St, Bldg 619</city>
                      <state>Pearl Harbor</state>
                      <postcode>HI 96860-4664</postcode>
                    </address>
                  </para></entry>
              </row>

              <row>
                <entry><para/></entry>

                <entry><para xml:id="COMSEVENTHFLT">
                    <address>
                      <personname>Jay Spry</personname>
                      <otheraddr>COMSEVENTHFLT/COMSUBGRU 7 </otheraddr>
                    </address>
                  </para></entry>
              </row>
            </tbody>
          </tgroup>
        </table></para>

      <para>If your organisation or company uses <application>Debrief</application> and wishes to be included as an acknowledged user please forward your details to the Debrief Project Manager as recorded above.</para>
    </sect1>

    <sect1 xml:id="conventions">
      <title>Document conventions</title>

      <para>This document uses the following conventions <table frame="none" xml:id="docConventions">
          <title>Document conventions</title>

          <tgroup cols="2">
            <colspec colname="col01" colnum="1" colwidth="1*"/>
            <colspec colname="col1" colnum="2" colwidth="2.51*"/>
            <thead>
              <row>
                <entry>Descriptions</entry>
                <entry>Appearance</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>File Names</entry>
                <entry><filename>file.extension</filename></entry>
              </row>
              <row>
                <entry>Label of a screen item</entry>
                <entry><guilabel>View Toolbar</guilabel></entry>
              </row>
              <row>
                <entry>On-screen button</entry>
                <entry><guibutton>Auto Generate</guibutton></entry>
              </row>
              <row>
                <entry>Name of an application</entry>
                <entry><application>Internet Explorer</application></entry>
              </row>
              <row>
                <entry>Emphasized text</entry>
                <entry><emphasis>word</emphasis></entry>
              </row>
              <row>
                <entry>An entry in the glossary (click to view)</entry>
                <entry><glossterm linkend="g_plt">Plot</glossterm></entry>
              </row>
              <row>
                <entry>Source Example</entry>
                <entry>
                  <programlisting> <tag class="starttag">para</tag>Beginning and end of paragraph
 <tag class="endtag">para</tag>         </programlisting>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </table></para>
    </sect1>
  </preface>

  <!-- ********************************************************************* -->

  <!-- ********************************************************************** -->

  <!--   Tutorial                                                            -->

  <!-- ********************************************************************** -->

  <!-- ********************************************************************** -->

  <part xml:id="tutorial">
    <title>Getting started</title>

    <partintro xml:id="tutorial_intro">
      <para>As the title suggests, this part of the tutorial will lead you through <emphasis>Getting Started </emphasis>with <application>Debrief</application> right from the installation through to more advanced topics such as creating custom sets of layers for annotation fresh plots.</para>
      <para>If this is your first time using the User Guide and you haven&apos;t installed <application>Debrief</application> yet, then we would recommend reading the chapters and sections in the order that they appear. This way you know what you need to do before installing <application>Debrief</application>, how to perform the installation, configure the data, etc.</para>
      <para>Also, don&apos;t forget that we have a series of tutorials and videos to help you get up to speed quickly. These don&apos;t take long to read or watch, and are probably the quickest way of getting to grips and up to speed with <application>Debrief</application>; you can follow these at your own pace. </para>
    </partintro>

    <chapter xml:id="get_start">
      <title>First steps</title>
      <para>In this first chapter, we will look at getting you up and running with Debrief. There are some tasks that you need to do before installing Debrief and, to ensure the whole process is as easy as possible, this chapter is grouped into the following sections:</para>
      <para>
        <orderedlist>
          <listitem>
            <para>Before installing <application>Debrief</application> (<xref linkend="pre_install_debrief"/>)</para>
          </listitem>
          <listitem>
            <para>Performing installation (<xref linkend="running_installer"/>)</para>
          </listitem>
          <listitem>
            <para>Configuring reference data (<xref linkend="setting_location_prefs"/>)</para>
          </listitem>
          <listitem>
            <para>Start <application>Debrief</application> (<xref linkend="start_up"/>)</para>
          </listitem>
          <listitem>
            <para>Importing track data (<xref linkend="import_range_data"/>)</para>
          </listitem>
          <listitem>
            <para>Moving around the view.</para>
            <para>Once you&apos;ve completed these, you can then move onto Part B - Using <application>Debrief</application> (<xref linkend="UsingDebrief"/>).</para>
          </listitem>
        </orderedlist>
      </para>

      <sect1 xml:id="pre_install_debrief">
        <title>Before Installing Debrief</title>
        <para>In this section, we will look at obtaining <application>Debrief</application>, via download or CD-Rom, and where you can get help on Debrief. Then, we&apos;ll look at installing Debrief.</para>
        <sect2 xml:id="obtainingDebrief">
          <title>Obtaining Debrief</title>
          <para>A number of project <indexterm>
              <primary>Debrief</primary>
              <secondary>Obtaining Debrief</secondary>
            </indexterm>support activities (news, feature-requests, bug-reports) for <application>Debrief</application> are conducted online at <glossterm linkend="g_github">GitHub</glossterm> (<link xlink:href="https://github.com/debrief/debrief">https://github.com/debrief/debrief</link>). </para>

          <para>In addition, you can also go to this URL to obtain the latest version, examine the list of available downloads, and the relevant zip-file for your operating system: <link xlink:href="https://github.com/debrief/debrief/releases"/>.</para>
        </sect2>


        <sect2 xml:id="where_to_get_help">
          <title>Where to get help on Debrief</title>

          <para>If you get stuck with Debrief, the following sources of information are available:<orderedlist>
              <listitem>
                <formalpara>
                  <title>This document</title>

                  <para>The Debrief NG User guide is a useful reference for determining where to find information on Debrief, as well as the overall capabilities of the tool, and assorted reference guidance. It&apos;s also accessed and presented online via web browser help from within Debrief NG (accessed via <guimenuitem>Help Contents</guimenuitem> on the <guimenu>Help</guimenu> menu).</para>
                </formalpara>
              </listitem>

              <listitem>
                <formalpara>
                  <title>Tutorials</title>

                  <para><indexterm>
                      <primary>Tutorials</primary>
                    </indexterm>A series of interactive tutorials are distributed with Debrief. These guide users through a series of complex tasks to achieve overall goals such as <emphasis>loading data into Debrief</emphasis> or <emphasis>analysing narrative data</emphasis>. The tutorials are accessed by selecting <guimenuitem>Debrief Tutorials</guimenuitem> from the <guimenu>Help</guimenu> menu in Debrief NG. A PDF version of the tutorials (suitable for printing) is in the Debrief installation folder.</para>
                </formalpara>
              </listitem>

              <listitem>
                <formalpara>
                  <title>Welcome Page</title>

                  <para>Debrief NG&apos;s welcome page provides a high level overview of Debrief and guides the user to further sources of information, tutorials, and samples.</para>
                </formalpara>
              </listitem>
            </orderedlist></para>
        </sect2>

        <sect2 xml:id="onCD_Rom">
          <title>Debrief on CD-Rom</title>

          <note>
            <para>If you are unable to download Debrief from the Internet, please contact the Project Manager (see <xref linkend="contact_details"/>), and a copy of Debrief on CD-ROM will be forwarded to you.</para>
          </note>
        </sect2>
      </sect1>

      <sect1 xml:id="running_installer">
        <title>Performing installation</title>

        <warning>
          <para><indexterm>
              <primary>Installing Debrief</primary>
            </indexterm>If you already have <application>Debrief NG</application> installed on your machine you should remove it using the <guibutton>Add/Remove Programs</guibutton> button from the <guibutton>Settings</guibutton> button on the <application>Windows</application>
            <guibutton>Start</guibutton> menu.</para>
        </warning>

        <para>Once you&apos;ve done this, just unzip the downloaded application zip file, and you&apos;re ready to go! Debrief NG needs no installer. <tip>
            <para> You don&apos;t have to but if you wish to follow MS Windows conventions you can copy the unzipped folder into your Programs folder. </para>
          </tip>
        </para>
        <para>Then, to start the application just double-click on the <emphasis>Debrief NG</emphasis> executable in the top level of the unpacked folder. </para>
      </sect1>

      <sect1 xml:id="setting_location_prefs">
        <title>Configuring reference data</title>

        <para>If you want to take advantage of Debrief&apos;s support for background datasets, don&apos;t forget to read the instructions on how to configure their locations (shown below). Note, due to their size, the datasets probably aren&apos;t present in your Debrief installation, so you will have to request and then load them separately. In 2015 Debrief added support for the Natural Earth dataset, superceding the VPF and ETOPO datasets - so you probably won&apos;t need to configure them.<itemizedlist>
            <listitem>
              <para>Natural Earth instructions are in <xref linkend="ne_use"/></para>
            </listitem>
            <listitem>
              <para>VPF instructions are in <xref linkend="configure_for_vpf"/></para>
            </listitem>
            <listitem>
              <para>ETOPO instructions are in <xref linkend="etopo_install"/></para>
            </listitem>
          </itemizedlist></para>
      </sect1>

      <sect1 xml:id="start_up">
        <title>Start Debrief</title>

        <sect2 xml:id="opening_application">
          <title>Opening the application</title>
          <para>Open the application by double-clicking on the executable in your Debrief folder. It may take a couple of seconds to load, but don&apos;t worry about this as, once the windows are open, Debrief runs quite quickly. If you are viewing this tutorial online, arrange this window and the <application>Debrief</application> window as best you can, so that both are visible (although you may need to let them overlap if you have limited screen space).</para>
          <figure xml:id="welcomeView">
            <title>Debrief&apos;s Welcome view</title>
            <screenshot>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/apptoolbar.png" width="100%"/>
                </imageobject>
              </mediaobject>
            </screenshot>
          </figure>
          <para>When Debrief is opened for the very first time you will see the Welcome page (shown above). This page includes a series of links to high-level introductory information. Though we do have a quick summary of each below, we do recommend that you go through each of these links and familiarise yourself with what&apos;s there.</para>
          <para>The Overview page contains guidance for new-adopters of Debrief, whereas the Tutorials page leads users through more specific tasks through the use of <glossterm linkend="g_cheat">tutorials</glossterm> - small pages breaking a task down into a series of steps. The buttons at the top-left of each page navigate you around the welcome guidance. On the <guilabel>Tutorials</guilabel> page one tutorial in particular will help new Debrief-adopters.</para>
        </sect2>
        <sect2 xml:id="debrief_walkthrough">
          <title>A Debrief Walkthrough</title>
          <para>It&apos;s a good idea to let Debrief itself lead you through your first session</para>
          <para>Starting any of the tutorials will shrink the Welcome guidance to a smaller pane exposing the rest of Debrief NG as shown in the following diagram.</para>
          <figure xml:id="defaultView">
            <title>Debrief&apos;s default view</title>
            <screenshot>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/bare_app.png" width="100%"/>
                </imageobject>
              </mediaobject>
            </screenshot>
          </figure>
          <para>Debrief requires you to have a working folder to store your data in (a project). As a convenience, when you open Debrief it will check if there are any projects present. If none are present, the <indexterm>
              <primary>New Project Wizard</primary>
            </indexterm> Debrief New Project Wizard will invite you to create a project folder. Debrief will also offer to copy in some sample data - it&apos;s a good idea to do this.</para>
          <para>The Debrief user-interface follows the Workbench convention, whereby a users edits individual files in an <emphasis>Editor</emphasis> assisted by a series of supporting information panes called <emphasis>Views</emphasis>. The specific arrangement of editors and views offered by Default is called a <emphasis>
              <glossterm linkend="g_perspective">Perspective</glossterm> - </emphasis>in this opening instance it will be the <emphasis>Tactical Analysis</emphasis> perspective. </para>
          <para>Though views can either be dragged to any other location on the workbench or floated above the workbench, the Tactical Analysis perspective arranges the views into sets of grouped tabs. Views frequently have their own toolbar and drop-down menu which provides actions related to that particular task. </para>
          <para>Once selected, views are closed by clicking on the white diagonally-oriented cross. To re-open a view or open a fresh view select <guimenuitem>Show View</guimenuitem> from the <guimenu>Window</guimenu> menu; a list of Debrief-related views will then be shown. Other views can be selected from the <guimenuitem>Other...</guimenuitem> menu item.</para>
        </sect2>

        <sect2 xml:id="navigating_debrief">
          <title>Navigating around Debrief</title>

          <para>Fundamentally, the Debrief user interface (generically termed the Workbench) is constructed from a plot editor, surrounded by a series of support panes (called views), both underpinned by a main menu and a series of toolbars. These elements are described further below.</para>

          <figure xml:id="thePlot">
            <title>A Debrief plot</title>

            <screenshot>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/app_with_plot.png" width="100%" xml:id="sample_plot"/>
                </imageobject>
              </mediaobject>
            </screenshot>
          </figure>

          <sect3 xml:id="debrief_editors">
            <title>Editors</title>

            <para><indexterm>
                <primary>Editors</primary>
              </indexterm>Any number of editors can be open at once but, as is common with many applications, only one can be active at a time. The main menu bar and toolbar for Debrief contain operations that are applicable to the active editor. Initially the active editor will always be the Debrief plot, but the extensibility of Debrief NG means other types of editor can be implemented. Tabs at the top of the editor area indicate the names of files that are currently open for editing (<filename>Sample.dpf</filename> in the previous screenshot). An asterisk (*) in the tab indicates that an editor has unsaved changes. By default, editors are stacked in the editor area, but you can easily tile them by dragging and dropping the tabbed plot-name to another location in the window; this allows you to view source files simultaneously.</para>
          </sect3>

          <sect3 xml:id="debrief_views">
            <title>Views</title>

            <para><indexterm>
                <primary>Views</primary>
              </indexterm>Views support editors and provide alternative presentations as well as ways to navigate the information in your Workbench. For example, the Navigator displays projects and other resources that you are working with (see <xref linkend="navigating_debrief"/>), and the Outline View shows a list of selectable items within the current plot (see <xref linkend="layer_mgr"/>).</para>

            <para>Views also have their own drop-down menus. To open the menu for a view, click the icon at the right end of the view&apos;s title bar. Some views also have their own toolbars. The actions represented by buttons on view toolbars only affect the items within that view.</para>

            <para>A view might appear by itself, or stacked with other views in a tabbed notebook. You can change the layout of a perspective by opening and closing views as well as by docking them in different positions in the Workbench window. We&apos;ve attempted to provide a logical arrangement of Debrief views, but feel free to experiment. Debrief will remember your settings, but if at any point you wish to return to the presets select <guimenuitem>Reset Perspective</guimenuitem> from the <guimenu>Window</guimenu> menu.</para>
          </sect3>

          <sect3 xml:id="debrief_toolbars">
            <title>Toolbars</title>

            <para>There are four kinds of toolbars in Debrief.</para>

            <para>The <emphasis role="bold">main toolbar</emphasis>, sometimes called the Workbench toolbar, is displayed at the top of the Workbench window directly beneath the menu bar. Items in the toolbar might be enabled or disabled based on the state of either the active view or editor. Sections of the main toolbar can be rearranged by dragging and droppign with the mouse.</para>

            <para>There are also <emphasis role="bold">individual view toolbars</emphasis>, these appear in the title bar of a view. It&apos;s important to note that actions in a view&apos;s toolbar apply only to the view in which they appear. Some view toolbars also include a Menu button, shown as an inverted triangle, that contain actions for that view.</para>

            <para>Whilst Debrief doesn&apos;t currently make use of Perspectives (refer to the <xref linkend="perspectives_note"/> note, below), a third type of toolbar is <emphasis role="bold">the perspective switcher</emphasis>. The perspective switcher allows quick access to perspectives that are currently open. It also has a button that can open new perspectives. The perspective switcher is normally located in the top-right, next to the main toolbar. However, it is also possible to position it below the main toolbar ("top-left"), or to position it vertically on the left-hand side of the workbench ("left"). The name of the perspective is shown by default, but it is possible to hide the text and show only the icons. To reposition the perspective or hide the text, right-click on it and choose the appropriate item from the context menu. When Debrief contains modules for Track Reconstruction it would be understandable for a Track Reconstruction perspective to provide a suitably tailored set of views.</para>

            <para>Finally, <emphasis role="bold">the fast view bar</emphasis> is a toolbar that contains icons representing the current set of fast views. A fast view is a shortcut to a view that is frequently used; it is generated by right-clicking in a view&apos;s title bar. The fast view bar appears in the bottom left corner of the workbench by default. However, it is possible to position it on the left or right as well. In all cases, you can find out what toolbar buttons do by moving your mouse pointer over the button and reading the tooltip that opens.<note>
                <formalpara xml:id="perspectives_note">
                  <title>Perspectives</title>
                  <para><indexterm>
                      <primary>Perspectives</primary>
                    </indexterm>Each Workbench window contains one or more perspectives. A perspective defines the initial set and layout of views in the Workbench window. Within the window, each perspective shares the same set of editors as well as providing a set of functionality aimed at accomplishing a specific type of task or works with specific types of resources. For example, the Tactical Analysis perspective combines views that you would commonly use while analysing and editing tactical exercises. Perspectives control what appears in certain menus and toolbars and define visible action sets that you can change to customize a perspective. Debrief allows you to save customized perspectives. These can then be loaded in the same or a new window via the <guilabel>General</guilabel> &gt; <guilabel>Perspectives</guilabel> preference page.</para>
                </formalpara>
              </note></para>
          </sect3>
        </sect2>

        <sect2 xml:id="first_plot">
          <title>Loading your first plot</title>

          <para>Refer to the Debrief tutorials (<xref linkend="g_cheat"/>) for guidance in creating either a new Debrief plot, or in loading an existing plot.</para>
        </sect2>
      </sect1>

      <sect1 xml:id="import_range_data">
        <title>Importing track data</title>

        <sect2 xml:id="intro_to_replay">
          <title>Introduction to Replay files</title>

          <para>One of the file formats that Debrief uses is the Replay format (<emphasis role="bold">.rep</emphasis>). These are ASCII files that contain vessel position date in a flat-file format. (<glossterm linkend="g_replay">Replay</glossterm> was an application used in <application>Debrief</application>-style tasks in Royal Navy analysis in past years.)<tip>
              <para>Debrief can also load data stored in the increasingly popular KML format. This is covered in the <xref linkend="IntroToKML"/></para>
            </tip></para>

          <para>A sample rep file is below:</para>

          <example xml:id="sample_replay_file">
            <title>Sample Replay file contents</title>

            <programlisting>
 951212 050000.000 NELSON @C 12 11 10.63 N 11 41 52.37 W 269.7 2.0 0
 951212 050100.000 NELSON @C 12 11 10.58 N 11 42 2.98 W 269.7 2.0 0
 ;NARRATIVE: 951212 095700.000 COLLINGWOOD SUSPECTED DETECTION OF RED
 951212 050200.000 NELSON @C 12 11 10.51 N 11 42 14.81 W 269.9 2.0 0
 951212 050300.000 NELSON @C 12 11 10.51 N 11 42 27.27 W 268.7 2.0 0
 951212 050400.000 NELSON @C 12 11 10.28 N 11 42 40.33 W 270.6 2.0 0
            </programlisting>
          </example>

          <note>
            <para>Since Autumn 2004 multi-word track names can now be read in if they are surrounded by quotation marks (see <xref linkend="replay_track_format"/>).</para>
          </note>

          <para>This data has a single vessel location per-line, with white-space separated columns containing this data:</para>

          <itemizedlist spacing="compact">
            <listitem>
              <para>Date (year, month, day)</para>
            </listitem>

            <listitem>
              <para>Time (hours, minutes, seconds, decimal seconds)</para>
            </listitem>

            <listitem>
              <para>Vessel Name (single-word)</para>
            </listitem>

            <listitem>
              <para>Formatting to apply (see the maintainer documentation in <xref linkend="maintainers_guide"/> for details of this, but experiment with the second character to change the default colour of the <glossterm linkend="g_track">track</glossterm>).)</para>
            </listitem>

            <listitem>
              <para>Latitude (deg, min, sec, hemisphere)</para>
            </listitem>

            <listitem>
              <para>Longitude (deg, min, sec, hemisphere)</para>
            </listitem>

            <listitem>
              <para>Course (degrees)</para>
            </listitem>

            <listitem>
              <para>Speed (knots)</para>
            </listitem>

            <listitem>
              <para>Depth (m)</para>
            </listitem>
          </itemizedlist>

          <para>To further illustrate this, refer to this image:</para>
          <figure>
            <title>Detailed Sample Replay file contents</title>
            <screenshot>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/replay_log_file.png" align="center" width="100%"/>
                </imageobject>
              </mediaobject>
            </screenshot>
          </figure>
          <para>Note the third line, which contains a <glossterm linkend="g_narrative">narrative</glossterm> entry. This entry represents one of a group of types of data called <glossterm linkend="g_annotation">Annotation</glossterm> entries. These entries allow inclusion of data other than vessel locations, and can be interspersed with positional data throughout the file.</para>

          <para>Multiple vessel tracks can be contained sequentially in a single Replay file.</para>

          <para>For more detail regarding this file format, including how to represent annotations which are only visible for a defined time period, together with lines, ellipses and rectangles, refer to the maintainers section of the this document (<xref linkend="maintainers_guide"/>).</para>
        </sect2>

        <sect2 xml:id="DebrieffileFormat">
          <title>The Debrief file format</title>

          <para>Note that the Replay file format just stores sensor readings - it does not store any formatting details. As a result, any formatting applied to a plot cannot be saved as a Replay file. Thus, Debrief has the <emphasis>Debrief File Format</emphasis>: This is a more complex file format that stores a wide range of data-types, formatting instructions, and user-interface settings (such as the current viewport on the data).</para>

          <para>Thus, whilst you may load data from a <emphasis>.REP</emphasis> Replay file, any modifications made to the plot must be stored in a Debrief Plot File (<emphasis>.dpf</emphasis>). No changes are save to REP files by the Debrief plot editor (though it possible to make textual changes to REP files using Debrief&apos;s built-in text editor). DPF files use the XML storage format which is capable of storing structured information in predefined types, as shown in the following example:<programlisting width="70">&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
   &lt;plot Created="Tue Nov 18 09:54:38 GMT 2008" Name="Debrief Plot"&gt;
     &lt;details Text="Saved with Debrief version dated Tue Nov 18 09:51:52 GMT 2008"/&gt;
and so on....</programlisting></para>
        </sect2>

        <sect2 xml:id="import_section">
          <title>Importing data</title>

          <para>If this is the first time of doing this, refer to the tutorial covering importing existing data into Debrief (<xref linkend="g_track"/>).</para>

          <para>When data is imported, <application>Debrief</application> applies default values to the time labels for positions. The first point in a <glossterm linkend="g_track">track</glossterm>, together with the first point every day, includes the day, otherwise just hours and minutes are displayed.</para>

          <para>We do realise that you haven&apos;t learnt how to show the labels on a track yet - that&apos;s still to follow; but remember, when you switch on the labels for a <glossterm linkend="g_track">track</glossterm>, the default labels are set at the import stage.</para>
        </sect2>

        <sect2 xml:id="import_modes">
          <title>Import modes</title>

          <para><indexterm>
              <primary>DR import mode</primary>
            </indexterm><indexterm>
              <primary>Import modes</primary>
            </indexterm><indexterm>
              <primary>OTG import mode</primary>
            </indexterm>Since the 2009 introduction of extensions to support Single Sided Reconstruction (see <xref linkend="TwoThouOnwards"/>), Debrief is able to import data in either <glossterm linkend="g_DeadReckoning">DR</glossterm> or <glossterm linkend="g_OverTheGround">OTG</glossterm> mode. The mode to be used is decided at the REP import stage via the Select track mode dialog:</para>
          <figure>
            <title>Select Track Mode</title>
            <screenshot>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/SelectImportMode.png" align="center"/>
                </imageobject>
              </mediaobject>
            </screenshot>
          </figure>

          <para>Once imported, it is not possible to switch between the two track modes. As such, if you need to switch modes, delete the track, re-import it, and then select the track mode required.</para>

          <para>If you want to set a different default import mode, then use the Maritime Analysis Preferences dialog located in Windows > Preferences:</para>
          <figure>
            <title>Debrief&apos;s Preferences</title>
            <screenshot>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/ImportModePreference.png" scalefit="1" width="550" align="center"/>
                </imageobject>
              </mediaobject>
            </screenshot>
          </figure>
        </sect2>
      </sect1>



      <!-- formatting track data -->
    </chapter>
  </part>

  <part xml:id="UsingDebrief">
    <title>Using Debrief</title>

    <partintro xml:id="IntroPart2">
      <para>You&apos;re now ready to start using the more advanced features of <application>DebriefNG</application>, the following chapters will guide you through specific areas of <application>Debrief</application>&apos;s analysis capability. More specifically, these are:</para>
      <itemizedlist>
        <listitem>
          <para>Manipulating track data (<xref linkend="formatting_data"/>)</para>
        </listitem>
        <listitem>
          <para>Analysing data (<xref linkend="analysing_data"/>)</para>
        </listitem>
        <listitem>
          <para>Exporting data (<xref linkend="exporting_data"/>)</para>
        </listitem>
        <listitem>
          <para>Symbol sets (<xref linkend="symbol_sets"/>)</para>
        </listitem>
        <listitem>
          <para>External datasets (<xref linkend="external_datasets"/>)</para>
        </listitem>
        <listitem>
          <para>Exercise planning (<xref linkend="ExercisePlanning"/>)</para>
        </listitem>
        <listitem>
          <para>Viewing narratives (<xref linkend="viewing_narratives"/>)</para>
        </listitem>
        <listitem>
          <para>Using chart backdrops (<xref linkend="ChartBackdrops"/>)</para>
        </listitem>
        <listitem>
          <para>Analysing sensor data (<xref linkend="analyse_sensor_data"/>)</para>
        </listitem>
        <listitem>
          <para>Management of TMA and TUA solutions (<xref linkend="tma_data"/>)</para>
        </listitem>
      </itemizedlist>
    </partintro>
    <chapter xml:id="moving_around">
      <title>Moving around the view</title>

      <sect1 xml:id="move_intro">
        <title>Introduction</title>

        <para>Once data is loaded into <application>Debrief</application>, there are a number of ways of controlling the view of the track data, but the most efficient way is by using the buttons on the View toolbar: <figure xml:id="view_toolbar_demo">
            <title>View toolbar</title>
            <screenshot>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/PaletteButtons3.png" align="center"/>
                </imageobject>
              </mediaobject>
            </screenshot>
          </figure></para>

        <tip>
          <para>For most of Debrief&apos;s operations (such as adding drawing features) it needs to have an area to work with. When re-opening an existing plot file, or importing data, Debrief determines the area covered by the plot from the given data. However, when starting a new, blank session, Debrief doesn&apos;t know what area to use and defaults to its own origin at Fort Blockhouse, HMS Dolphin, Portsmouth, United Kingdom: the plot will be centred on 50 degrees 49 minutes North, 1 degree 19 minutes West (approx).</para>
        </tip>
      </sect1>

      <sect1 xml:id="toggle_buttons">
        <title xml:id="toggle_buttons.title">Mouse mode buttons</title>

        <para><indexterm>
            <primary>Drag buttons</primary>
          </indexterm>The first five buttons on the View toolbar represent modes of use and are selectable individually with the limitation that only one button at a time can be selected. When clicked, the previous selection is deactivated, and this button becomes active. <variablelist>
            <varlistentry>
              <term><guiicon><inlinemediaobject>
                    <imageobject>
                      <imagedata align="center" fileref="figures/SelectSegment.png"/>
                    </imageobject>
                  </inlinemediaobject></guiicon>Drag Track Segment</term>
              <listitem>
                <para>Drag Track Segment allows you to drag a single segment of track. It is of particular relevance when manipulating track segments in Single Sided Reconstruction (see <xref linkend="track_shifting"/>).</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term><guiicon>
                  <inlinemediaobject>
                    <imageobject>
                      <imagedata align="center" fileref="figures/DragComponent.png"/>
                    </imageobject>
                  </inlinemediaobject>
                </guiicon>Drag Component</term>
              <listitem>
                <para>Drag Component lets you drag a single point within a large feature. For example, after switching to Drag Component mode you can drag the corners of a rectangle or a single point within a vessel track.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term><guiicon>
                  <inlinemediaobject>
                    <imageobject>
                      <imagedata align="center" fileref="figures/DragWholeFeature.png"/>
                    </imageobject>
                  </inlinemediaobject>
                </guiicon>Drag Whole Feature</term>
              <listitem>
                <para>This setting lets you drag a complete feature. In Drag Whole Feature mode you can drag a rectangle around the plot, or move a complete vessel track (see <xref linkend="track_shifting"/>).</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term><guiicon>
                  <inlinemediaobject>
                    <imageobject>
                      <imagedata align="center" fileref="figures/Pan.png"/>
                    </imageobject>
                  </inlinemediaobject>
                </guiicon>Pan</term>
              <listitem>
                <para>The Pan control lets you move your current viewpoint. Click on the Pan button, and then drag the mouse around the <glossterm linkend="g_plt">plot</glossterm> -- you will see the view change as you do it.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term><guiicon>
                  <inlinemediaobject>
                    <imageobject>
                      <imagedata align="center" fileref="figures/RngBrg.png"/>
                    </imageobject>
                  </inlinemediaobject>
                </guiicon>Range Bearing</term>
              <listitem>
                <para>The Range and Bearing control neither allows you to move around the view nor move objects, but selecting it allows you to measure the precise range and bearing between two points on the plot. As you click and drag, you will see the calculated results displayed at the mid-point of the connection, as shown below. The default units are yards, but different units may be selected from the <guimenuitem>CMAP</guimenuitem> section of the properties shown in the <guimenu>Window</guimenu>/<guimenu>Preferences</guimenu> dialog.</para>
                <para><guiicon>
                    <inlinemediaobject>
                      <imageobject>
                        <imagedata align="center" fileref="figures/RngDisplay.png" width="350"/>
                      </imageobject>
                    </inlinemediaobject>
                  </guiicon></para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term xml:id="zoom_in.title"><guiicon>
                  <inlinemediaobject>
                    <imageobject>
                      <imagedata align="center" fileref="figures/ZoomIn.png"/>
                    </imageobject>
                  </inlinemediaobject>
                </guiicon>Zoom in</term>
              <listitem>
                <para>You are in the Zoom In mode by default. So, click and drag the mouse across the area where the two <glossterm linkend="g_track">track</glossterm>s are located near the centre of the <glossterm linkend="g_plt">plot</glossterm>. When you release the mouse button you will see a zoomed in view of the data.</para>
              </listitem>
            </varlistentry>
          </variablelist></para>

        <tip xml:id="middle_controls">
          <para>In addition to the mouse mode buttons described above, the middle mouse button may be used to navigate irrespective of the current mouse mode. Hold the middle mouse button down and drag the cursor to pan around the plot, or hold down the <guibutton>CTRL</guibutton> key and roll your mouse wheel backwards and forwards to zoom in and out of the plot.</para>
        </tip>
        <tip>
          <para>Handy tip no. 2 is when the plot is selected you can use the <guibutton>tab</guibutton> key to cycle through the toolbar drag modes.</para>
        </tip>
      </sect1>

      <sect1 xml:id="the_click_btns">
        <title>Click buttons</title>

        <para>The remaining buttons on the View toolbar differ from the previous ones in that they don&apos;t involve mouse interaction with the plot, and selecting one of these doesn&apos;t deselect the already selected mouse mode button. <variablelist>
            <varlistentry>
              <term><guiicon>
                  <inlinemediaobject>
                    <imageobject>
                      <imagedata align="center" fileref="figures/ZoomOut.png"/>
                    </imageobject>
                  </inlinemediaobject></guiicon>Zoom out</term>
              <listitem>
                <para>If you click on the Zoom out button, you will "zoom out" of the <glossterm linkend="g_plt">plot</glossterm> (surprise, surprise). However, as mentioned in the brief introduction (above), if the Zoom in button is already selected, selecting Zoom out doesn&apos;t deselect it - they&apos;re designed to work in conjunction with each other. You click on Zoom out as many times as is required and, as soon as you stop, you can then drag an area to zoom in on and work. If you have a wheel-mouse, holding the Ctrl key down allows you to zoom in or out, as described above in <emphasis>Toggle Buttons</emphasis>.</para>
              </listitem>
            </varlistentry>
            <varlistentry xml:id="Fit_To_Win">
              <term><guiicon>
                  <inlinemediaobject>
                    <imageobject>
                      <imagedata fileref="figures/FitToWin.png"/>
                    </imageobject>
                  </inlinemediaobject>
                </guiicon>Fit to Window</term>
              <listitem>
                <para>Clicking on Fit to Window will display all currently visible plot data within the confines of the <glossterm linkend="g_plt">plot</glossterm> area. This is good if you&apos;re zoomed in too far and need to see all the data, a single click will zoom out so you can see all visible information; conversely, if you&apos;ve zoomed out too far, and the plot shapes are mere pin-pricks, a single click will zoom in, fill your plot, and allow you to see exactly what you have displayed. Note, this operation only applies to visible data, not that there may be data on the plot which is not visible (hidden layers). In addition, this phenomenon relates to the data once you have pressed "Filter to time period" from the Time Controller - the <glossterm linkend="g_plt">plot</glossterm> is resized to fit the data contained in the indicated time period (you&apos;ll learn about this later in <xref linkend="filter_time_period"/>).</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term><guiicon>
                  <inlinemediaobject>
                    <imageobject>
                      <imagedata fileref="figures/Repaint.png"/>
                    </imageobject>
                  </inlinemediaobject>
                </guiicon>Refresh View</term>
              <listitem>
                <para>This button refreshes the current view. Refreshing is occasionally required when switching between display modes.</para>
              </listitem>
            </varlistentry>
          </variablelist></para>
      </sect1>

      <sect1 xml:id="overview_window">
        <title>Chart Overview</title>

        <para>The Chart Overview view provides an large scale view of the entire exercise area. This view is opened from the <guimenu>Window</guimenu>/<guimenuitem>Show View...</guimenuitem> drop down list (if you can&apos;t see it in the drop-down list, click on &apos;Other&apos; at the bottom of the Show View list, and a dialog will open where you can select from unlisted views). Using it is quite simple: drag a region in the overview and the current plot will quickly zoom to show that area. A highlight rectangle shows the current plot view. Once you&apos;ve zoomed in a little you can double-click in the overview to recenter the main plot on that point. <figure xml:id="overviewChart_sample">
            <title>Overview chart in use</title>
            <screenshot>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/OverviewInUse.png" width="100%"/>
                </imageobject>
              </mediaobject>
            </screenshot>
          </figure></para>
      </sect1>

      <sect1 xml:id="undo_btn">
        <title>Undo</title>

        <para><indexterm>
            <primary>Undo support</primary>
          </indexterm><application>Debrief</application> contains an unending list of undoable operations which are only cleared when the current session is closed. Most changes to the <application>Debrief</application> plot are undoable, whether they be creating a new feature, changing an attribute of a feature (such as color), changing the current perspective, etc. If something doesn&apos;t undo, then the changes are it&apos;s something we&apos;ve overlooked, so please let us know about it using the procedure in <xref linkend="debrief_bugs"/> and we&apos;ll correct it as soon as possible.</para>

        <para>Each open Debrief plot has its own undo buffer, so if the undo button is disabled on a particular plot you must first make sure it&apos;s active (single click on it to do that). Furthermore, even though you may have made the edit via the Outline View, you must still click on the plot before conducting an undo operation.</para>
      </sect1>

      <sect1 xml:id="format_the_plot">
        <title>Formatting the plot</title>

        <para>The Debrief plot itself can be customised in a number of ways. For example, the background color can be <indexterm>
            <primary>Formatting</primary>
            <secondary>Plot (background color)</secondary>
          </indexterm>changed to suit different projection/printing mediums, or just to suit the analysts&apos; personal choice. Another way is by changing the line widths of tactical objects which are displayed. Either of these options are easily accessible by right-clicking on the plot and selecting <emphasis>Edit base chart</emphasis>. A properties panel will then appear, and you can use the drop-down list to change the background colour, move the slider to change the line width itself, etc.</para>
        <para>Now we know how to move around the view, use the mouse buttons, and format the plot, we can now move onto manipulating track data.</para>
      </sect1>
    </chapter>
    <chapter xml:id="formatting_data">
      <title>Manipulating track data</title>

      <para>Before you are able to analyse or export plots from your data you need to know how to format <indexterm>
          <primary>Formatting</primary>
          <secondary>track data</secondary>
        </indexterm>what you see to improve its legibility. Learn more about formatting tracks in the <emphasis>Editing your data</emphasis> tutorial. <note>
          <para>Apologies in advance to the British users of <application>Debrief</application> for the American-spelling of colour. The software environment within which <application>Debrief</application> is developed is American, and in this case superimposing the UK spelling upon it is not a battle worth fighting.</para>
        </note></para>

      <sect1 xml:id="property_editing">
        <title>Property editing</title>

        <figure xml:id="properties_view">
          <title>Properties view</title>

          <screenshot>
            <mediaobject>
              <imageobject>
                <imagedata fileref="figures/PropertiesView.png" width="237" align="center"/>
              </imageobject>
            </mediaobject>
          </screenshot>
        </figure>

        <sect2 xml:id="edit_track">
          <title>Edit track</title>

          <para><indexterm>
              <primary>Property editor</primary>
            </indexterm>Track editing is performed on the Properties Window (see <xref linkend="g_property_window"/>), and is initiated by selecting the track either from the plot or the Outline View, as described in the <emphasis>Editing your data</emphasis> tutorial.<note>
              <para>Many of these editing operations can be performed without using the Properties Window, simply by right-clicking on a track either in the Outline View or on the plot</para>
            </note></para>
        </sect2>

        <sect2 xml:id="sym_intervals">
          <title>Set label, symbol and arrow display intervals</title>

          <para>In addition to switching the symbols, labels and arrows on and off for individual positions, you can instruct Debrief to show symbols or labels at one of a series of frequencies - allowing you to quickly add 15 minute symbols and hourly time labels to a track. The timings of the particular positions that get highlighted do not have their origin at the start of the track - but from 0000 hrs - thus the 15 minute positions will be marked for 00, 15, 30, 45 minutes past the hour.<note>
              <para>Where a position on a track is marked as having its arrow and symbol visible, the arrow takes precedence - so only one will be displayed. In this way can request 5 mins symbols, and 30 min arrows: this will give you 5 min symbols, except on the 1/2 hour, when an arrow will be shown.</para>
            </note></para>
        </sect2>

        <sect2 xml:id="track_shifting">
          <title>Track shifting</title>

          <para>The track-shifting <indexterm>
              <primary>Track Shifting</primary>
            </indexterm><indexterm>
              <primary>Reconstruction</primary>
              <secondary>Track Shifting</secondary>
            </indexterm>function has been incorporated to allow users to move a track and its associated sensor data. The principle requirement for this functionality is to enable the user to move the track to a specific geographic reference point (i.e. GPS fix) or to lock the relative position of one track to another using sensor data. This positioning relative to another track is sometimes termed plot-lock <indexterm>
              <primary>Reconstruction</primary>
              <secondary>Plot-lock</secondary>
            </indexterm>or tie-point <indexterm>
              <primary>Reconstruction</primary>
              <secondary>Tie-point</secondary>
            </indexterm>.</para>

          <para><note xml:id="track_shifting_note">
              <para>The Track-shifting implementation was originally provided by Mr David Gong at <link linkend="nuwc_address">NUWC</link>.</para>
            </note></para>

          <para>Debrief NG provides three modes of track shifting - moving individual track segments, moving individual points in a track to correct a potentially erroneous data point, moving whole tracks to overcome navigational system inaccuracies - such as during a plot-lock or tie-in. See the three modes above in <xref linkend="toggle_buttons"/>.</para>

          <para>A Stacked Dots view is used to show bearing-errors when the track-shift is being conducted to line up one or two sets of sensor data (see <xref linkend="sensor_data"/>). For each sensor bearing on a track (see <xref linkend="g_sensor_contact"/>), <application>Debrief</application> identifies the point on the opposing track nearest to that time. Each time the track is shifted (dragged) <application>Debrief</application> calculates the error between the sensor bearing and the current measured bearing, showing these in a plot (bearing error against time).<note xml:id="sensor_offset_note">
              <para>A Sensor Offset measurement (see <xref linkend="SensorOffsetsEditor"/>) is applied to the sensor bearing line where there sensor datum is offset from the attack datum of the platform</para>
            </note></para>

          <para><application>Debrief</application> displays a symbol for each visible sensor data, with the symbol being plotted the same colour as the sensor data. When track-shifting a long exercise serial, the time-variable plot may become difficult to use due to the y-axis always auto-scaling to accommodate all available data. Overcome this by instructing Debrief to filter-to-time-period (see <xref linkend="filter_to_time_period"/>) from the time controller (<xref linkend="time_controller"/>) for the plot-lock period, thus viewing a much smaller data-set in the time-variable plot. Additionally, you can zoom in on a particular area (by dragging an area downward and to the right) of the time-variable plot for detailed analysis, dragging the mouse up and to the left to clear the zoom.</para>

          <para>Note the four modes of drag supported by the bearing error view. For the non-translate operations you are still able to perform a translate by picking up the track segment at its mid-way mark.</para>

          <figure xml:id="stacked_dots_view">
            <title>Stacked Dots view</title>

            <screenshot>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/brg_error.png" width="333" align="center"/>
                </imageobject>
              </mediaobject>
            </screenshot>
          </figure>

          <para>For the track-shifting to work, your data must be configured as follows:<orderedlist>
              <listitem>
                <para>You must have a Debrief plot open (duh)</para>
              </listitem>

              <listitem>
                <para>You must have a vessel track as the primary track on the Tote (see <xref linkend="the_tote_area"/>) - not an annotation or other time-related object</para>
              </listitem>

              <listitem>
                <para>You must have a secondary track on the Tote, but only one secondary track. This must also be a vehicle track.</para>
              </listitem>

              <listitem>
                <para>The primary track must have sensor data (see <xref linkend="sensor_data"/>).</para>
              </listitem>
            </orderedlist></para>
        </sect2>
      </sect1>

      <sect1 xml:id="new_chart_features">
        <title>Adding chart features</title>

        <sect2 xml:id="chart_toolbar">
          <title>Chart features toolbar</title>

          <para>Debrief also allows you to add items to the <glossterm linkend="g_plt">plot</glossterm>.</para>

          <para>These items are contained in two menus; <guilabel>Chart Features</guilabel> and <guilabel>Drawing</guilabel>. In <application>Debrief</application>, hover the mouse over them to see what type of item they create. <figure xml:id="chart_features_demo">
              <title>Chart features menu</title>

              <screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/PaletteButtons2.png" align="center"/>
                  </imageobject>
                </mediaobject>
              </screenshot>
            </figure></para>

          <important>
            <para>It is important to note that each time you click on an item from the toolbar, a new instance of it is created, it does not re-open an existing item.</para>
          </important>
        </sect2>

        <sect2 xml:id="the_Scale">
          <title>Scale</title>

          <para>The Scale button provides a scale, indicating <indexterm>
              <primary>Scale</primary>
            </indexterm> to the viewer the current area of coverage of the plot. Once created the scale values can be set automatically or manually, as described below: <variablelist>
              <varlistentry>
                <term>Auto Mode</term>

                <listitem>
                  <para>In auto-mode Debrief assesses the current screen size and area of data covered, and attempts to set the most appropriate range of values and step size for the scale. A good working practice is to switch to auto-mode to allow Debrief to estimate the optimal values, then switch out of auto-mode to fine-tune the <guilabel>ScaleMax</guilabel> and <guilabel>ScaleStep</guilabel> values provided.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Color</term>

                <listitem>
                  <para>The colour used to draw the scale.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Location</term>

                <listitem>
                  <para>The corner of the plot where the scale is placed.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>ScaleMax</term>

                <listitem>
                  <para>The maximum value of the scale (in yards)</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>ScaleStep</term>

                <listitem>
                  <para>The size of the steps used to break up the scale (again in yards)</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Visible</term>

                <listitem>
                  <para>You can clear the visibility flag to temporarily hide a scale, allowing you to switch between scales, for example.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Units</term>

                <listitem>
                  <para>Use this list to select the units displayed in the scale</para>
                </listitem>
              </varlistentry>
            </variablelist></para>

          <para><figure xml:id="sample_scale_demo">
              <title>Sample scale</title>

              <screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/scale_demo.gif" align="center"/>
                  </imageobject>
                </mediaobject>
              </screenshot>
            </figure></para>
        </sect2>
        <sect2 xml:id="time_display_absolute" linkend="time_display_relative">
          <title>Time Display (Absolute)</title>
          <para>Debrief offers 2 types of time display within the <emphasis>plot editor</emphasis>: absolute and relative. We will cover <xref linkend="time_display_relative"/> in the following section. The <emphasis>Time Display (Absolute) </emphasis>button opens up a new layer within the <emphasis>Outline view</emphasis>:<figure>
              <title>Time Display (Absolute)</title>
              <screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/chart_feat_add_timedisplay.png" align="center" width="100%"/>
                  </imageobject>
                </mediaobject>
              </screenshot>
            </figure></para>
          <para>Additional timers can be added, as required.</para>
          <para>As can be seen in the screenshot above, <emphasis role="bold">Dynamic Features (1 items)</emphasis> is added to the <emphasis>Outline view</emphasis>, the <emphasis>Time Display (Absolute) </emphasis>properties display in the <emphasis>Properties view</emphasis>, and the <emphasis role="bold">Absolute Time</emphasis><emphasis role="bold"> </emphasis>is shown in the bottom right of the <emphasis>plot editor</emphasis>; this is its default position.</para>
          <para>In the <emphasis>Properties view</emphasis>, you can modify the display properties:</para>
          <variablelist>
            <varlistentry>
              <term>Background color</term>
              <listitem>
                <para>By default, the background color for the time display is white (RGB 255, 255, 255), but can be changed as required.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Color</term>
              <listitem>
                <para>The font colour used in the display.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Font</term>
              <listitem>
                <para>The font type used.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Location</term>
              <listitem>
                <para>The default location for the time display is Bottom Right, but Bottom Left, Top Right, and Top Left are also available.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Name</term>
              <listitem>
                <para>You can rename this time display as required. Once done, its name will change in the <emphasis>Outline view</emphasis>:</para>
                <figure>
                  <title>Renaming Time Display</title>
                  <screenshot>
                    <mediaobject>
                      <imageobject>
                        <imagedata fileref="figures/time_display_absolute_multiples.png" align="center"/>
                      </imageobject>
                    </mediaobject>
                  </screenshot>
                </figure>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Prefix</term>
              <listitem>
                <para>By default, the display does not have a prefix, but you can set this here. For example:</para>
                <screenshot>
                  <mediaobject>
                    <imageobject>
                      <imagedata fileref="figures/time_display_prefix.png" align="center"/>
                    </imageobject>
                  </mediaobject>
                </screenshot>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Suffix</term>
              <listitem>
                <para>Similarly, you can also specify a suffix:</para>
                <screenshot>
                  <mediaobject>
                    <imageobject>
                      <imagedata fileref="figures/time_display_suffix.png" align="center"/>
                    </imageobject>
                  </mediaobject>
                </screenshot>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Time-related</term>
              <listitem>
                <para>Use this option to change the <emphasis role="bold">Time format</emphasis>: </para>
                <screenshot>
                  <mediaobject>
                    <imageobject>
                      <imagedata fileref="figures/time_display_timeformat.png" align="center"/>
                    </imageobject>
                  </mediaobject>
                </screenshot>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Visibility</term>
              <listitem>
                <para>This option is a simple toggle option which allows you to show or hide the time display.</para>
              </listitem>
            </varlistentry>
          </variablelist>
        </sect2>
        <sect2 xml:id="time_display_relative">
          <title>Time Display (Relative)</title>
          <para>Debrief also allows you to add a relative time display to the <emphasis>plot editor</emphasis>. You add this in the same manner as you add a <emphasis>Time Display (Absolute)</emphasis>. It will show as follows: <figure>
              <title>Time Display (Relative)</title>
              <screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/chart_feat_add_timedisplay_rel.png" align="center" width="100%"/>
                  </imageobject>
                </mediaobject>
              </screenshot>
            </figure><variablelist>
              <varlistentry>
                <term>Background color</term>
                <listitem>
                  <para>By default, the background color for the time display is white (RGB 255, 255, 255), but can be changed as required.</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>Color</term>
                <listitem>
                  <para>The font colour used in the display (set to RGB 64, 64, 64 by default).</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>Font</term>
                <listitem>
                  <para>The font type used.</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>Location</term>
                <listitem>
                  <para>The default location for the time display is Bottom Right, but Bottom Left, Top Right, and Top Left are also available.</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>Name</term>
                <listitem>
                  <para>You can rename this time display as required. As shown in the image above, this will change in the <emphasis>Outline view</emphasis>.</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>Negative color</term>
                <listitem>
                  <para>If you step back through the timer in the <emphasis>Time Controller view</emphasis>, the absolute time could precede the <emphasis>time origin</emphasis> specified for this relative time display. If so, specifying a negative colour provides a clear indication here:</para>
                  <para/>
                  <screenshot>
                    <mediaobject>
                      <imageobject>
                        <imagedata fileref="figures/time_display_negative_time.png" align="center"/>
                      </imageobject>
                    </mediaobject>
                  </screenshot>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>Prefix</term>
                <listitem>
                  <para>As with the <emphasis>Time Display (Absolute)</emphasis> you can specify a prefix for the relative timer (the image above has been assigned ML1:) .</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>Suffix</term>
                <listitem>
                  <para>If your time display warrants a suffix, you can add this here.</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>Time Related</term>
                <listitem>
                  <para>The absolute display only has a single time related option (time format), but the relative display has an additional one (time origin).</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>Time format</term>
                <listitem>
                  <para>Select from a number of time format options.</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>Time origin</term>
                <listitem>
                  <para>Unlike the absolute time display, which mirrors the time from the <emphasis>Time controller view</emphasis>, the relative time is set to coincide with an event in the current scenario. You can specify the exact start time here:</para>
                  <screenshot>
                    <mediaobject>
                      <imageobject>
                        <imagedata fileref="figures/time_display_time_origin.png" align="center"/>
                      </imageobject>
                    </mediaobject>
                  </screenshot>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>Visibility</term>
                <listitem>
                  <para>This is a simple toggle option which allows you to turn the time display on or off without deleting it from the <emphasis>Outline view</emphasis>. </para>
                </listitem>
              </varlistentry>
            </variablelist></para>
        </sect2>

        <sect2 xml:id="the_grid">
          <title>Grid</title>

          <para>Next, try with a new grid: <guiicon>
              <inlinemediaobject>
                <imageobject>
                  <imagedata fileref="figures/GridBtn.png"/>
                </imageobject>
              </inlinemediaobject>
            </guiicon><variablelist>
              <varlistentry>
                <term>Auto Mode</term>

                <listitem>
                  <para>In auto-mode Debrief assesses the current screen size and area of data covered, and attempts to set the most appropriate range of values and step size for the scale. A good working practice is to switch to auto-mode to allow Debrief to estimate the optimal values, then switch out of auto-mode to fine-tune the <guilabel>ScaleMax</guilabel> and <guilabel>ScaleStep</guilabel> values provided.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Color</term>

                <listitem>
                  <para>The colour used to draw the scale.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Delta</term>

                <listitem>
                  <para>The interval between plotted lines</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>PlotLabels</term>

                <listitem>
                  <para>Whether to label the grid. See tip below for details regarding how the labels are formatted</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Visible</term>

                <listitem>
                  <para>Whether you can hide the grid, of course.</para>
                </listitem>
              </varlistentry>
            </variablelist></para>

          <tip xml:id="grid_labels">
            <para>Two methods are used to produce grid lines: <itemizedlist>
                <listitem>
                  <para><emphasis>Lat/Long Grid</emphasis>. Where angular delta units are selected (degrees, minutes), vertical and horizontal grid lines are calculated relative to the latitude of the plot (thus a 1 degree grid requested at 60 degrees North will have grid lines of 60nm separation in latitude, but with lines of longitude at 30nm separation).</para>
                </listitem>

                <listitem>
                  <para><emphasis>Square Grid</emphasis>. Where distance related delta units are selected (m, yd, km, nm, etc), the vertical and horizontal grid lines are constructed using the same delta distance (thus a selected delta of 1 kyd will have lines of 1 kyd separation in the horizontal and vertical).</para>
                </listitem>
              </itemizedlist></para>
          </tip>
        </sect2>

        <sect2 xml:id="the_local_grid">
          <title>Local Grid</title>

          <para>The Local Grid ( <guiicon>
              <inlinemediaobject>
                <imageobject>
                  <imagedata fileref="figures/local_grid.png"/>
                </imageobject>
              </inlinemediaobject>
            </guiicon>) is a modified grid for which the origin has been over-ridden. Change the <guilabel>Origin</guilabel> attribute to move the grid origin. The <guilabel>PlotOrigin</guilabel> attribute has been provided to draw a small point at the origin of the grid - useful when initially designing/recording the grid.</para>
        </sect2>

        <sect2 xml:id="the_coastline">
          <title>Coastline</title>

          <para>The <application>Debrief</application> installation includes a <indexterm>
              <primary>Coastline</primary>
              <secondary>Introduction</secondary>
            </indexterm>low-resolution coastline datafile. Whilst it does cover the whole globe, it does so at a low resolution, so is only useful for an overview. The vectored chart data discussed later provides a much lower resolution of data. <figure xml:id="coastline_demo">
              <title>Sample of default coastline data</title>

              <screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/old_coastline.gif" align="center"/>
                  </imageobject>
                </mediaobject>
              </screenshot>
            </figure></para>
        </sect2>
        <sect2 xml:id="etopo_gridded_bathy">
          <title>ETOPO gridded bathy</title>
          <para>Whilst the VPF dataset <indexterm>
              <primary>ETOPO Data</primary>
            </indexterm>provides a contoured bathymetry within broad depth steps, the ETOPO dataset provides a gridded bathymetry in 5&apos; or 2&apos; steps. When you ask Debrief to plot an ETOPO background, Debrief will try to load an ETOPO-2 dataset first, followed by an ETOPO-5 dataset if that is unavailable. The image below provides a sample of the level of detail supplied. <figure xml:id="ETOPO_Demo">
              <title>Sample of ETOPO gridded bathymetry</title>
              <screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/etopo_data.gif" align="center"/>
                  </imageobject>
                </mediaobject>
              </screenshot>
            </figure></para>
        </sect2>
        <sect2 xml:id="ChartLibrary">
          <title xml:id="chartlibrary">Chart Library</title>
          <para>Debrief also allows you to load 3rd-party chart libraries. This is covered in <xref linkend="loadCharts"/><figure>
              <title>Sample of chart library portfolio</title>
              <screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/ChartFolio.png" align="center" width="75%"/>
                  </imageobject>
                </mediaobject>
              </screenshot>
            </figure></para>
        </sect2>
        <sect2 xml:id="vectored_data">
          <title>Vectored data</title>
          <para>The addition of vectored chart data is also covered later in this document, in <xref linkend="view_vpf"/>. The image below provides a sample of the level of detail supplied. <figure xml:id="vectored_Coast_demo">
              <title xmlns="http://docbook.org/ns/docbook">Sample of vectored coastline data</title>
              <screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/VPF_Layer9.gif" align="center"/>
                  </imageobject>
                </mediaobject>
              </screenshot>
            </figure></para>
        </sect2>
        <sect2 xml:id="NaturalEarth_title">
          <title xml:id="NaturalEarth">Natural Earth</title>
          <para>In the same manner that we loaded the Chart Library, we do exactly the same thing with Natural Earth.<figure>
              <title>Sample of Natural Earth</title>
              <screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/NE_110M.png" align="center" width="75%"/>
                  </imageobject>
                </mediaobject>
              </screenshot>
            </figure>For further information, refer to <xref linkend="natural_earth"/>
          </para>
        </sect2>
      </sect1>

      <sect1 xml:id="drawing_features">
        <title>Adding drawing features</title>

        <para>The <guilabel>Drawing</guilabel> toolbar and menu are used to place geographic features on the plot; features which are geographically fixed. In general, when you create them, their corners must be specified by copying a location from the plot and posting it into the property of the relevant corner. <figure xml:id="drawing_toolbar_demo">
            <title>Drawing toolbar</title>

            <screenshot>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/PaletteButtons1.png" align="center"/>
                </imageobject>
              </mediaobject>
            </screenshot>
          </figure></para>

        <note>
          <para>By default, new drawing features are placed in the <computeroutput>Misc</computeroutput> layer, from where they can be moved to other layers as required. If you&apos;re creating lots of drawing features, and want to place them directly into target layers, select on <guimenuitem>Manually select target layer</guimenuitem> from the top of the Drawing menu. When this setting is ticked, Debrief will prompt you to select a target layer for each new drawing feature added to the plot. Clear the ticked setting to return the target layer to the <computeroutput>Misc</computeroutput> layer.</para>
        </note>

        <sect2 xml:id="the_labels">
          <title>Label</title>

          <para>The Label <indexterm>
              <primary>Annotations</primary>
              <secondary>Label</secondary>
            </indexterm>drawing item allows you to place a labelled symbol on the plot. Typically this may be used to annotate events on the plot, or to add an extra feature which did not warrant its own Debrief REP entry. Like all annotations Labels have time start and end properties. Because of this they can be placed on the Tote (see <xref linkend="the_tote_area"/>) and used in analysis, as you will learn later.</para>

          <para><tip>
              <para>A custom editor is supplied (see below) for editing locations of data items, it is used frequently in <application>Debrief</application>. Clicking on the expand button will let you edit individual lat/long fields (shown in figure <xref linkend="editor_expanded"/>). Alternatively, you may set the location to a specific point on the plot. Right-click on the plot and select <guimenuitem>Copy cursor location</guimenuitem>. Then click once on the location editor to reveal the <guibutton>Paste</guibutton> button (shown in <xref linkend="editor_paste"/>), and click it to paste the cursor location.</para>

              <figure xml:id="editor_initial">
                <title>Location Editor (initial view)</title>

                <screenshot>
                  <mediaobject>
                    <imageobject>
                      <imagedata fileref="figures/LocationEditor.png" align="center"/>
                    </imageobject>
                  </mediaobject>
                </screenshot>
              </figure>

              <figure xml:id="editor_expanded">
                <title>Location Editor (expanded view)</title>

                <screenshot>
                  <mediaobject>
                    <imageobject>
                      <imagedata fileref="figures/LocationEditor3.png" align="center"/>
                    </imageobject>
                  </mediaobject>
                </screenshot>
              </figure>

              <figure xml:id="editor_paste">
                <title>Location Editor (paste view)</title>

                <screenshot>
                  <mediaobject>
                    <imageobject>
                      <imagedata fileref="figures/LocationEditor2.png" align="center"/>
                    </imageobject>
                  </mediaobject>
                </screenshot>
              </figure>
            </tip></para>

          <note>
            <para>Note that the text for the label itself can be a multi-line piece of text. When in the text-editor box for the label, just press the return key on your keyboard to move to the next line. The multi-line piece of text will be centre formatted on screen according to the <guilabel>Label Location</guilabel> property. The multi-line label is also available for all labels on the <application>Debrief</application> plot. Note that when the label is stored to disk in the <application>Debrief</application> plot-file format, the &apos;\n&apos; character used internally to represent the new line is converted to a &apos;\\n&apos; string to allow its easy storage.</para>
          </note>
        </sect2>

        <sect2 xml:id="the_ellipse">
          <title>Ellipse</title>

          <para>The Ellipse shape works in much <indexterm>
              <primary>Annotations</primary>
              <secondary>Ellipse</secondary>
            </indexterm> the same way as a Label, except an ellipse is drawn on the plot instead of the labelled symbol. The size of the ellipse is dictated by the Maxima and Minima values which specify the lengths of its semi-major and semi-minor axes, expressed in user-selectable distance units. These values are the distances from the centre of the ellipse to the furthest and closest points on its perimeter, respectively. The direction of the ellipse is specified by the orientation, expressed in degrees. <application>Debrief</application> does not check that the maxima is larger that the minima, it merely plots an ellipse oriented about the semi-major axis.</para>
        </sect2>

        <sect2 xml:id="the_polygon">
          <title>Polygon</title>

          <para>The Polygon drawing feature <indexterm>
              <primary>Annotations</primary>
              <secondary>Polygon</secondary>
            </indexterm>allows more varied shapes to be plotted within Debrief. A series of points (called a Path) are added to a Shape which are the connected up to create a Polygon. The points in the path may be typed in, double-clicked, or dragged to produce the correct polygon.</para>

          <para>When a new polygon is created, its editor panel will open as shown below: <figure xml:id="polygon_demo">
              <title>Initial view of polygon</title>

              <screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/EditPolygon.png" width="263" align="center"/>
                  </imageobject>
                </mediaobject>
              </screenshot>
            </figure></para>

          <para>The properties shown are similar to those shown for most other shapes, with the exception of the actual locations of the polygon. Change the location of the nodes that form the polygon by selecting them in the Outline View then editing them the Properties View (see <xref linkend="properties_view"/>). New nodes are created by right-clicking on the Polygon (in the Outline View or on the Plot), and selecting <guimenu>Add Node</guimenu>. </para>
        </sect2>

        <sect2 xml:id="easy_shapes">
          <title>Rectangle, Circle, Line, Arc</title>

          <para>The Rectangle, Circle and Line shapes <indexterm>
              <primary>Annotations</primary>
              <secondary>Rectangle, Circle, Line, Arc</secondary>
            </indexterm>work in the same way as the others described here, the Location Editor described above being used to set the corners, centre, or ends as required.<note>
              <para>Some of the more basic drawing items have a single <guilabel>DTG</guilabel> parameter instead of <guilabel>TimeStart</guilabel> and <guilabel>Time_End</guilabel> properties. Where there is a single time, the time-analytical features of Debrief (such as Snail mode) treat the feature as <emphasis>alive</emphasis> for three minutes either side of the time value.</para>
            </note></para>

          <tip>
            <para>To draw a line created from an origin with values of range and bearing, first create the line, and put the start point of the line at the origin. Now switch the mouse mode to <guilabel>Range/Bearing</guilabel> ( <guiicon>
                <inlinemediaobject>
                  <imageobject>
                    <imagedata align="center" fileref="figures/RngBrg.png"/>
                  </imageobject>
                </inlinemediaobject>
              </guiicon>). Now click on the button labelled <guilabel>Select Point</guilabel> for <guilabel>LineStart</guilabel>, and drag the mouse out from the origin point. The current range and bearing will be displayed at the bottom-left of the screen. When the mouse is at the desired range and bearing right-click and copy the position onto the clipboard. Next, paste that location into the <guilabel>LineEnd</guilabel> value.</para>
          </tip>
          <note xml:id="ShowRangeCalc">
            <para>In Summer 2013 the <guilabel>Line Shape</guilabel> annotation received some love and gained new capabilities. One is the ability to have an arrow displayed at one end. This is useful in indicating the direction of travel, or in highlighting a particular location. The second capability is <indexterm>
                <primary>Show Auto Calc range</primary>
              </indexterm><guilabel>Show Auto Calc</guilabel> - this displays the calculated range and bearing 1/2 way along the line. Unfortunately this label is only visible on screen - the structure Windows Metafile format doesn&apos;t allow us to copy the rotated text across the clipboard to copy it into MS Word. So, you&apos;ll only get this rotated text in MS Word is you capture a screenshot, using software such as SnagIt or Hypercam. If you do want to include such a label in your analysis report, and you wish to copy/paste the image via the clipboard, then you can always manually put the range/bearing into the line label, and specify that the label be shown 1/2 way along the line.<figure>
                <title>Calculated Label</title>
                <screenshot>
                  <mediaobject>
                    <imageobject>
                      <imagedata fileref="figures/CalculatedLabel.png" align="center" width="80%"/>
                    </imageobject>
                  </mediaobject>
                </screenshot>
              </figure></para>
          </note>
        </sect2>

        <sect2 xml:id="general_editing">
          <title>General</title>

          <para>To edit any existing annotation, double on it on the <glossterm linkend="g_plt">plot</glossterm> or the Outline View to select it - its attributes will then be available from the Properties View. Alternatively, right-click on an item on the Plot or Outline View, and editable attributes are available from the object&apos;s drop-down list. Only boolean (true/false) and list-related (top/bottom/left/right etc) are editable from the right-click menu.</para>
        </sect2>
      </sect1>

      <!--         Outline View                     -->

      <sect1 xml:id="layer_mgr">
        <title>Layer management</title>

        <sect2 xml:id="layer_mgr_intro">
          <title>Outline View</title>

          <para><indexterm>
              <primary>Outline View</primary>
            </indexterm>The Outline View provides a tree-oriented view of all of the editable data within a plot, organised into layers. New items added to the plot are placed into a <emphasis>Misc</emphasis> layer. From here they can be reorganised into suitably themed layers via cut/paste (see <xref linkend="cut_copy_paste"/>).<figure xml:id="layer_manager">
              <title>Outline View </title>

              <screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/LayerManagerView.png" width="279" align="center"/>
                  </imageobject>
                </mediaobject>
              </screenshot>
            </figure></para>

          <para>Reveal the Outline View by selecting it from the <guimenu>Window</guimenu>/<guimenuitem>Show View...</guimenuitem> drop-down list. Once open you will see the data shown as a series of layers - each with a tick indicating if it&apos;s visible or not. A toolbar provides command buttons to make items visible or not visible, and buttons are enabled to make an entity the primary or secondary track, or to add the selected item as another secondary (when applicable). Note that not just tracks may be denoted primary or secondary: and graphic item with a position and date-time can be selected: thus Debrief can be configured to show a running indication of bearing and range for a series of vessels from a single label datum (representing a sonar-buoy or mine).</para>

          <para>The drop-down menu provides further commands, significantly including the ability to add a new layer; <guimenuitem>Create Layer</guimenuitem>. Further commands are available when right-clicking on one or more Outline View elements: in particular the ability to cut/copy/paste elements between layers and plots, together with the command to view a time-variable graph of the selected elements (see <xref linkend="show_time_vars"/>).</para>
        </sect2>

        <sect2 xml:id="cut_copy_paste">
          <title>Cut/Copy and Paste</title>

          <para>Items may be cut, copied and pasted between Layers using the commands contained in the menus obtained by right-clicking on the item. The cut command may be used on its own to delete an item. Copying items is a quick way of making duplicates of a correctly formatted annotation or screen item such as a rectangle or ellipse.</para>

          <para>In addition to copying/moving items between layers, items and layers themselves can be copied or moved between sessions within Debrief.</para>

          <para>To paste a layer (or track) into the top level of the Outline View just click on the white space below the displayed layers and select <guibutton>Paste Item</guibutton> form the popup menu.</para>

          <note>
            <para>All top-level layers (that it screen items which appear at the top level in Layer Manager, such as Tracks, ETOPO data and Layers themselves) can have a line width assigned to them. This setting is observed when plotting all items in that layer. The smallest line width supported is <emphasis>hairwidth</emphasis>, which plots the finest line the particular output device (screen or printer) can produce. The line-width parameter can be accessed by right-clicking on the screen item directly in addition to via the Outline View.</para>
          </note>
          <warning>
            <para>In addition to the <guibutton>Cut</guibutton> menu command, is the <guibutton>Delete</guibutton> command. This doesn&apos;t store the removed items on the clipboard, and is suited for bulk data point removal. To further ease the memory burden of this large operation it isn&apos;t possible to <guibutton>Undo</guibutton> the <guibutton>Delete</guibutton> command.</para>
          </warning>
          <warning>
            <para>The Outline View performs particularly poorly when it has layers that contain 10s of 1000s of entries - sometimes taking several minutes to refresh all of the labels/icons in that layer. So, if you have a layer that contains more than 10,000 items, the Outline View will not let you expand it - avoiding the performance issue. If you do have, for example, a track that contains many 10s of thousands of positions in it, then you should reduce the data volume by:<orderedlist>
                <listitem>
                  <para>If you need high frequency data, reduce the time period covered by the track by selecting a reduced <emphasis>Time Period</emphasis> in the <emphasis>Time Controller</emphasis>, then selecting <indexterm>
                      <primary>Track sections</primary>
                      <secondary>Trim Tracks (to reduce volume)</secondary>
                    </indexterm><guibutton>Trim Tracks to Time Period</guibutton> from the track&apos;s popup menu. This will reduce all data points that fall outside the current period indicated in the Time Controller slider bars</para>
                </listitem>
                <listitem>
                  <para>If you need to cover a long period of time, then select <indexterm>
                      <primary>Track sections</primary>
                      <secondary>Resample (to reduce volume)</secondary>
                    </indexterm><guibutton>Resample data at xxxx</guibutton>, and select a larger time period (10 mins, 30 mins?). This will reduce the number of positions in the track.</para>
                </listitem>
              </orderedlist>.</para>
          </warning>
        </sect2>
      </sect1>

      <sect1 xml:id="save_reopen">
        <title>Saving and re-opening plots</title>

        <sect2 xml:id="save_Detail">
          <title>Save</title>

          <para>You may (or my not) know what the <glossterm linkend="g_replay">Replay</glossterm> file format used to load data into <application>Debrief</application> looked like. Whilst it is compact and easy to use, unfortunately the Replay file format does not allow us to store all of the formatting we have applied to the <application>Debrief</application>
            <glossterm linkend="g_plt">plot</glossterm>, nor the coordinates of what you are currently viewing, nor how you have arranged to store your data in <glossterm linkend="g_layer">layers</glossterm>. This problem is overcome by the use of the <application>Debrief</application>
            <glossterm linkend="g_plot_file">Plot-File</glossterm> format, an application defined using XML (see <xref linkend="g_xml"/>). Have a quick read about <glossterm linkend="g_xml">XML</glossterm> in the Reference Guide or Glossary if you&apos;re not aware of it and are sufficiently interested, otherwise, here&apos;s an overview: <itemizedlist>
              <listitem>
                <para>Debrief stores plots in XML format with a custom DPF suffix</para>
              </listitem>

              <listitem>
                <para>XML stands for eXstensible Markup Language, which allows structured data to be stored in text format, and is a world-wide standard promoted by <link xlink:href="http://www.w3c.org" xmlns:xlink="http://www.w3.org/1999/xlink">http://www.w3c.org</link>.</para>
              </listitem>

              <listitem>
                <para>XML files can be edited outside <application>Debrief</application>, allowing you to cut and paste between <glossterm linkend="g_plot_file">plot-files</glossterm> to build up a new <glossterm linkend="g_plot_file">Plot-File</glossterm>, all in a text editor</para>
              </listitem>
            </itemizedlist></para>

          <para>Whilst a plot is typically created from an REP file, it may not be saved back into that REP file - it must be saved as a Debrief <glossterm linkend="g_plot_file">Plot-File</glossterm> ( <filename>DPF</filename>). </para>
          <para>To save your work as a <glossterm linkend="g_xml">DPF</glossterm> file, click on the Save button: <guiicon>
              <inlinemediaobject>
                <imageobject>
                  <imagedata fileref="figures/SaveBtn.png"/>
                </imageobject>
              </inlinemediaobject>
            </guiicon> on the Workbench toolbar (or via the <guimenu>File</guimenu> menu). A file dialog will open (see below), allowing you to save the current session in this format.<note>
              <para>Debrief will only let you save the new plot into one of your project folders, so you must both select a folder and a provide a filename for the new file. Usefully, Debrief guesses that you probably want to name the plot the same as the REP file first loaded, but you can change this as required.</para>
            </note></para>

          <para/>

          <para><figure xml:id="save_file_demo">
              <title>Save-file dialog</title>

              <screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/SaveDialog.png" width="263" align="center"/>
                  </imageobject>
                </mediaobject>
              </screenshot>
            </figure></para>

          <para>Save-as functionality is provided through the <guibutton>Save As</guibutton> button, next to the <guibutton>Save</guibutton> button in the <guimenu>File</guimenu> menu.</para>

          <sidebar>
            <para><application>Debrief</application> plot files can grow very large, and on occasion the memory required for the save operation can reach the upper limit provided to the application by default. When Debrief fails during the Save operation due to reaching the upper memory limit it stops trying to save to file and shows a message dialog advising you to increase the limit:<quote>Ran out of memory whilst saving plot, try adding -Xmx256m to the command line</quote>. This extra parameter passed when Debrief is starting instructs your PC to provide Debrief with 256 Megabytes of memory. If you continue to receive the error message try increasing the memory allocation to 512 Megabytes.</para>

            <para>The save operation itself is conducted in a two-stage process. If the operation entails saving over an existing file (when you just do a plain Save, or Save As over-writing an older version) Debrief first writes the plot to a subtly different filename in the same directory (<filename>plot.dpf</filename> would get saved to <filename>~plot.tmp</filename>). If the save operation completes successfully then the older file is deleted and the temporary file renamed to the originally requested filename. Thus, your existing file only gets overwritten on successful completion of the save.</para>
          </sidebar>
        </sect2>

        <sect2 xml:id="adding_more_data">
          <title>Adding more data to a plot</title>

          <para>With a plot already open, you are able to drag a <application>Debrief</application>
            <filename>DPF</filename> or <filename>REP</filename> file into its chart, adding the content to the existing session. Dragging multiple files onto the plot area adds them all to the existing session. To create a composite plot like this, you can start by using Debrief&apos;s <emphasis>New Plot Wizard</emphasis> (see relevant Cheat Sheet, <xref linkend="g_cheat"/>)</para>
        </sect2>
      </sect1>
      <sect1 xml:id="LightweightTracks">
        <title>Lightweight tracks</title>

        <sect2 xml:id="IntroLightweight">
          <title>Introduction</title>
          <para> The Debrief track object is a heavyweight entity that contains many, many capabilities. Some of the more complex capabilities include the ability to compose a track from multiple TMA solutions, storing measured sensor data within the track, or constructing a track using <glossterm linkend="g_DeadReckoning">DR</glossterm>, rather than <glossterm linkend="g_OverTheGround">OTG</glossterm> measurements. These capabilities come at a performance (and UI) cost, so the concept of <glossterm linkend="g_lightweight">lightweight tracks</glossterm> has been introduced. </para>
          <para> In addition to having higher performance (through reduced capability), lightweight tracks can be organised into layers, enabling them to be collectively switched on and off. On import from Replay file, lightweight tracks are denoted by specifying the name of the target layer into which they should be stored. See an example in <xref linkend="debrief_NamedSym"/>. Here is an example of how to indicate the folder into which a lightweight track is to be stored: <screen>
                  <markup>
100112 131314 F003 VC[LAYER=red] 00 01 59.10 N 001 10 58.22 E 70.6 6.0 0.0 
100112 132314 F003 VC[LAYER=red] 00 02 18.96 N 001 11 54.84 E 70.6 6.0 0.0 
100112 133314 F003 VC[LAYER=red] 00 02 38.82 N 001 12 51.45 E 70.6 6.0 0.0 
                  </markup>
                </screen>
          </para>
          <para> So, in the previous example we&apos;re indicating that the track titled <emphasis>F003</emphasis> should be placed into a folder called <emphasis>red</emphasis>. Note: no other changes are made to the line of REP data, we just provide the indication of the target folder. </para>
        </sect2>
        <sect2 xml:id="managing_lightweight">
          <title>Managing lightweight tracks</title>
          <para> In addition to loading lightweight tracks directly from REP files, it&apos;s possible to convert conventional heavyweight tracks to/from lightweight tracks (via right-click), and to drag lightweight tracks between folders. </para>
        </sect2>
      </sect1>

      <sect1 xml:id="GroomingTrackData">
        <title>Grooming track data</title>

        <sect2 xml:id="IntroGrooming">
          <title>Introduction</title>

          <para>Track data can arrive at Debrief in vary degrees of quality. Traditionally MWC pre-process track data to remove jumps and generally smooth the data. The 2009 Single Sided Reconstruction extensions (see <xref linkend="TwoThouOnwards"/>) added functionality to Debrief to perform elementary track operations, including smoothing and removal of jumps. One approach to avoiding the jumps commonly associated with data from inertial navigation systems is to load the data in DR mode (see <xref linkend="import_modes"/>). The alternative is to move the track before/after the jump to line up the two sections.</para>
          <figure>
            <title>Grooming Track Data</title>
            <screenshot>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/TrackWithJump.png" width="100%" align="center"/>
                </imageobject>
              </mediaobject>
            </screenshot>
          </figure>
        </sect2>

        <sect2 xml:id="ResamplingData">
          <title>Resampling track and sensor data</title>

          <para><indexterm>
              <primary>Resampling data</primary>
            </indexterm><indexterm>
              <primary>Track sections</primary>
              <secondary>Resample</secondary>
            </indexterm>On occasion the data loaded into Debrief is of the wrong frequency:<variablelist>
              <varlistentry>
                <term>Too dense</term>

                <listitem>
                  <para>a track may have data items at a frequency higher than that necessary for the current analysis, resulting in slower than necessary Debrief performance. Alternately, a period of sensor data may be too dense, obscuring the underlying patterns in the data (such as a bearing fan)</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Too sparse</term>

                <listitem>
                  <para>During track reconstruction, it may emerge that the sensor data is of much higher frequency than the position data. After reconstruction, when stepping through a track in time the positions may <emphasis>jump</emphasis> to the specified time - indicating the positions are too sparse. Resolve this by either resampling the positions or by directing the track to use interpolated points.</para>
                </listitem>
              </varlistentry>
            </variablelist>Problems associated with data density are handled differently between tracks and blocks of sensor data. Tracks are resampled using the <guilabel>ResamplePositionsAt</guilabel> property - which adds or removes position observations as necessary. Sensor data is resampled using the <guilabel>VisibleFrequency</guilabel> property - though note that this does not add or remove points, it merely changes their visibility.</para>

          <para>Note: sensor and TUA data have a characteristic where there may be empty periods when the contact is not held. It would be wrong to continue interpolating data points during these periods, so data points are not generated if there is a gap of more than 3 minutes between data points.</para>
        </sect2>

        <sect2 xml:id="SplitTrackSections">
          <title>Splitting track sections</title>

          <para><indexterm>
              <primary>Track sections</primary>
              <secondary>Split</secondary>
            </indexterm>Before a jump can be removed from a track, the track must be split. To split a track, first decide where the split should be made, and right-click on the point where the split should happen (either on the plot or in the Outline View). The popup menu will provide options to split the track immediately before or after the indicated point.<tip>
              <para>It might be worthwhile enabling the <emphasis role="bold">Start/End time labels</emphasis> attribute so you can see exactly where the start and end times for each track segment begin and end. Refer to tutorial 2, <emphasis role="bold">Viewing some data</emphasis>, and the procedure for <emphasis role="bold">Adding data to a plot</emphasis>. </para>
            </tip><figure>
              <title>Splitting Track Sections</title>
              <screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/SplitTrackMenu.png" align="center"/>
                  </imageobject>
                </mediaobject>
              </screenshot>
            </figure></para>

          <para>On completion you&apos;ll see a visible split in the track, and the track represented as two segments in the Outline View.The track segments are named according to the DTG of their start point. The two track segments can now be manipulated separately (dragged) using the &apos;drag TMA segment&apos; tool as described later (see <xref linkend="DraggingTracks"/>).</para>
          <figure>
            <title>Track Sections Split</title>
            <screenshot>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/TrackAfterSplit.png" align="center"/>
                </imageobject>
              </mediaobject>
            </screenshot>
          </figure>
        </sect2>

        <sect2 xml:id="JoinTrackSections">
          <title>Joining track sections</title>

          <para><indexterm>
              <primary>Track sections</primary>
              <secondary>Join</secondary>
            </indexterm>Once track segments have been manipulated (see <xref linkend="DraggingTracks"/>), they can be rejoined. To rejoin tracks, select them both/all in the Outline View (using the <guilabel>Control</guilabel> key as appropriate). Then right-click and select Merge Tracks as shown below. Note, you can select which track becomes the &apos;host&apos;. <figure>
              <title>Joining Track Sections</title>
              <screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/MergeTracks.png" align="center"/>
                  </imageobject>
                </mediaobject>
              </screenshot>
            </figure></para>

          <para>The Debrief merge algorithm is not able to handle overlapping tracks, since it cannot resolve which overlapping segment to favour. This is a task best undertaken by the analyst. So, Debrief will produce a warning when the analyst tries to merge overlapping tracks. When it does, just delete one or more overlapping points and trigger the operation again.</para>
          <para>Once you have performed a <guibutton>merge</guibutton> operation on a collection of track segments they are no longer relative to the ownship track (in terms of range/bearing). They are now standalone tracks and can by Copy/Paste-d into another Debrief plot if you wish. The equivalent operation to make a TMA Segment standalone is to select <guibutton>Convert [xxx] into standalone track</guibutton></para>
        </sect2>

        <sect2 xml:id="CombineTrackSections">
          <title>Combining track sections</title>

          <para><indexterm>
              <primary>Track sections</primary>
              <secondary>Combine</secondary>
            </indexterm>On occasion, once a series of track segments have been built up (or created using the Generate TMA wizard) you may wish to <emphasis>combine</emphasis> them in order to make their management easier. If you wish to keep them as individual entities instead of merging them into a single new track segment, you may combine the track segments (available when you right-click on more than one TMA Solution). Performing this operation puts the segments into a single parent track whilst retaining them within this as single entities. This is particularly relevant for TMA Track Segments, since you may wish to continue dragging them individually as you refine your estimates of course/speed.</para>
        </sect2>
        <sect2 xml:id="GenerateInfill">
          <title>Generating infill segments</title>

          <para><indexterm>
              <primary>Track sections</primary>
              <secondary>Generate infill</secondary></indexterm> In addition to combining periods of track (legs), Debrief is able to generate sections of track to join existing sections. It performs this using a series of Cubic Spline calculations. The Splines cover Lat, Long, Depth, Course and Speed. In this way, the infill segment introduces track points that provide a smooth transition in the above attributes from one track to the other. The time interval used for the data points in the infill section is taken from the time interval between the first two points of the second segment. On the plot, the infill segment is shown as a dotted line, to indicate that its series of purely calculated positions, and not based on any observed measurements. <tip>
              <para>These infill sections are actually dynamic. So, as you move/drag your manual TMA legs around, Debrief will recalculate their positions each time you drop the track. Go on, have a go. It&apos;s really flash.</para>
            </tip>
            <note>
              <para>If you delete the track segment either side of the dynamic infill track section, then the infill section will also be deleted - since its positions can no longer be calculated.</para>
            </note>
          </para>
        </sect2>
        <sect2 xml:id="RemoveJumpsUser">
          <title>Removing Jumps</title>
          <indexterm>
            <primary>Track sections</primary>
            <secondary>Remove jumps (introduction)</secondary>
          </indexterm>
          <indexterm>
            <primary>Jumps</primary>
            <secondary>Remove jumps (introduction)</secondary>
          </indexterm>
          <para>A consequence of submarine dived inertial navigation is that the recorded track shows large jumps each time a GPS position fix is introduced, correcting the accumulated drift whilst dived.</para>
          <para>Debrief is able to automatically remove jumps, transforming less accurate track periods so that they tidily match high-confidence (but infrequent) GPS fixes. A jump is determined as two consecutive updates where the speed in the second update is 3 or more times larger than that in the previous update. The following fictional diagram shows a period of drift, with two green markers indicating the start/end of the dived period. A GPS fix was obtained at the green marker near the North-West. Then the submarine dived, and the drift error grew cumulatively. The next GPS fix was obtained at the time of the green marker near the South East. <figure>
              <title>Removing Track Jumps</title>
              <screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/JumpOne.png" align="center"/>
                  </imageobject>
                </mediaobject>
              </screenshot>
            </figure></para>
          <para>To remove jumps for this period, the analyst opens the Outline View, then selects positions for the whole period representing the drift section of track, from the first green marker to the second green marker (inclusive). <tip>
              <para>Use the shift-key to select a continuous sequence of items</para>
            </tip> After right-clicking on this period of position data the analyst will select <guibutton>Remove jumps in selected positions</guibutton>. The algorithm determines the size of the large jump at the end of the period, then works through the selected positions, applying a proportion of that large jump to each position, ensuring the green positions remain unchanged. <figure>
              <title>Track Jumps Removed</title>
              <screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/JumpTwo.png" align="center"/>
                  </imageobject>
                </mediaobject>
              </screenshot>
            </figure> In addition to selecting a discrete period of positions, it is possible to right-click on a track&apos;s <emphasis>Positions</emphasis> element in the Outline View, then selecting <guibutton>Remove jumps for selected track</guibutton>. But, please note that this will probably give a sub-optimal solution. When the whole track is selected, Debrief uses the first point in that track as the first lock point. For a more accurate tidied track, manually select the positions, ensuring a real GPS fix is used as the first point. <note>
              <para>Read more about the algorithm underpinning Remove Jumps in Chapter 3 of the Reference Guide <xref linkend="RemoveJumpsRef"/></para>
            </note></para>
        </sect2>
        <sect2 xml:id="tx_to_other_track">
          <title>Transferring a relative track to another host</title>
          <indexterm>
            <primary>Relative TMA</primary>
            <secondary>Move to new track host</secondary>
          </indexterm>
          <para>Sometimes single-sided reconstruction is performed at a range of fidelities. A DR reconstruction may be used to get maximum accuracy over a couple of hours. In parallel, an OTG reconstruction may be considering the route of a platform over several days. The track segment generated for the first can&apos;t be cut/pasted onto the second, because the ownship platform will have followed a different route (DR vs OTG). The following procedure can be used to solve this issue</para>
          <para>The track segment from the DR reconstruction can be considered as a set of range/bearing vectors from the DR primary track. We can then generate a new leg of target data by using these offsets to the primary track on the OTG plot.</para>
          <para>To do this, right-click on the reconstructed track and select <emphasis>Copy to clipboard as offsets from [Primary track name]</emphasis>. This operation has put the set of offsets, time-stamps, and original track name onto the clipboard.</para>
          <para>Next, either from this plot or a large-scale OTG plot, right-click on the new ownship track, and select <emphasis>Create new track by adding clipboard bearings to [Selected track name]</emphasis>. A new track will be added to the plot, where each point was generated by adding an offset to the nearest point-in-time on the subject track.</para>
        </sect2>
        <sect2 xml:id="smooth_backtrack_jumps">
          <title>Smoothing out back-tracking jumps</title>
          <indexterm>
            <primary>Track Data</primary>
            <secondary>Smooth jumps</secondary>
          </indexterm>
          <para>
            <figure>
              <title>Smoothing back-tracking jumps Jumps</title>
              <screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/smooth_back_jumps.png" align="center"  width="60%"/>
                  </imageobject>
                </mediaobject>
              </screenshot>
            </figure>
            The above illustration shows a phenomenum sometimes encountered in some track recorded track data. Individual points jump back down the path already travelled.  These jumps jar with the attention of the person viewing the track plot, and can introduce errors to the single-sided reconstruction.
            </para>
          <para>
            There is a pattern to the errors. They always just involve a single measurement (not a series of measurements), and the jump is always back along the path already travelled.
          </para>
          <para>An algorithm has been derived to locate, and remove these jumps. The algortihm works as follows:<orderedlist>
            <listitem>
              <para>Walk forwards along the track segment, remembering the previous 3 positions</para>
            </listitem>
            <listitem>
              <para>Once the three previous positions are all populated, they are notionally titled n-3, n-2 and n-1, with hte current position at n.</para>
            </listitem>
            <listitem>
              <para>Calculate the direction from n-3 to n-2.  This is the general direction of travel</para>
            </listitem>
            <listitem>
              <para>If n-1 represents a step backwards along this direction, a jump may have happened</para>
            </listitem>
            <listitem>
              <para>If the direction from n to n-2 is back on the original direction, then a jump certainly occurred.</para>
            </listitem>
            <listitem>
              <para>If a jump has occurred, then replace the location of n-1 with a point at the same time that has been interpolated between n-2 and n.</para>
            </listitem>
          </orderedlist>
          </para>
        </sect2>
      </sect1>
      <sect1 xml:id="GridEditor">
        <title>Using the Grid Editor</title>

        <sect2 xml:id="GridIntro">
          <title>Introduction</title>

          <para><indexterm>
              <primary>Grid editor</primary>
            </indexterm>The Grid Editor is a tabular editor with an associated xy plot that allows bulk editing of data points, together with data smoothing operations.<figure>
              <title>The Grid Editor</title>
              <screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/GridOverview.png" align="center" width="100%"/>
                  </imageobject>
                </mediaobject>
              </screenshot>
            </figure></para>
        </sect2>

        <sect2 xml:id="UseOfGrid">
          <title>Use of Grid Editor</title>

          <para>The Grid Editor tracks the current selection in the Outline View. Thus, when you select something capable of being edited in a grid in the Outline View (such as a set of positions or sensor cuts) then it is shown in the Outline View. <note>
              <para>If this becomes inconvenient you can stop the Grid Editor from tracking the Outline View selection by clearing the <guilabel>Track Selection</guilabel> lock icon.</para>
            </note></para>

          <para>When a set of data is first loaded into the Grid Editor it is shown as a plain table. Click into any cell to edit its data. Buttons in the Grid Editor toolbar allow you to insert or delete a row. But, the Grid Editor becomes significantly more capable when you focus on a single attribute. Do this by clicking on the title label for a field (such as depth, bearing, etc).</para>

          <para>When you focus the grid editor on a single field it shows an xy plot of that field. This plot can be used to highlight/remove/fix outliers and for general data smoothing operations. Drag points in the graph in order to smooth them, or for Debrief to take on the smoothing for you, select a series of rows either side of the dodgy items then select the <emphasis>interpolate</emphasis> calculator icon to smooth the unselected rows.</para>

          <para>See the <emphasis>Groom Sensor Data</emphasis> tutorial for more guidance on these operations.</para>
        </sect2>
      </sect1>
    </chapter>

    <chapter xml:id="analysing_data">
      <title>Analysing Data</title>

      <para>Analysis is the core function of <indexterm>
          <primary>Track Data</primary>
          <secondary>Primary &amp; Secondary Tracks</secondary>
        </indexterm> Debrief. In this section (at last) you are going to gain some familiarity with how Debrief can be used to analyse maritime exercises.</para>

      <sect1 xml:id="assigning_tracks">
        <title>Assigning tracks as primary and secondary</title>

        <sect2 xml:id="the_tote_area">
          <title>Tote area</title>

          <para><indexterm>
              <primary>Track tote</primary>
            </indexterm>We&apos;ll have a brief explanation of the Tote at this point, using the image below. <figure xml:id="tote_demo">
              <title>The <application>Debrief</application> Tote</title>

              <screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/ToteLabelled.png" width="274" align="center"/>
                  </imageobject>
                </mediaobject>
              </screenshot>
            </figure></para>

          <para>The <glossterm linkend="g_tote">Tote</glossterm> area is used to show the current and relative status between two or more platform tracks. The information on the <glossterm linkend="g_tote">Tote</glossterm> is dynamic, showing vessel information at the time indicated in the Stepper Control.</para>

          <note>
            <para>The primary and secondary tracks may not contain values exactly at the time in the time stepper control. For both the tote display and the plot-highlights, Debrief uses the data values recorded on or immediately after the indicated stepper time (see the <xref linkend="time_calc"/> for more detail).</para>
          </note>

          <para>One <glossterm linkend="g_track">track</glossterm><indexterm>
              <primary>Primary track</primary>
            </indexterm> currently loaded is assigned as the Primary track (the red track in this instance), and then one or more tracks are assigned as <indexterm>
              <primary>Secondary track</primary>
            </indexterm>Secondary tracks. The primary track always shows absolute data such as current course, speed and depth. With just a single secondary track specified, it also shows relative (calculated) data - as illustrated above. The secondary tracks always display both absolute data (course, speed, depth), plus the relative data respective to the primary. Thus, remember that if you want to see the primary track&apos;s relative bearing to the secondary, make sure there&apos;s just the one secondary track selected.</para>

          <para>Not only tracks can be placed on the Tote. Most annotations (labels, circles, etc) can also be set as primary or secondary track. If no time is available for an annotation it is deemed to always be valid, and calculations are shown although the time field is displayed as "n/a". However, if the annotation has start and end times the tote displays "n/a" when outside that period and calculated data when inside it.</para>

          <note>
            <para>It may be useful to remember that the Primary Track is usually assigned to the Target, thereby allowing a constant display of target bearing and range.</para>
          </note>

          <para>There can be any number of secondary tracks. <application>Debrief</application> displays calculated results of the relationship between each one and the Primary Track. To see the relationship between a pair of secondary tracks, one of them must be set to the Primary track.</para>

          <para>The following calculated data is presented, where the current point on each track is used for the calculation: <variablelist>
              <varlistentry>
                <term>Range</term>

                <listitem>
                  <para>The range between the current point on the secondary track and the current point on the primary track using the <glossterm linkend="g_earth_model">earth model</glossterm> as described in the Glossary, displayed in the units stored in the Debrief preferences window. Debrief NG introduced the option of showing <glossterm linkend="g_slant_range">slant range</glossterm>, accessible from Debrief&apos;s Preferences window. If you have indicated that you want to view slant range, then the range shown is a function of horizontal range and vertical separation.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Bearing</term>

                <listitem>
                  <para>The bearing between the points.</para>
                </listitem>
              </varlistentry>

              <varlistentry xml:id="RelBearingDescription">
                <term>Rel Bearing / ATB</term>

                <listitem>
                  <para>The relative bearing and Angle on The Bow from the perspective of that column&apos;s track.. There are two formats used for relative bearing, depending on the setting of <emphasis>Relative bearing format</emphasis> in the <guimenu>Window</guimenu>/<guimenu>Preferences</guimenu> dialog. If the format is specified as UK, the R and G characters at the start of the result are short for Red and Green, which indicate that the contact is to the Port or Starboard of the secondary track. If the format is specified as US, the value uses 0 as directly ahead and continues clockwise through 180 (astern) and back round to 359.9.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Speed</term>

                <listitem>
                  <para>The current speed of the indicated track (no actual calculation is performed here; the value from the data-file is displayed directly).</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Course</term>

                <listitem>
                  <para>The current course of the indicated track (no actual calculation is performed here; the value from the data-file is displayed directly).</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Depth</term>

                <listitem>
                  <para>The current depth of the indicated track (no actual calculation is performed here; the value from the data-file is displayed directly).</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Brg Rate</term>

                <listitem>
                  <para>The instantaneous bearing rate of the secondary track as observed from the secondary track. This value is explained in the Glossary.</para>
                </listitem>
              </varlistentry>

              <varlistentry xml:id="time_calc">
                <term>Time</term>

                <listitem>
                  <para>Where track data is not recorded at regular steps, and tracks do not have data at the same time steps, there is a likelihood that the value displayed on the tote will not have been recorded at the current tote time. The time field shows the actual time at which the data value was recorded for that track.</para>
                </listitem>
              </varlistentry>
            </variablelist><note>
              <para>When more than two tracks are loaded, the value <guilabel>n/a</guilabel> is shown in Tote calculations for the primary track which rely on other track data (range, bearing, rel bearing, brg rate). This is because it is unclear which inter-track relationship is being calculated. Where only two tracks are loaded (one primary and one secondary), the tote is able to show relative calculated data for both.</para>
            </note></para>
        </sect2>

        <sect2 xml:id="more_assigning_tracks">
          <title>Assigning tracks</title>

          <para>Assigning primary and secondary tracks is covered in the respective <glossterm linkend="g_cheat">Cheat Sheet</glossterm>. Icons are provided in the Outline View toolbar to specify if the selected track should be:<orderedlist>
              <listitem>
                <para>Made primary</para>
              </listitem>
              <listitem>
                <para>Made secondary</para>
              </listitem>
              <listitem>
                <para>Added to the list of secondaries</para>
              </listitem>
            </orderedlist><figure>
              <title>Assigning Tracks</title>
              <screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/LayerManagerView.png" align="center"/>
                  </imageobject>
                </mediaobject>
              </screenshot>
            </figure></para>

          <tip>
            <para>If you have more than two tracks, it can be quicker to assign the primary track manually and then press <guibutton>Auto Populate</guibutton> to assign the remaining tracks as secondary.</para>
          </tip>
        </sect2>

        <sect2 xml:id="some_notes">
          <title>Notes</title>

          <para><warning>
              <para>A Circle currently only has a single "Centre" DTG value - so it will only be highlighted for 3 minutes either side of this point. Better results are obtained by using a Label (which has a picture of a text label on it), since Labels have start and finish DTGs.</para>
            </warning>
            <note>
              <para>It is not just tracks that can be added to the Tote, experiment with right-clicking on features on the plot and see if they have the "Set Primary Track" or "Set Secondary Track" commands available (although read the note below about these). In this way you can make a timed data point (represented by a Circle with a very small radius) the primary track, then add a number of vessel tracks as secondary tracks, and then as you move through the data you can constantly see the vessel range and bearings from this data point. This is particularly useful for seeing vessel ranges and bearings from a <glossterm linkend="g_sensor">sensor</glossterm> such as a sonar buoy. Remember to set the DTG data for the data point to time(s) near those of the track - or else in your example <application>Debrief</application> will assume the "sonar buoy" is not yet active.</para>
            </note>
            <note>
              <para>The limits on the time period are the outer time limits of the visible data in the primary and secondary tracks currently displayed on the Tote, so following a filter operation (introduced later) the start/end times will be changed to reflect the time limits specified.</para>
            </note>
            <note xml:id="time_controls">
              <para>The keyboard can also be used for moving backwards and forwards, although <application>Debrief</application> has to know that it&apos;s the Stepper that you want the keys to control. So, after clicking on the time-slider control you can then switch to keyboard control of the Tote as follows: <itemizedlist spacing="compact">
                  <listitem>
                    <para>Page Up/Down keys: these control small step backward/forward resp.</para>
                  </listitem>

                  <listitem>
                    <para>Page Up/Down arrows: these control large step backward/forward resp.</para>
                  </listitem>

                  <listitem>
                    <para>Home/End keys: these control goto First/Last resp.</para>
                  </listitem>
                </itemizedlist></para>
            </note>
            <tip xml:id="interp_data">
              <para>Debrief has an interpolates points property which, when ticked, interpolates the positions between actual data points. The highlight cursor changes appearance when on an interpolated data point.<figure xml:id="interpolate_demo">
                  <title>Display of an interpolated point</title>
                  <screenshot>
                    <mediaobject>
                      <imageobject>
                        <imagedata fileref="figures/interpolated_position.png"/>
                      </imageobject>
                    </mediaobject>
                  </screenshot>
                </figure></para>
            </tip></para>
        </sect2>
      </sect1>

      <sect1 xml:id="controlling_time">
        <title>Controlling time</title>
        <para>Time is managed within Debrief through the use of the Time Controller. As with all views, this is accessible through the Window > Show View menu.</para>

        <sect2 xml:id="time_controller">
          <title>The Time Controller</title>

          <para><indexterm>
              <primary>Time controller</primary>
            </indexterm>The Time Controller is a view that provides a number of functions, including displaying the current serial time, allowing control of that time, and providing access to a series of time-related functions in <application>Debrief</application>.<figure xml:id="time_controller_demo">
              <title>Time Controller view</title>
              <screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/TimeController.png" width="234" align="center"/>
                  </imageobject>
                </mediaobject>
              </screenshot>
            </figure>Your temporal (time-related) view of track data is dependent on three settings:<variablelist>
              <varlistentry>
                <term>Display Mode</term>
                <listitem>
                  <para>How the track is displayed</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>Plotting mode</term>
                <listitem>
                  <para>Whether the data dynamically adjusts to follow the location/orientation of the primary track</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>Highlight Mode</term>
                <listitem>
                  <para>How the current position is displayed</para>
                </listitem>
              </varlistentry>
            </variablelist></para>

          <para>You access these modes using the buttons on the Time Controller toolbar and the Time Controller drop-down menu.<figure xml:id="TimeControllerMenu">
              <title>Time Controller menu</title>

              <screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/TimeController3.png" width="100%"/>
                  </imageobject>
                </mediaobject>
              </screenshot>
            </figure>As you can see, the first three items on the menu allow you to select the current Display/Plotting/Highlight modes. In each sub-menu is a command to edit the currently mode. Later menu options allow you to format how information is displayed on the menu, and perform other time-related activities.</para>

        </sect2>
        <sect2 xml:id="display_modes">
          <title>Display modes</title>

          <para>The first three icons on the Time Controller toolbar allow you to choose two combinations of plotting modes. The first two control how data is displayed: in Normal Mode, all exercise data is displayed, whereas in Snail mode, only the current position and a series of recent points are displayed (similar to a Snail with trail following behind it).</para>

          <para>As you&apos;d imagine, Normal Mode is the mode that is used for most analysis tasks. It&apos;s North oriented and shows all relevant data. It&apos;s also quite simple, only having two properties, both of which control the presentation of the highlight:<variablelist>
              <varlistentry>
                <term>Color</term>

                <listitem>
                  <para>Yes, the Color of the highlight</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Size</term>

                <listitem>
                  <para>I know, I know, it&apos;s the size of the rectangle used to plot the highlight (measured in pixels)</para>
                </listitem>
              </varlistentry>
            </variablelist><figure xml:id="normal_trail_demo">
              <title>Example of a normal trail</title>

              <screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/NormalTrailImage.png" align="center"/>
                  </imageobject>
                </mediaobject>
              </screenshot>
            </figure></para>

          <para>The Snail Trail is used for specific analysis tasks when you need to concentrate on the specific activities around a certain time, without the clutter of the remaining track data.</para>

          <para><figure xml:id="snail_trail_demo">
              <title>Example of a snail trail</title>

              <screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/SnailTrailImage.png" align="center"/>
                  </imageobject>
                </mediaobject>
              </screenshot>
            </figure>The circle represents the current position, the stalk direction represents the current course, and its length gives a relative idea of the vessel speed (when compared to the length of the other vessel&apos;s stalk, <emphasis>boys will be boys</emphasis>). The dots trailing back from the current position are a <glossterm linkend="g_snail_trail">snail trail</glossterm> of points going back in time. If you move forward and backward with the stepper control you will see these trails moving. The following properties are editable for a snail trail:<variablelist>
              <title>Snail trail properties</title>

              <varlistentry>
                <term>Fade Points</term>

                <listitem>
                  <para>this will cause the points in the trail to fade away to the background colour</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Link positions</term>

                <listitem>
                  <para>this will plot a line between the points in the trail</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Plot Track Name</term>

                <listitem>
                  <para>this will plot the track name alongside the current position</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Point Size</term>

                <listitem>
                  <para>this will change the size of the points together with the thickness of the lines drawn on the plot,</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Trail Length</term>

                <listitem>
                  <para>this will change the time period covered by the trail</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Vector Stretch</term>

                <listitem>
                  <para>this will change the <emphasis>amplification</emphasis> applied to the speed when drawing the speed vector; very fast vessels (or weapons) will need the this stretch reduced to allow stalks of sensible length.</para>
                </listitem>
              </varlistentry>
            </variablelist></para>
        </sect2>

        <sect2 xml:id="relative_mode">
          <title>Plotting modes</title>

          <para>The plotting mode affects the origin and orientation of the plot. In <emphasis>Normal</emphasis> mode the plot viewport stays static as the time changes, but if <emphasis>Primary Centred/North oriented</emphasis> mode is selected, the viewport moves to track the primary participant. Beyond that, the <emphasis>Primary Centred/North oriented</emphasis> mode orients the plot to match the heading of the primary track. This mode is particularly useful for presenting a scenario from the perspective of the primary participant, but the quickly changing orientation can be off-putting.</para>

          <tip>
            <para>Primary Centered/North Oriented mode is particularly useful for analysing one vessel trailing another. If you make the trailing vessel the primary track and the vessel being trailed the secondary track, as you step forward through the serial you will clearly be able to see the relative bearing of the contact as held by the trailing vessel.</para>

            <para>The sample shown below gives a demonstration of the use of this mode. You can quickly see that the blue vessel is directly ahead of the red trailing vessel, and your use of the Range Ring Highlighter gives us a quick indication of range. <figure xml:id="relative_display_demo">
                <title>Sample of primary centered/North oriented mode</title>
                <screenshot>
                  <mediaobject>
                    <imageobject>
                      <imagedata fileref="figures/relative_demo.png" align="center" width="100%"/>
                    </imageobject>
                  </mediaobject>
                </screenshot>
              </figure></para>
          </tip>
        </sect2>

        <sect2 xml:id="highlight_modes">
          <title>Highlight modes</title>

          <para>Three highlight modes are provided:<variablelist>
              <varlistentry>
                <term>Default Highlight</term>

                <listitem>
                  <para>Shows a rectangle at the current position. From the default highlight properties you are able to select the colour and size of the rectangle to plot. If a track has sensor data present, and the sensor has a non-zero array offset, then it is possible (via the PlotArrayCentre track property) to direct Debrief to plot a diagonal cross icon at the array centre.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Symbol Highlight</term>

                <listitem>
                  <para>Shows the symbol (<xref linkend="symbol_sets"/>) currently assigned in the properties for each track. From the symbol highlight properties you are able to select the size at which the symbols should be plotted.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Highlight off</term>

                <listitem>
                  <para>For when you don&apos;t want a highlight to be shown (such as when taking a screenshot using <application>PrintScreen</application>)</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Range Ring Highlight</term>

                <listitem>
                  <para>This mode shows a series of <indexterm>
                      <primary>Range Ring</primary>
                    </indexterm> around the current location. The editable properties are listed below.</para>
                </listitem>
              </varlistentry>
            </variablelist></para>

          <para>For range rings you are able to edit the following properties:<variablelist>
              <varlistentry>
                <term>Arc Start</term>

                <listitem>
                  <para>The start angle for the arc of coverage. The arc will be plotted relative to platform heading, with negative values plotted to the Port-Side.</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>Arc End</term>
                <listitem>
                  <para>The ending angle for the arc of coverage, travelling clockwise</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Color</term>

                <listitem>
                  <para>The colour to plot the range rings</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Num Rings</term>

                <listitem>
                  <para>How many range rings to plot, uniformly distributed from the center to the outer radius</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Radius</term>

                <listitem>
                  <para>The radius of the outermost range ring</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Spoke separation</term>

                <listitem>
                  <para>The angular separation of the spokes plotted within the range rings, centered on current heading.</para>
                </listitem>
              </varlistentry>
            </variablelist></para>
        </sect2>

        <sect2 xml:id="time_display">
          <title>Time display</title>

          <para>The green digits of the time display are tied closely to the slider-bar immediately beneath them. Dragging the slider controls the current display time together with how the current data is displayed. Other Debrief views, such as the Narrative Viewer (<xref linkend="viewing_narratives"/>) and the Time-Variable (<xref linkend="show_time_vars"/> graphs) update in response to time changes from the time slider.</para>

          <para>A range of display formats are provided to make the displayed time more consistent with that in a supporting document, or of sufficient fidelity to support the current analysis.</para>
        </sect2>

        <sect2 xml:id="time_slider">
          <title>Time slider</title>

          <para>Beneath the time-display is the time-slider, used to quickly move through a time-period. By default the slider is of infinite resolution, stopping exactly on the second/millisecond proportionate to the position of the slider. Debrief can be configured such that the slider stops on higher resolutions by selecting the relevant increment from the <guibutton>Time slider increment</guibutton> list in the Time Controller&apos;s drop-down menu.</para>
          <para> You can also use your mouse wheel to move forwards and backwards in time, though you have to ensure the Time Slider has focus first. Note that pressing the Shift key causes extra large steps, and the Alt key causes extra small steps. </para>
        </sect2>

        <sect2 xml:id="time_bookmarks">
          <title>Bookmarking</title>

          <para>Debrief NG introduces the concept of <glossterm linkend="g_bookmarks">Bookmarks</glossterm>. These represent the combination of a DTG, a remark, and the name of a plot-file, and are displayed in the <guibutton>Bookmarks</guibutton> view. With the view open you can quickly move between significant events across a number of files. Bookmarks are added by clicking on the <guiicon>
              <inlinemediaobject>
                <imageobject>
                  <imagedata fileref="figures/AddBookmark.png"/>
                </imageobject>
              </inlinemediaobject>
            </guiicon><guimenuitem>Add DTG as bookmark</guimenuitem> command from the <guiicon>Time Controller</guiicon>&apos;s drop-down menu. The bookmarks view will not automatically open, but the bookmarks themselves will be present when it is. The current DTG is used as a default remark - but you&apos;ll get most mileage our of the bookmarks by describing the event that you&apos;re bookmarking.</para>
        </sect2>

        <sect2 xml:id="filter_to_time_period">
          <title>Manipulating according to time period</title>

          <para>The pair of <indexterm>
              <primary>Time Control</primary>
              <secondary>Time Slider Bar</secondary>
            </indexterm>Time Filter Bars at the foot of the <guiicon>Time Controller</guiicon> view allow you to set start and finish times. These times are not set in support of a single Debrief operation, but are used across a range of operations. When dragging the sliders, hold down the shift-key to move in whole segments (hours, days, as appropriate). Drag the shaded section to retain the period length but change its origin (again using the shift-key if appropriate).<tip>
              <para>On occasion it&apos;s not possible to put the time slider markers on exactly the right time value - particularly if your plot covers a long timer period. In these circumstances, if you double-click on either the start or finish arrow, their exact time is made available for editing in the Properties View (see <xref linkend="property_editing"/>). Alternatively, hold the CTRL key down whilst clicking on a start/end marker, and a cute little window will open to let you put the time on a whole minute value.</para>
            </tip></para>

          <sect3 xml:id="filter_time_period">
            <title>Filter to time period</title>

            <para>When the <guibutton><inlinemediaobject>
                  <imageobject>
                    <imagedata fileref="figures/FilterToTimePeriod.png"/>
                  </imageobject>
                </inlinemediaobject>Filter to time period</guibutton> radio button is depressed, changing the time of the start or end time-sliders will automatically filter the displayed data to the indicated period. In this mode, you can select a 6-hour period (for example), and drag it through the full serial time with shift-key depressed to view a moving "window" of data. In addition to filtering the visible data to the indicated period, the period covered by the time-slider is also reduced. Drag out the start/end time-sliders to return to the original time period.</para>
          </sect3>

          <sect3 xml:id="ExportToFlatFile">
            <title>Export to Flat File (SAM) format</title>

            <para><indexterm>
                <primary>Export</primary>
                <secondary>SAM Format</secondary>
              </indexterm>This option allows you to export primary and secondary data as a flat-file format. As part of this, data can be constrained to a particular time period and can also include any visible sensor data for those tracks. This file format consists of a data file of tab-separated variables and is described further in <xref linkend="Section_Flat"/>. When you perform this export, Debrief will remember the folder and sensor type used in previous export operations.</para>

            <sect4 xml:id="ExportToSamAlg">
              <title>SAM Export algorithm</title>

              <para>This algorithm works as follows:<orderedlist>
                  <listitem>
                    <para>Check data is compliant (primary &amp; secondary tracks, and some sensor data present for specified period</para>
                  </listitem>

                  <listitem>
                    <para>Write header information to file</para>
                  </listitem>

                  <listitem>
                    <para>Looping thorough specified period in 1 second steps:<orderedlist>
                        <listitem>
                          <para>Calculate primary track location at specified time (via interpolation)</para>
                        </listitem>

                        <listitem>
                          <para>Calculate sensor location at specified time (via interpolation)</para>
                        </listitem>

                        <listitem>
                          <para>Calculate secondary track location at specified time (via interpolation)</para>
                        </listitem>

                        <listitem>
                          <para>Output this data record calculating values from above as applicable</para>
                        </listitem>
                      </orderedlist></para>
                  </listitem>
                </orderedlist></para>
            </sect4>
          </sect3>
          <sect3>
            <title>Updated Export to Flat File (SAM) format</title>
            <para>In Spring 2012 the <indexterm>
                <primary>SAM export</primary>
                <secondary>export</secondary>
              </indexterm> capability was extended to include the following enhancements:<itemizedlist>
                <listitem>
                  <para>Include doppler calculations</para>
                </listitem>
                <listitem>
                  <para>Optionally support second sensor</para>
                </listitem>
                <listitem>
                  <para>Support a wider range of sensor types</para>
                </listitem>
                <listitem>
                  <para>Allow the protective marking to be specified</para>
                </listitem>
                <listitem>
                  <para>Allow sensor depth to be specifed (incl Aft depth for towed sensor)</para>
                </listitem>
              </itemizedlist><figure>
                <title>Sample improved SAM Export dialog</title>
                <screenshot>
                  <mediaobject>
                    <imageobject>
                      <imagedata fileref="figures/SAM2Export.png" width="300" align="center"/>
                    </imageobject>
                  </mediaobject>
                </screenshot>
              </figure></para>
          </sect3>

          <sect3 xml:id="CopyToClip">
            <title>Copy to clipboard</title>

            <para><indexterm>
                <primary>Export</primary>
                <secondary>Data to Clipboard</secondary>
              </indexterm>Another operation that relies on the selected time period is exporting calculated data to the clipboard. This operation is available from the <guiicon>
                <inlinemediaobject>
                  <imageobject>
                    <imagedata fileref="figures/Calculator.png"/>
                  </imageobject>
                </inlinemediaobject>
              </guiicon><guibutton>Time Controller</guibutton>&apos;s drop-down menu, and it performs a series of calculations for each data-point in the indicated time period. These calculations are then placed on the system clipboard in Comma-Separated-Variable format for reuse in other applications, <application>Microsoft Excel</application>, for instance.<footnote>
                <para>A header line is written first, indicating the contents of each column: <itemizedlist spacing="compact">
                    <listitem>
                      <para>Track Time(hhmmss)</para>
                    </listitem>
                    <listitem>
                      <para>Depth(metres)</para>
                    </listitem>
                    <listitem>
                      <para>Speed(Knots)</para>
                    </listitem>
                    <listitem>
                      <para>Course(degs)</para>
                    </listitem>
                    <listitem>
                      <para>Range(yards)</para>
                    </listitem>
                    <listitem>
                      <para>Bearing(degs)</para>
                    </listitem>
                    <listitem>
                      <para>Rel Bearing(degs - using <varname>Relative bearing format</varname> specified in the <guimenu>Window</guimenu>/<guimenu>Preferences</guimenu>dialog)</para>
                    </listitem>
                    <listitem>
                      <para>Brg Rate(deg/min)</para>
                    </listitem>
                    <listitem>
                      <para>Color (for this track point)</para>
                    </listitem>
                    <listitem>
                      <para>Name</para>
                    </listitem>
                    <listitem>
                      <para>PrimaryName</para>
                    </listitem>
                  </itemizedlist></para>
                <para>The results from the primary track are listed first, which (as in the <glossterm linkend="g_tote">Tote</glossterm>) do not show results of calculated operations: <screen>NELSON 12/Dec/95 05:00:00 000 02.00 269.7 n/a n/a n/a n/a 0500 0500</screen></para>
                <para>Then the secondary tracks are listed: <screen>
 BUNKUM 12/Dec/95 05:50:00 000 00.00 000.0 12381 311.0 R49.0 R0.264 F5 0550</screen></para>
              </footnote><tip>
                <para>The Colour parameter shows the colour of the track point used in that calculation. On occasion analysts colour a track according to whether that participant is in contact or not. Exporting the colour flag to Excel allows the post-analysis data to be filtered according to periods in contact - or any other time-dependent aspect specified by the analyst. The application of a particular colour to sections of track is performed within the Outline View.</para>
              </tip><note>
                <para>The last two columns output give identifier information: the first of these is the name of the current item in this <glossterm linkend="g_track">track</glossterm>, and the second is the point in the primary <glossterm linkend="g_track">track</glossterm> nearest to the current time stamp: that-is the point in the primary track which has been used for the calculated results.</para>
              </note></para>
          </sect3>
        </sect2>

        <sect2 xml:id="vcr_controls">
          <title xml:id="time_vcr_controls">VCR controls</title>

          <para>The VCR controls allow you to move forwards and backwards in time through the plot. Looking at the order of buttons in the Time Controller screenshot above, the commands allow you to move to the beginning, move a large step backwards, move a small step backwards and repeat the last time step continuously (small or large step, backwards or forwards). The remaining buttons repeat these operations in the "forward" direction. The size of small and large steps is controlled by the Time Controller properties window, accessed by selecting <guimenu>Properties</guimenu>/<guimenuitem>Time Controller</guimenuitem>. Also available from this set of properties is the <guibutton>Step Interval</guibutton>; the time interval that Debrief waits before automatically moving forwards.</para>
        </sect2>

        <sect2 xml:id="other_ops">
          <title>Other time operations</title>

          <para>Beyond the operations available from the Time Controller, the time-period is used to support other Debrief operations. The most significant of these operations is when producing time variable plots (see <xref linkend="show_time_vars"/>). The current time period settings dictate the extent of what information is calculated for these plots.</para>
        </sect2>

      </sect1>

      <sect1 xml:id="measure_range">
        <title>Measuring range and bearing</title>

        <sect2 xml:id="more_range">
          <title>Range bearing tool</title>

          <para>It&apos;s worth reminding you at this point about the Range Bearing measuring tool <guiicon><inlinemediaobject>
                <imageobject>
                  <imagedata fileref="figures/RngBrg.png"/>
                </imageobject>
              </inlinemediaobject></guiicon>) which is frequently useful in analysis. The calculated range and bearing is displayed at the mid-point of the line and at the foot of the DebriefNG screen (where it remains until you make another measurement).</para>

          <para>The default units for the range displayed are configured using the <guimenu>CMAP</guimenu> section of the <guimenuitem>Preferences</guimenuitem> dialog in the <guimenu>Window</guimenu> menu. The preferences page can also be accessed by double-clicking on the range/bearing slave display at the foot of the screen.</para>
        </sect2>

        <sect2 xml:id="earth_model">
          <title>Earth Model</title>

          <para>The Range Bearing calculation is performed using the <indexterm>
              <primary>Algorithms</primary>
              <secondary>Earth Model</secondary>
            </indexterm><indexterm>
              <primary>Earth Model</primary>
            </indexterm>algorithms in the current Earth Model, as described later in <xref linkend="rng_brg_calcs"/>.</para>
        </sect2>
      </sect1>

      <sect1 xml:id="show_time_vars">
        <title>Show time-related variables</title>

        <para><indexterm>
            <primary>Time variable plots</primary>
          </indexterm>Time-variable plots can be opened via the Outline View. When one or more items that are candidate subjects <footnote>
            <para>Items are suitable for inclusion in a time-variable plot when they have both temporal and spatial attributes, so this includes tracks, individual locations and annotations, but does not include grids, scales, or background datasets.</para>
          </footnote> for a time-variable plot are selected in the Outline View, it adds the <guibutton>Show XY Plot</guibutton> operation <indexterm>
            <primary>Toolbox</primary>
            <secondary>Show time variables</secondary>
          </indexterm>to its right-click menu. After requesting the plot, the user is invited to indicate which calculation is to be plotted, and which track is to be used as the primary <glossterm linkend="g_track">track</glossterm> (where relevant).The example below shows the results of a <guilabel>Range</guilabel> calculation between two tracks. Note that dragging the mouse downwards in a rectangle inside the plot zooms in on the data, dragging the mouse upwards into a rectangle zooms out on the data, and that the <guibutton>Fit to Window</guibutton> button zooms out to show all of the current data. Where data is not present, a gap is inserted into the data-line. <figure xml:id="time_var_plot_demo">
            <title>View of time-variable plot</title>

            <screenshot>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/time_variable_plot.png" scalefit="1" width="100%"/>
                </imageobject>
              </mediaobject>
            </screenshot>
          </figure></para>

        <para><figure xml:id="time_var_plot_vert">
            <title>View of time-variable plot in waterfall mode</title>

            <screenshot>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/time_variable_plot_switch.png" width="180" align="center"/>
                </imageobject>
              </mediaobject>
            </screenshot>
          </figure></para>

        <note>
          <para><application>Debrief</application> performs special processing depending on whether the selected items contain valid time data or not. In general, when an annotation (such as a label) does not contain DTG data Debrief assumes that it is valid throughout the selected time period. <application>Debrief</application> produces the time-variable plot according to the following tables: <table frame="sides" xml:id="relative_calculations">
              <title>Relative calculations (range, bearing, etc)</title>

              <tgroup cols="3">
                <thead>
                  <row>
                    <entry/>

                    <entry>Primary contains DTG</entry>

                    <entry>Primary does not contain DTG</entry>
                  </row>
                </thead>

                <tbody>
                  <row>
                    <entry>Secondary contains DTG</entry>

                    <entry>For each point on secondary, find nearest primary point (in time), use these for calculation</entry>

                    <entry>For each point on secondary, use single primary point for calculation</entry>
                  </row>

                  <row>
                    <entry>Secondary does not contain DTG</entry>

                    <entry>For each point in primary, use single secondary point for calculation.</entry>

                    <entry>Produce single calculations at start &amp; end of time period</entry>
                  </row>
                </tbody>
              </tgroup>
            </table><table xml:id="absolute_calcs">
              <title>Absolute calculations (range, bearing, etc)</title>

              <tgroup cols="2">
                <thead>
                  <row>
                    <entry/>

                    <entry>Calculation</entry>
                  </row>
                </thead>

                <tbody>
                  <row>
                    <entry>Data series contains DTG</entry>

                    <entry>For each point on series, calculate result</entry>
                  </row>

                  <row>
                    <entry>Data series does not contain DTG</entry>

                    <entry>Produce single calculations at start &amp; end of time period</entry>
                  </row>
                </tbody>
              </tgroup>
            </table></para>
        </note>

        <para>The <guibutton>Export to WMF</guibutton>
          <guiicon>
            <inlinemediaobject>
              <imageobject>
                <imagedata fileref="figures/ExportToWMF.png"/>
              </imageobject>
            </inlinemediaobject>
          </guiicon> button writes the current graph to a Windows Metafile in the current WMF_Directory, and the <guibutton>Export to Clipboard </guibutton> (<guiicon>
            <inlinemediaobject>
              <imageobject>
                <imagedata fileref="figures/ExportToClipboard.png"/>
              </imageobject>
            </inlinemediaobject>
          </guiicon> places a copy of the plot on the Windows clipboard for onward insertion into MS Word</para>

        <para>The <guibutton>Switch Axes</guibutton>
          <guiicon>
            <inlinemediaobject>
              <imageobject>
                <imagedata fileref="figures/switchAxes.png" width="16px"/>
              </imageobject>
            </inlinemediaobject>
          </guiicon> button changes the orientation of the plot from its default format to a waterfall-style display with time plotted down the left-hand side.</para>

        <para>The <guibutton>Grow Times</guibutton>
          <guiicon>
            <inlinemediaobject>
              <imageobject>
                <imagedata fileref="figures/expandTime.png"/>
              </imageobject>
            </inlinemediaobject>
          </guiicon> button changes the time axis to make the top of the waterfall display the current Time Controller time, with the data displayed changing dynamically with time slider..</para>

        <para>The <guibutton>Configure Plot</guibutton>(<guiicon>
            <inlinemediaobject>
              <imageobject>
                <imagedata fileref="figures/ConfigurePlot.png"/>
              </imageobject>
            </inlinemediaobject>
          </guiicon>) button opens a property window (see <xref linkend="g_property_window"/>) allowing you to control the presentation of the time-variable graph using the following properties:</para>

        <para><informaltable>
            <tgroup cols="2">
              <colspec colname="col1" colnum="1" colwidth="*"/>

              <colspec colname="col2" colnum="2" colwidth="*"/>

              <thead>
                <row>
                  <entry colname="col1">Parameter</entry>

                  <entry colname="col2">Description</entry>
                </row>
              </thead>

              <tbody>
                <row>
                  <entry colname="col1">DataLineWidth</entry>

                  <entry colname="col2">The width to plot the data-lines on the graph</entry>
                </row>

                <row>
                  <entry colname="col1">DateTickUnits</entry>

                  <entry colname="col2">The interval (and format) to use on the date axis</entry>
                </row>

                <row>
                  <entry colname="col1">RelativeTimes</entry>

                  <entry colname="col2">Whether to plot absolute or relative times (used when analysing time-zero data). See <xref linkend="show_time_vars"/> .</entry>
                </row>

                <row>
                  <entry colname="col1">ShowSymbols</entry>

                  <entry colname="col2">Whether to show datum symbols (useful to indicate different data recording rates)</entry>
                </row>

                <row>
                  <entry colname="col1">Title</entry>

                  <entry colname="col2">The Title of the graph</entry>
                </row>

                <row>
                  <entry colname="col1">X_AxisTitle</entry>

                  <entry colname="col2">The x-axis label on the graph</entry>
                </row>

                <row>
                  <entry colname="col1">Y_AxisTitle</entry>

                  <entry colname="col2">The y-axis label on the graph</entry>
                </row>

                <row>
                  <entry colname="col1"><emphasis>xxx</emphasis> Font</entry>

                  <entry colname="col2">The font to use for the respective label</entry>
                </row>

                <row>
                  <entry colname="col1">DisplayFixedDuration</entry>

                  <entry colname="col2">When data is being displayed in <emphasis>Grow Times</emphasis>mode, this checkbox specifies whether time-axis should grow to continuously show all data, or whether it should just show data for a fixed time period.</entry>
                </row>

                <row>
                  <entry colname="col1">FixedDuration</entry>

                  <entry colname="col2">The period of time (duration) that the time-axis should display when in <emphasis>Grow Times</emphasis> mode with <emphasis>DisplayFixedDuration</emphasis> set to True.</entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable></para>

        <sect2 xml:id="time_var_plot_bar">
          <title>Time-Variable Plot Tracker-Bar</title>

          <para>If there are tracks on the Debrief <glossterm linkend="g_tote">Tote</glossterm>, a vertical bar is drawn through the plot at the correct time. If the current time on the Tote occurs before the earliest time on the Time-Variable plot then the bar is drawn at the minimum value, and drawn over the maximum value if the current time on the Tote occurs after the latest time value. The bar redraws itself automatically as the time in the Tote changes.</para>
        </sect2>

        <sect2 xml:id="AnalyseTime_Zero">
          <title>Analysing time-zero data in time-variable plot</title>

          <para>By default the <indexterm>
              <primary>Time Zero</primary>
              <secondary>in time-variable plots</secondary>
            </indexterm>time-variable plot shows absolute times (e.g. <computeroutput>12:34.00</computeroutput>). Some forms of analysis conducted with Debrief rely on the use of relative times. To show these relative times on the lower axis of the time-variable plot, select <guilabel>RelativeTimes</guilabel> from the time-variable plot property window. Once this mode is selected, times will be shown relative to the last time-zero value set. By default, the times are shown in a normal <computeroutput>HH:mm:ss</computeroutput> format, but the <guilabel>DateTickUnits</guilabel> drop-down list contains a number of display formats which specifically support presentation of elapsed times.</para>
        </sect2>
      </sect1>
    </chapter>

    <chapter xml:id="exporting_data">
      <title>Exporting Data</title>

      <sect1 xml:id="more_Exporting_data">
        <title>Exporting images</title>
        <sect2 xml:id="resize_for_export">
          <title>Resizing, ready for export</title>
          <para><indexterm>
              <primary>Export</primary>
              <secondary>Resize, in preparation for export</secondary>
            </indexterm> It&apos;s common for Debrief users to capture still images or captured video screen recordings when they wish to share analysis findings with another audience, either within a document or a presentation. </para>
          <para>When Debrief plots are exported in WMF format, elements of the captured image resize, to make sure they&apos;re still legible. But, when bitmap images get rescaled, they can either become pixelated (blocky) or some pixels can disappear. When a line is only 1 pixel wide there is a chance that parts of it will disappear.</para>
          <para>The solution to this is to adjust the Debrief plot to the same size as the target device. For example, if an analyst knows that his screencast is going to be shown on a projector with a resolution of 1024px by 768px, then if the plot is resized to exactly that size she will know the video will be shown at the greatest possible level of detail.</para>
          <para>Sadly, the technologies involved in Debrief don&apos;t (currently) allow a user to type the width and height. But, Debrief is able to inform the analyst of the current size as the plot editor is resized. To do this, double-click on an empty area of a Debrief plot. The plot background settings will be shown in the properties editor. One of the properties is a read-only one, titled <guibutton>Dimension</guibutton>. As the editor is resized (by dragging the vertical/horizontal sashes that separate the Debrief panels), this property will give live feedback on the current size. <figure xml:id="current_plot_size">
              <title>Property for current plot size</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/ScreenDimensions.png" scalefit="1" width="100%"/>
                </imageobject>
              </mediaobject>
            </figure></para>
        </sect2>
        <sect2 xml:id="more_export_images">
          <title>Exporting to WMF</title>
          <para>In addition to <indexterm>
              <primary>Export</primary>
              <secondary>Images</secondary>
            </indexterm><indexterm>
              <primary>WMF</primary>
              <secondary>Writing to File</secondary>
            </indexterm>conducting tactical analysis, <application>Debrief</application> allows the analyst user to create plots for insertion into <application>Microsoft Windows</application> applications; particularly <application>Word</application>.</para>

          <para>To do this load the data into <application>Debrief</application> and format the plot, adding scales, grids, coastlines, and annotations as desired.</para>

          <para>To export this image as a Windows Metafile (WMF), select the <guibutton>Export WMF</guibutton> (<guiicon>
              <inlinemediaobject>
                <imageobject>
                  <imagedata fileref="figures/ExportToWMF.png"/>
                </imageobject>
              </inlinemediaobject>
            </guiicon>) operation from the <guimenu>File</guimenu> menu. Alternatively to copy the image to the clipboard (still as a WMF) select <guibutton>Copy</guibutton> from the Edit menu whilst the Debrief plot is active.</para>

          <para>This will place the image in a time-stamped file named <filename>d3_minute_second.WMF</filename>, located in the directory indicated in the <application>Debrief</application> properties file. If the location is not specified in the properties file, the <filename>WMF</filename> image will be created in the <application>Debrief</application> installation directory.</para>
          <para>Note: exporting vector plots via the clipboard is limited to MS Windows PCs. But, an equivalent capability allows you to export the vector plot inside an RTF wrapper via the clipboard for pasteing into any Word Processor (on OSX or Linux). The shortcut for this is <guibutton>&lt;shift>&lt;control>&lt;c></guibutton>. </para>
        </sect2>
      </sect1>
      <sect1 xml:id="ExportingToPPT">
        <title>Exporting engagements to <indexterm><primary>PowerPoint</primary><secondary>Export process</secondary></indexterm> PowerPoint</title>
        <sect2>
          <title>Introduction</title>
          <para>It&apos;s quite common for analysts to include Debrief screenshots in PowerPoint presentations. On occasion an analyst will record a screencast of a running engagement, to give a dynamic presentation that conveys more information. But, these video recordings can be very large (10&apos;s of Mb), and while it isn&apos;t easy to email them around, it&apos;s practically impossible to get them to a ship.</para>
          <para>An alternate mechanism is to represent the vessel tracks as animated objects in PowrPoint. These consume very little disk space (typically a couple of kilobytes) - and can be added to an existing PowerPoint briefing at negligible cost incurred.</para>
          <para>The engagement is exported to a specically configured donor file, formatted as described in <xref linkend="xml_ppt"/></para>
        </sect2>
        <sect2>
          <title>Export process</title>
          <sect3>
            <title>Assigning donor template</title>
            <para>Debrief injects the exported data is into a donor template. You may use one provided by your organisation, or you can use the sample one provided with Debrief, titled <filename>master_template.pptx</filename>, in the <filename>sample_data/other_formats</filename> folder.</para>
            <para> Assign the donor template by selecting it in the Debrief preferences window: <figure xml:id="donor_prefs">
                <title>Specifying donor file location</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/DonorPreference.png" scalefit="1" width="80%"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </para>
            <para>Note that the preference window also displays the size of the map frame that it found in the donor template.</para>
          </sect3>
          <sect3>
            <title>Resizing plot area</title>
            <para>To get an optimal quality of export, the Debrief plot area should be resized to the same number of screen pixels as the map element in the donor template (note the the element dimensions displayed on the preference window above). This resizing is performed by you dynamically resizing. Start by loading your Debrief plot, then double-clicking into any area of blank background. This will open the plot properties in the Properties View. Then drag the editor (and/or) Debrief until the plot size displayed matches that in the donor template. <figure xml:id="ppt_plot_size">
                <title>Controlling Debrief plot size</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/EditorDims.png" scalefit="1" width="80%"/>
                  </imageobject>
                </mediaobject>
              </figure></para>
          </sect3>
          <sect3>
            <title>Collate data</title>
            <para>Next step is to prepare your plot, as if you were about to give a live debrief, using Debrief&apos;s debrief capability. Zoom in on the area of interest, and ensure the relevant tracks are visible throughout the entire period of interest.</para>
            <para>Also configure the Time Controller replay settings, so that the scenario moves forward at time steps relevant to the data of interest. These settings are explained more in <link linkend="time_vcr_controls"/>.</para>
            <para>It may even be worth pressing Play and performing a trial run through the engagement, as a final check that the data (and time controller properties) are configured in the optimal way to convey your message.</para>
          </sect3>
          <sect3>
            <title>Perform export</title>
            <para>Once you&apos;re happy with your data, n export is performed using these steps: <orderedlist>
                <listitem>
                  <para>Click on the down-arrow next to the <guibutton>Play</guibutton> button, and select <guibutton>Export to PPTX</guibutton>. <inlinemediaobject>
                      <imageobject>
                        <imagedata fileref="figures/pptExportButton.png" width="100%"/>
                      </imageobject>
                    </inlinemediaobject></para>
                </listitem>
                <listitem>
                  <para>Collapse the drop-down menu, if necessary</para>
                </listitem>
                <listitem>
                  <para>Click on <guibutton>Play</guibutton>, and let the scenario unfold. Note that the time controller indicates that it is recording the engagement.</para>
                </listitem>
                <listitem>
                  <para>When you click on <guibutton>Pause</guibutton>, the export to PPT dialog will open.<inlinemediaobject>
                      <imageobject>
                        <imagedata fileref="figures/PPTExportDialog.png" width="100%"/>
                      </imageobject>
                    </inlinemediaobject></para>
                </listitem>
                <listitem>
                  <para>Verify that the export location is correct, and give a filename for the file that gets producued.</para>
                </listitem>
                <listitem>
                  <para>Finally, click on <guibutton>Export</guibutton>. If you clicked on <guibutton>Open exported PPTX</guibutton>, the presentation will open.</para>
                </listitem>
              </orderedlist> Once you have opened the exported file, you can switch to the <guibutton>Animations</guibutton> tab, then press <guibutton>Preview</guibutton> to watch/verify the dynamict tracks. <figure xml:id="exported_scenario">
                <title>Sample of exported scenario</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/ExportedScenario.png" scalefit="1" width="100%"/>
                  </imageobject>
                </mediaobject>
              </figure></para>
          </sect3>
        </sect2>
      </sect1>
    </chapter>

    <chapter xml:id="symbol_sets">
      <title>Symbol sets</title>
      <sect1 xml:id="more_sym_sets">
        <title>Introduction</title>
        <para>A set of symbols is provided within <application>Debrief</application>. The symbols <indexterm>
            <primary>Symbol Sets</primary>
          </indexterm> can either be attached to a text label, or used to highlight a current vessel location when stepping through tracks.</para>
        <para>Twenty-two Symbols are provided in 3 sizes. When the 2 smaller sizes are shown, any internal characters (as used in the sonar buoys) are not plotted.   
          <figure xml:id="debrief_symbols">
            <title>Symbols provided by <application>Debrief</application></title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="figures/d3_symbols.gif" scalefit="1" width="100%"/>
              </imageobject>
            </mediaobject>
          </figure>
        </para>
        <para>Debrief also contains a series of symbols that are recorded in SVG files. These files are plain SVG drawings that Debrief reads from file, and then renders at the required location.  Some of the symbols can be assigned directly from their REP file symbology characters, as described in <xref linkend="debrief_Sym" />. The other, non-indexed symbols can be specified from REP file using the extended symbology attributes described in <xref linkend="debrief_NamedSym"/>
          <figure xml:id="debrief_indexed_svg_symbols">
            <title>Indexed SVG symbols</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="figures/IndexedSVGSymbols.png" scalefit="1" width="100%"/>
              </imageobject>
            </mediaobject>
          </figure>
          <figure xml:id="debrief_svg_symbols">
            <title>Non-indexed SVG symbols</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="figures/NonIndexedSVGSymbols.png" scalefit="1" width="100%"/>
              </imageobject>
            </mediaobject>
          </figure>
        </para>
        <note>
          <para><indexterm>
              <primary>Scaled symbols</primary>
            </indexterm>The scaled symbols are not shown at fixed screen sizes, but as representative sizes of the subject vessel - so they resize as you zoom in on a plot. It is also possible to specify the length and width of the subject platform for a realistically sized vehicle representation.<figure xml:id="scaled_symbols">
              <title>Scaled vessel symbols in <application>Debrief</application></title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/ScaledVessels.png" scalefit="1" width="100%"/>
                </imageobject>
              </mediaobject>
            </figure></para>
        </note>

        <sect2 xml:id="buoy_labels">
          <title>Use in labels</title>

          <para>Any label placed on the plot has a symbol type property (although the symbol itself may not be visible). The symbol can be changed through the properties window, or by right-clicking on the label on the plot.</para>
        </sect2>

        <sect2 xml:id="more_using_symbols">
          <title>Use in tracks</title>

          <para>The final area where symbols are used is when stepping through tracks. Each vessel track has a symbol type property which is shown when the plot has SymbolHighlighter selected as the current highlighter.</para>

          <para>To access this property, select the Properties button on the <glossterm linkend="g_tote">Time Controller</glossterm> (the drop-down button on the view), and change to Symbol Highlight in Plotting Mode. As shown below:</para>
          <para>
            <figure>
              <title>Highlighting Symbols in Tracks</title>
              <screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/time_controller_symbolhighlighter.png" align="center"/>
                  </imageobject>
                </mediaobject>
              </screenshot>
            </figure>
          </para>

          <tip>
            <para>By switching to Snail mode and reducing the reducing the Trail Length to zero, a GOP-type plot can be shown.</para>
          </tip>
        </sect2>
      </sect1>
    </chapter>

    <chapter xml:id="external_datasets">
      <title>External datasets</title>
      <sect1 xml:id="natural_earth">
        <title>Natural Earth data</title>
        <sect2 xml:id="ne_intro">
          <title>Introduction</title>
          <para><indexterm>
              <primary>Natural Earth Data</primary>
              <secondary>Introduction</secondary>
            </indexterm>
            <figure xml:id="ne_logo">
              <title>Natural Earth logo</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/NaturalEarthLogo.png" width="100%"/>
                </imageobject>
              </mediaobject>
            </figure>
            <quote>Natural Earth is a public domain map dataset available at 1:10m, 1:50m, and 1:110 million scales. Featuring tightly integrated vector and raster data, with Natural Earth you can make a variety of visually pleasing, well-crafted maps with cartography or GIS software.</quote><uri>http://www.naturalearthdata.com/</uri></para>
          <para>Whilst Debrief users have enjoyed VPF and ETOPO reference datasets for vector and raster backdrops (resp) for over 10 years,these have now been superceded by the Open Source <glossterm linkend="g_ne">Natural Earth</glossterm> dataset. Natural Earth vectored data doesn&apos;t come with any styling, so the team employed a very clever professional cartographer (Julie at <link xlink:href="http://jewelcartografx.com/">http://jewelcartografx.com/</link>) to produce a set of themes to apply to the various Natural Earth feature types.</para>
          <para> The Natural Earth download size has also be reduced by focussing on a specific set of features of interest to the maritime domain. Lastly, the data-points in this set of data-files have been subtlely trimmed to remove points at the poles, to make them suitable for Debrief&apos;s mercator projection. The data-point trimming was performed with the most excellent QGis application (<link xlink:href="http://qgis.org">http://qgis.org</link>). </para>
          <para> The detailed Natural Earth data is around 80Mb in size, so it&apos;s too large to include with Debrief. So, only they very highest scale, lowest resolution data is included with Debrief. This gives a world coastline and named countries. If you require more detailed data (which you almost certainly will), just download the more detailed dataset and unpack it on your disk - as detailed below. </para>
        </sect2>
        <sect2 xml:id="ne_use">
          <title>Using Natural Earth</title>
          <sect3>
            <title>Downloading</title>
            <para>The customized set of Natural Earth data can be downloaded from this GitHub repository: <link xlink:href="https://github.com/debrief/NaturalEarth">https://github.com/debrief/NaturalEarth</link>. You don&apos;t need to download the individual files, just click on the <guimenuitem>Download Zip</guimenuitem> button to the bottom-right of the page. The zip file is about 25Mb. This will download a zip-file of the data (obviously). </para>
            <para>Once you&apos;ve downloaded the data, unzip it into a nice safe folder on your system. It should expand to around 80Mb.</para>
          </sect3>
          <sect3>
            <title>Configuration</title>
            <para>Ok, you&apos;ve got the data on your system. Now you need to tell Debrief where it&apos;s stored. You do this from Debrief&apos;s Natural Earth preferences page. So, go into <guimenu>Window</guimenu>/<guimenu>Preferences</guimenu> and the dialog will open. Then select <guimenuitem>Natural Earth</guimenuitem> from beneath <guimenuitem>Maritime Analysis</guimenuitem>. In that form, just browse to the unzipped Natural Earth folder.</para>
          </sect3>
          <sect3>
            <title>Usage</title>
            <para>
              <indexterm>
                <primary>Natural Earth Data</primary>
                <secondary>Usage</secondary>
              </indexterm> Unlike the previous external reference datasets, Natural Earth is kid&apos;s play. You really do just have to click on the Natural Earth icon, from the Chart Features menu, or the main application toolbar:<inlinemediaobject>
                <imageobject>
                  <imagedata fileref="figures/NaturalEarth.png" width="24"/>
                </imageobject>
              </inlinemediaobject></para>
            <para>The Natural Earth layer doesn&apos;t have any configurable properties - all of that has been done for you already.</para>
            <para>If you haven&apos;t downloaded and configured the detailed dataset, or if you&apos;re zoomed out a long, long way, you will see the 110M resolution dataset: <figure xml:id="ne_110M">
                <title>Natural Earth in use (110M resolution)</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/NE_110M.png" scalefit="1" width="100%"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </para>
            <para>Zoom in a little more and you will start to see names of significant places and a more detailed coastline, from the 50M resolution dataset: <figure xml:id="ne_50M">
                <title>Natural Earth in use (50M resolution)</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/NE_50M.png" width="100%"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </para>
            <para>Finally, once you&apos;re zoomed in close you will see bathymetric data, plus a lot more placenames: <figure xml:id="ne_10M">
                <title>Natural Earth in use (10M resolution)</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/NE_10M.png" scalefit="1" width="100%"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </para>
          </sect3>
        </sect2>
      </sect1>

      <sect1 xml:id="vpf_data">
        <title>VPF data</title>

        <sect2 xml:id="vpf_intro">
          <title>Introduction</title>

          <para>The <glossterm linkend="g_vpf">VPF</glossterm> standard provides <application>Debrief</application> users with the ability to display the contents of a number of different vectored databases. VPF(TM) is a Registered Trademark of US <indexterm>
              <primary>VPF Data</primary>
              <secondary>Introduction</secondary>
            </indexterm>National Imagery and Mapping Agency.</para>

          <para>One of the databases, the Vector Map (VMap) Level O is an unclassified global database of many features, including coastlines, depth and elevation contours. This is the favoured VPF database for use in <application>Debrief</application>. But note that <application>Debrief</application> makes no assumptions of or optimisations for the VMap data - any VPF data source can be used. <application>Debrief</application> can also import Digital Nautical Chart (DNC) databases. The Digital Nautical Chart is produced by the National Imagery and Mapping Agency (NIMA) and is an unclassified, vector-based digital database containing maritime significant features essential for safe marine navigation.</para>

          <para>Here is an introduction to VPF from the US National Imagery and Mapping Agency&apos;s web site ( <link xlink:href="http://www.nima.mil" xmlns:xlink="http://www.w3.org/1999/xlink">http://www.nima.mil</link>): <blockquote>
              <para><informaltable frame="none">
                  <tgroup cols="2">
                    <colspec colname="c1"/>

                    <colspec colname="c2"/>

                    <tbody>
                      <row>
                        <entry nameend="c2" namest="c1">The Vector Product Format (<glossterm linkend="g_vpf">VPF</glossterm>) is a standard format, structure, and organization for large geographic databases that are based on a georelational data model and are intended for direct use. VPF is designed to be compatible with a wide variety of applications and products. VPF allows application software to read data directly from computer-readable media without prior conversion to an intermediate form. VPF uses tables and indexes that permit direct access by spatial location and thematic content and is designed to be used with any digital geographic data in vector format that can be represented using nodes, edges, and faces.</entry>
                      </row>

                      <row>
                        <entry><inlinemediaobject>
                            <imageobject>
                              <imagedata fileref="figures/vpf.jpg"/>
                            </imageobject>
                          </inlinemediaobject></entry>

                        <entry>VPF defines the format of data objects, and the georelational data model provides a data organization within which software can manipulate the VPF data objects. A Product Specification corresponding to a specific database product determines the precise contents of feature tables and their relationships in the database. In this context, each separate product or application is defined by a Product Specification implemented by using VPF structures.</entry>
                      </row>

                      <row>
                        <entry nameend="c2" namest="c1">VPF data is stored in a structure described in the Military Standard, Vector Product Format, MIL-STD-2407 . The Standard specifies the structure for directories, tables, table columns, table join relationships, and media exchange conventions for all VPF data. The data structure itself can be thought of as a template or skeleton within which the geospatial features and metadata are stored. While the Standard describes the structure, it does not describe the contents of a set of VPF data; this is the role of "VPF Product Specifications."</entry>
                      </row>
                    </tbody>
                  </tgroup>
                </informaltable></para>
            </blockquote></para>
        </sect2>

        <sect2 xml:id="VMAP_intro">
          <title>Introduction to VMAP Level 0</title>

          <para>Vector Map (VMap) Level 0 is an updated and improved version of the National Imagery and Mapping Agency&apos;s (NIMA) Digital Chart of the World (DCW).</para>

          <para>The primary source for the database is the 1:1,000,000 scale Operational Navigation Chart (ONC) series co-produced by the military mapping authorities of Australia, Canada, United Kingdom, and the United States. The complete database is available on a set of four CD-ROMs and contains more than 1,800 megabytes of vector data organized into 10 thematic layers. VMap Level 0 includes major road and rail networks, hydrologic drainage systems, utility networks (cross-country pipelines and communication lines), major airports, elevation contours, coastlines, international boundaries and populated places. VMap Level 0 includes an index of geographic names to aid in locating areas of interest. VMap Level 0 is accessible directly from the CD-ROM or can be transferred to a hard drive and used in many geographic information system (GIS) applications.</para>
        </sect2>

        <sect2 xml:id="getting_vpf">
          <title>Obtaining VPF data</title>

          <para><glossterm linkend="g_vpf">VPF</glossterm> data can be obtained from a <indexterm>
              <primary>VPF Data</primary>
              <secondary>Obtaining VPF data</secondary>
            </indexterm> number of different sources, although the main resource is the <link xlink:href="http://www.nima.mil" xmlns:xlink="http://www.w3.org/1999/xlink">NIMA</link> web-site itself.</para>
          <para>In Autumn 2015 VPF data was available from the US National Geospatial-Intelligence Agency (NGA), at these locations:<itemizedlist>
              <listitem>
                <para><uri xlink:href="http://geoengine.nga.mil/ftpdir/archive/vpf_data/v0noa.tar.gz">http://geoengine.nga.mil/ftpdir/archive/vpf_data/v0noa.tar.gz </uri></para>
              </listitem>
              <listitem>
                <para><uri xlink:href="http://geoengine.nga.mil/ftpdir/archive/vpf_data/v0soa.tar.gz">http://geoengine.nga.mil/ftpdir/archive/vpf_data/v0soa.tar.gz </uri></para>
              </listitem>
              <listitem>
                <para><uri xlink:href="http://geoengine.nga.mil/ftpdir/archive/vpf_data/v0eur.tar.gz">http://geoengine.nga.mil/ftpdir/archive/vpf_data/v0eur.tar.gz</uri></para>
              </listitem>
              <listitem>
                <para><uri xlink:href="http://geoengine.nga.mil/ftpdir/archive/vpf_data/v0sas.tar.gz">http://geoengine.nga.mil/ftpdir/archive/vpf_data/v0sas.tar.gz </uri></para>
              </listitem>
            </itemizedlist></para>

          <para>In the UK, the Director General of Military Survey (DG Mil Survey) were able to provide the VMap database (charged to a Royal Navy UIN).</para>

          <para>If/when you find other sources please provide feedback and this page will be updated.</para>

          <para>Searching the Internet will undoubtedly provide other sources for the information - it&apos;s probably worth shopping around. Since the data is in the public domain agencies only have to charge a "handling fee".</para>
        </sect2>

        <sect2 xml:id="storing_vpf">
          <title>Storing VPF data</title>

          <para><application>Debrief</application> can read VPF <indexterm>
              <primary>VPF Data</primary>
              <secondary>Where to store the data</secondary>
            </indexterm>data directly from CD-Rom but copying it to your hard disk provides the following advantages: <itemizedlist>
              <listitem>
                <para>It runs many times (&gt;10) quicker</para>
              </listitem>

              <listitem>
                <para>It allows you to view the contents of multiple CD-Roms simultaneously (the VMap level 0 data comes on 4 CDs so unless you have 4 CD-readers in your machine this is the only way to get global coverage)</para>
              </listitem>
            </itemizedlist></para>

          <para>So, on the assumption that you do want to copy the data to your hard disk, here is a strategy for keeping the data tidy: <orderedlist>
              <listitem>
                <para>Create a folder in the top level of your hard disk called <filename>VPF</filename></para>
              </listitem>

              <listitem>
                <para>Now insert the first VPF CD-Rom and view it through your file manager (e.g. <application>Windows Explorer</application>). You need to find which directory contains the actual data, so have a look in each of the top level directories for a directory which contains the files <filename>DHT</filename> and <filename>LAT</filename>. Note, for VMap data this is a directory named <filename>VMAPLV0</filename>. When you&apos;ve found this directory copy it across to the <filename>VPF</filename> directory you created on your hard disk.</para>
              </listitem>

              <listitem>
                <para>So for VMap data, your hard disk you should have a directory named <filename>VPF</filename>, containing your first set of VMap data in a directory named <filename>VMAPLV0</filename>.</para>
              </listitem>

              <listitem>
                <para>You will be copying in a number of data sets with this directory name, so rename <filename>VMAPLV0</filename> to the name of the current dataset (such as <filename>NOAMER, SASAUS, EURNASIA or SOAMAFR</filename>).</para>
              </listitem>

              <listitem>
                <para>Next, swap your CD for the next CD in the series, copy the directory of interest across to the <filename>VPF</filename> directory on you hard disk, and rename it.</para>
              </listitem>

              <listitem>
                <para>Once you&apos;ve repeated this process for all of the CDs for the current database it&apos;s time to configure <application>Debrief</application> to load the data.</para>
              </listitem>
            </orderedlist></para>
        </sect2>

        <sect2 xml:id="configure_for_vpf">
          <title>Configuring Debrief to read VPF data</title>

          <para>Debrief determines where to find the <glossterm linkend="g_vpf">VPF</glossterm> data using <indexterm>
              <primary>VPF Data</primary>
              <secondary>Configuring Debrief</secondary>
            </indexterm>the <guibutton>VPF Data storage</guibutton> tab of the <guibutton>Preferences</guibutton> dialog from the <guimenu>Window</guimenu> menu. Indicate the four data-file locations using the file-browser buttons.<figure xml:id="VPF_Prefs_Demo">
              <title>VPF preferences</title>

              <screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/VPF_prefs.png" width="100%"/>
                  </imageobject>
                </mediaobject>
              </screenshot>
            </figure></para>
        </sect2>

        <sect2 xml:id="thanks_open_source">
          <title>Thank heavens for Open Source</title>

          <para>As many of you are probably aware, <application>Debrief</application> is an Open Source application, which means that anybody is free to copy, change, and re-use the Source Code for <application>Debrief</application>, provided they meet the terms of the <application>Debrief</application> license.</para>

          <para>The VPF plotting libraries we&apos;re using in <application>Debrief</application> are taken from another Open Source application, <application>OpenMap</application> from BBN Technologies.</para>

          <para><inlinemediaobject>
              <imageobject>
                <imagedata fileref="figures/VPF_OpenMap.gif" width="75"/>
              </imageobject>
            </inlinemediaobject>
            <inlinemediaobject>
              <imageobject>
                <imagedata fileref="figures/VPF_BBN_2c_primary.jpg" width="86"/>
              </imageobject>
            </inlinemediaobject></para>

          <para>The <application>OpenMap</application> application can be found at http://www.openmap.net. <application>Debrief</application> makes no modifications to the <application>OpenMap</application> application code.</para>
        </sect2>
      </sect1>

      <sect1 xml:id="view_vpf">
        <title>Viewing VPF data</title>

        <sect2 xml:id="more_view_vpf">
          <title>Introduction</title>

          <para><application>Debrief</application> does not pay <indexterm>
              <primary>VPF Data</primary>
              <secondary>Introduction</secondary>
            </indexterm> any attention to <glossterm linkend="g_vpf">VPF</glossterm> data until it loads a plot which requires the data, or until the user requests that VPF layers be added.</para>

          <para>VPF layers are loaded into a plot using the "Create VPF Layers" button: <guiicon>
              <inlinemediaobject>
                <imageobject>
                  <imagedata fileref="figures/create_vpf.png"/>
                </imageobject>
              </inlinemediaobject>
            </guiicon></para>

          <para>Yes, it&apos;s a shrunken version of NIMA&apos;s VPF logo. If VPF layers have been loaded into <application>Debrief</application>, their details are stored in the plot file (i.e., whether they are switched on or off, and their colour). Note that the data itself is not stored in the plot file, just the names of the layers you&apos;re using (so there&apos;s no significant increase in file size).</para>
        </sect2>

        <sect2 xml:id="create_vpf">
          <title>Creating VPF layers</title>

          <para>Once loaded into a plot configure the VPF data by switching to the <guibutton>Layer Manager</guibutton>. In there, open the <guilabel>Chart Features</guilabel> layer, to see the new VPF layer. <figure xml:id="LayerMangerDemo_VPF">
              <title>VPF Data in Outline View</title>

              <screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/VPF_Layer1.png" width="237" align="center"/>
                  </imageobject>
                </mediaobject>
              </screenshot>
            </figure></para>

          <para>Click on the VPF layer to open it up, showing which VPF databases are currently loaded. In this example you can see that I have the VMap Level 0 (vmaplv0) data together with some Digital Nautical Chart (DNC) data. Each layer shows how many items are on that layer, and the empty check box shows that each layer is not currently visible. <figure xml:id="chart_layers_Demo">
              <title>Layers within Chart Features</title>

              <screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/VPF_Layer2.png" width="237" align="center"/>
                  </imageobject>
                </mediaobject>
              </screenshot>
            </figure></para>

          <para>You are going to switch on coastline data first, so click open up the <guilabel>vmaplv0</guilabel> database by clicking on the expand folder symbol. You will see the list of VMap themes listed. Later on, feel free to open them up and view the data they contain, but for now you will concentrate on the coastlines. The order of the themes may be different on your machine, this is of no concern. <figure xml:id="list_of_vpf_layers">
              <title>List of VPF layers</title>

              <screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/VPF_Layer3.png" width="237" align="center"/>
                  </imageobject>
                </mediaobject>
              </screenshot>
            </figure></para>

          <para>Next, open up the Boundaries theme to see which Boundaries can be plotted by VMap. <figure xml:id="boundaries_theme_demo">
              <title>Boundaries theme</title>

              <screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/VPF_Layer4.png" width="270" align="center"/>
                  </imageobject>
                </mediaobject>
              </screenshot>
            </figure></para>
          <figure>
            <title>Coastlines feature</title>
            <para>Now you are going to configure the plotting of coastlines.</para>
            <screenshot>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/VPF_Layer5.png" align="center" width="270"/>
                </imageobject>
              </mediaobject>
            </screenshot>
          </figure>

          <para>Right-click on the <guilabel>Coastlines</guilabel> entry, and from the <guilabel>Coastlines</guilabel> drop-down list, select <guilabel>Color</guilabel>, and then <guilabel>Light Grey</guilabel>. Note that <guilabel>White</guilabel> is the default colour for all VPF features.</para>

          <para>Next, right-click on the coastlines entry again, and make the <guilabel>coastline</guilabel> Visible.</para>

          <para>Whilst we&apos;ve made the <guilabel>Coastlines</guilabel> visible, the layers above it aren&apos;t, so now you make its parents visible. Right-click on the <guilabel>Boundaries</guilabel> layer and make it visible. Next right-click on the <guilabel>vmaplv0</guilabel> layer to make that too visible.</para>

          <para>Nothing has yet appeared on the plot, but that is because you are not current over any coastline. Now zoom out 6 times until the plot looks like that below: <figure xml:id="first_coastline_demo">
              <title>First coastline</title>

              <screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/VPL_Layer6.gif" align="center"/>
                  </imageobject>
                </mediaobject>
              </screenshot>
            </figure></para>

          <para>Now you can see your new coastline of Africa.</para>

          <para>Select the Pan control from the Plot toolbar: <guiicon>
              <inlinemediaobject>
                <imageobject>
                  <imagedata fileref="figures/Pan.png"/>
                </imageobject>
              </inlinemediaobject>
            </guiicon></para>

          <para>Now drag the plot southwards to move the view up towards Europe. Keep dragging until you have a clear view of a more familiar coastline, that of the British Isles. From this view you will add depth contours. <figure xml:id="british_coast_demo">
              <title>Coastline of British Isles</title>

              <screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/VPF_Layer7.gif" align="center"/>
                  </imageobject>
                </mediaobject>
              </screenshot>
            </figure></para>

          <para>Right-click on the <guilabel>Depth Contours</guilabel> entry in the <guilabel>Boundaries</guilabel> layer and switch its colour to <guilabel>Grey</guilabel>. Also switch the <guilabel>Contours</guilabel> entry to <guilabel>Visible</guilabel>.</para>

          <para>Depth contours will now appear: <figure xml:id="improved_british_coast_demo">
              <title>Coastline of British Isles with depth contours</title>

              <screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/VPF_Layer8.gif" align="center"/>
                  </imageobject>
                </mediaobject>
              </screenshot>
            </figure></para>

          <note>
            <para>Note, the VMap CD-ROM gives the following description with relation to depth contours: <blockquote>
                <para>Depth contours (BE015) were derived from digital bathymetric data provided by Defense Mapping Agency. Depths are expressed in the following intervals: 200, 600, 1000. 2000, 4000, 6000, and 8000 meters.</para>
              </blockquote></para>
          </note>

          <para>Feel free to zoom in on the data to see just how detailed the data gets (around Cowes on the Isle of Wight sections of coastline of only 200 yards length are clearly visible).</para>

          <para>Also zoom out to view the whole of the British Isles and experiment with switching on features in other layers.</para>

          <para>The plot below shows UK railways (from the Transportation Layer), and UK is shaded in by making the Administrative Areas (from the Boundaries Layer) visible. <figure xml:id="railways_image">
              <title>Railways of British Isles</title>

              <screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/VPF_Layer9.gif" align="center"/>
                  </imageobject>
                </mediaobject>
              </screenshot>
            </figure></para>

          <para>Alternatively zoom and pan across to your home, see the accuracy of your part of the coastline.</para>
        </sect2>

        <sect2 xml:id="more_store_vpf">
          <title>Storing VPF settings</title>

          <para>As explained earlier, when you save the <glossterm linkend="g_vpf">VPF</glossterm> plot your VPF settings get saved with it. So have a go at saving your current view, exiting/re-starting <application>Debrief</application> then re-loading it. You should find yourself seeing the same view which you saved.</para>
        </sect2>

        <sect2 xml:id="vpf_best_practice">
          <title>VPF best practice</title>

          <para>There&apos;s no doubting the volume of data available through VPF, and the VMap Level 0 database in particular. The next level down from VMap Level 0 is VMap Level 1; which contains approximately 10 times more detailed information.</para>

          <para>How much of it is of use is more subjective though, so it&apos;s best to lead your strategy for its use by your analysis requirements.</para>
        </sect2>
      </sect1>

      <sect1 xml:id="configure_vpf">
        <title>Configuring VPF defaults</title>

        <sect2 xml:id="more_config_vpf">
          <title>The problem</title>

          <para>Yes, VPF and VMap in <indexterm>
              <primary>VPF Data</primary>
              <secondary>Configuring default layers</secondary>
            </indexterm>particular provide a great volume of information which may help with analysis and will certainly improve the quality of "overview" images in reports.</para>

          <para>With this great volume comes a management overhead however. You could have constrained <application>Debrief</application> to only use VMap data, and then only load a sub-set of it (coastlines &amp; depth contours). Instead, however, it loads the full set.</para>

          <para>How can you make it easier to use?</para>

          <para>Read on.</para>

          <warning>
            <para>You&apos;ll need to know how to use a text editor and have a rough familiarity with <glossterm linkend="g_xml">XML</glossterm> or HTML text.</para>
          </warning>
        </sect2>

        <sect2 xml:id="vpf_how">
          <title>The solution</title>

          <para>How does it <application>Debrief</application> handle VPF data? <itemizedlist>
              <listitem>
                <para>When you save a plot with VPF data loaded, <application>Debrief</application> stores the names of all of the layers loaded, together with the colours and visibility of any features on them.</para>
              </listitem>

              <listitem>
                <para>When you re-load an existing session with VPF data, <application>Debrief</application> reads what layers the users wants and only loads those layers.</para>
              </listitem>
            </itemizedlist></para>

          <para>Accordingly, you could create a datafile containing only the layers you want, and drop this file into <application>Debrief</application> sessions. This should give us a simplified set of VPF layers.</para>

          <para>When you drag/drop a <glossterm linkend="g_xml">DPF</glossterm> file into an existing session, the Layers in the <glossterm linkend="g_xml">DPF</glossterm> file are copied into the existing session, although the projection, Tote, and GUI parameters are ignored.</para>
        </sect2>

        <sect2 xml:id="vpf_how_to">
          <title>How to do it - 1</title>

          <para>So what you do is open a new <application>Debrief</application> session and load the smallest REP file you have into it - (just to give your data an "origin").</para>

          <para>Then add your VPF layers using the <guibutton>Create VPF Layers</guibutton> button on the <guilabel>Chart Features</guilabel> toolbar. Customise these layers so that the layers/features of interest are made visible and set to your desired colours.</para>

          <para>Finally save the view to a plot file in an easily accessible location - call it <filename>default_layers.dpf</filename></para>
        </sect2>

        <sect2 xml:id="how_to_create_default_layers">
          <title>How to do it - 2</title>

          <para>You are now going to edit this file to remove all unnecessary details except for your <glossterm linkend="g_layer">layer</glossterm>s.</para>

          <para>Open a text editor (such as <application>Notepad</application> in <application>MS Windows</application>), and load your new .DPF file into it.</para>

          <para>The contents of the file should be something like that shown below:</para>

          <screen width="70">
      &lt;?xml version="1.0" encoding="UTF-8"?&gt;

      &lt;plot Created="Thu Jul 19 15:04:41 GMT+01:00 2001" Name="Debrief Plot"&gt;
      &lt;session&gt;
      &lt;layers&gt;
      &lt;layer Name="Chart Features" Visible="TRUE"&gt;
      &lt;vpf_database Visible="TRUE"&gt;
      &lt;vpf_library Visible="TRUE" Name="vmaplv0"&gt;
      &lt;vpf_coverage Visible="FALSE" Type="ind" Description="Industry"&gt;
      &lt;vpf_feature Visible="FALSE" Type="extracta" Description="Extraction
        Areas"&gt;
      &lt;colour Value="WHITE" /&gt;
      &lt;/vpf_feature&gt;
      &lt;vpf_feature Visible="FALSE" Type="storagep" Description="Storage Point 
        Features"&gt;
      &lt;colour Value="WHITE" /&gt;
      &lt;/vpf_feature&gt;
      &lt;vpf_feature Visible="FALSE" Type="indtxt" Description="Industry Coverage
        Text"&gt;
      &lt;colour Value="WHITE" /&gt;
      &lt;/vpf_feature&gt;
              </screen>

          <para>..... and so on, until</para>

          <screen width="70">
      &lt;layer Name="Annotations" Visible="TRUE"&gt;
      &lt;rectangle Label=" trial" LabelLocation="Left"&gt;
      &lt;colour Value="YELLOW" /&gt;
      &lt;fontcolour Value="YELLOW" /&gt;
      &lt;font Family="Sans Serif" Size="12" Bold="FALSE" Italic="FALSE" /&gt;
      &lt;tl&gt;
      &lt;shortLocation Lat="-9.2166417" Long="156.2783694" Depth="0.000" /&gt;
      &lt;/tl&gt;
      &lt;/rectangle&gt;
      &lt;/layer&gt;
      &lt;/layers&gt;
      &lt;projection Type="Flat" Border="1.050" Relative="FALSE"&gt;
      &lt;tl&gt;
      &lt;shortLocation Lat="60.6482349" Long="-15.0669609" Depth="0.000" /&gt;
      &lt;/tl&gt;
      &lt;br&gt;
      &lt;shortLocation Lat="47.9097909" Long="3.0063981" Depth="0.000" /&gt;
      &lt;/br&gt;
      &lt;/projection&gt;
      &lt;gui&gt;
      &lt;tote /&gt;
      &lt;component Type="Stepper"&gt;
      &lt;property Name="AutoStep" Value="1000" /&gt;
      &lt;property Name="Highlighter" Value="Default Highlight" /&gt;
      &lt;property Name="StepLarge" Value="600000.000" /&gt;
      &lt;property Name="CurrentTime" Value="691231 235959.999" /&gt;
      &lt;/component&gt;
      &lt;/gui&gt;
      &lt;/session&gt;
      &lt;details Text="Saved with Debrief version dated 19 Jul 01 12:44" /&gt;
      &lt;/plot&gt;
                        </screen>
        </sect2>

        <sect2 xml:id="step_3_xml">
          <title>How to do it - 3</title>

          <para>As you can see above, the file starts with an entry beginning with the characters <guilabel>&lt;?xml</guilabel>. This line indicates that you are handling <glossterm linkend="g_xml">XML</glossterm> data.</para>

          <para>Next you have a series of lines of data, which start with <guilabel>&lt;plot&gt;</guilabel> and end with <guilabel>&lt;/plot&gt;</guilabel>. This format is similar to that found in HTML, and indicates that this file contains details of plot. Inside the <guilabel>&lt;plot&gt;</guilabel> you can see a <guilabel>&lt;session&gt;</guilabel>, which in turn contains a <guilabel>&lt;layers&gt;</guilabel> object, containing a series of <guilabel>&lt;layer&gt;</guilabel> items, followed by a <guilabel>&lt;projection&gt;</guilabel>, and a <guilabel>&lt;gui&gt;</guilabel>.</para>

          <para>What you are going to do is strip out everything except the Layers object, and then thin this out.</para>

          <para>So, move the cursor to the <guilabel>&lt;layers&gt;</guilabel> line. Delete everything before this (except for the <guilabel>&lt;?xml version="1.0" encoding="UTF-8"?&gt;</guilabel> line.</para>

          <para>Now move down to the <guilabel>&lt;/layers&gt;</guilabel> line, and delete everything from it to the end of the file.</para>

          <para>As you look at the layers, you can see that each layer has a name ( <guilabel>Chart Features</guilabel> is the first one in the example above). It is the <guilabel>Chart Features</guilabel> layer which you want to keep, so navigate down to the next Layer (which may have a track name), and delete that and all others (down to, but not including the <guilabel>&lt;/layers&gt;</guilabel> line which marks the end of the data).</para>

          <para>Within the <guilabel>Chart Features</guilabel> layer you can see an entry named <guilabel>&lt;vpf_database&gt;</guilabel> - this is the vpf data. Inside the vpf_database are <guilabel>&lt;vpf_library&gt;</guilabel> entries, one for each library loaded (probably just VMaplv0 in your instance).</para>

          <para>Inside the <guilabel>&lt;vpf_library&gt;</guilabel> are a series of <guilabel>&lt;vpf_coverage&gt;</guilabel> entries. It is these which you will thin out. Work down through them deleting any you don&apos;t want. In your instance you only want to keep the boundaries data, so you will delete all other coverages. So, select blocks of text beginning with <guilabel>&lt;vpf_coverage&gt;</guilabel> and ending with <guilabel>&lt;/vpf_coverage&gt;</guilabel> and delete those you don&apos;t want.</para>

          <para>Finally, delete any &lt;vpf_features&gt; you don&apos;t want.</para>

          <para>I&apos;ve deleted all those I don&apos;t want, leaving the text below:</para>

          <screen width="70">
      &lt;?xml version="1.0" encoding="UTF-8"?&gt;
      &lt;layers&gt;
      &lt;layer Name="Chart Features" Visible="TRUE"&gt;
      &lt;vpf_database Visible="TRUE"&gt;
      &lt;vpf_library Visible="TRUE" Name="vmaplv0"&gt;
      &lt;vpf_coverage Visible="TRUE" Type="bnd" Description="Boundaries"&gt;
      &lt;vpf_feature Visible="TRUE" Type="oceansea" Description="Oceans/Seas"&gt;
      &lt;colour Value="BLUE" /&gt;
      &lt;/vpf_feature&gt;
      &lt;vpf_feature Visible="FALSE" Type="polbndl" Description="Political
        Boundaries"&gt;
      &lt;colour Value="WHITE" /&gt;
      &lt;/vpf_feature&gt;
      &lt;vpf_feature Visible="TRUE" Type="polbnda" Description="Administrative
        Areas"&gt;
      &lt;colour Value="WHITE" /&gt;
      &lt;/vpf_feature&gt;
      &lt;vpf_feature Visible="FALSE" Type="depthl" Description="Depth Contours"&gt;
      &lt;colour Value="WHITE" /&gt;
      &lt;/vpf_feature&gt;
      &lt;vpf_feature Visible="TRUE" Type="coastl" Description="Coastlines"&gt;
      &lt;colour Value="CYAN" /&gt;
      &lt;/vpf_feature&gt;
      &lt;/vpf_coverage&gt;
      &lt;/vpf_library&gt;
      &lt;/vpf_database&gt;
      &lt;/layer&gt;
      &lt;/layers&gt;
            </screen>
        </sect2>

        <sect2 xml:id="steps_complete">
          <title>At last!</title>

          <para>Now, you can drag and drop this file into any <application>Debrief</application> session to instantly give you your "favourite" set of layers.</para>

          <para>To test it, follow the steps described above (or copy the text I&apos;ve just given you into a blank text file and save it as <filename>default_layers.dpf</filename>). Then create a new <application>Debrief</application> session, load one of your demo tracks ( <filename>boat1.rep</filename>), then drag in <filename>default_layers.dpf</filename>. Zoom out, and have a look at the lovely, pre-formatted data.</para>
        </sect2>
      </sect1>

      <sect1 xml:id="etopo_data">
        <title>ETOPO Data</title>

        <sect2 xml:id="etopo_install">
          <title>Configuring Debrief to read ETOPO data</title>

          <para>Debrief determines where to find the <glossterm linkend="g_etopo">ETOPO</glossterm> data using <indexterm>
              <primary>ETOPO Data</primary>
              <secondary>Configuring Debrief</secondary>
            </indexterm>the <guibutton>ETOPO Data storage</guibutton> tab of the <guibutton>Preferences</guibutton> dialog from the <guimenu>Window</guimenu> menu. Indicate the location of your ETOPO.RAW datafile using the file-browser button.<figure xml:id="vpf_prefs">
              <title>ETOPO preferences</title>

              <screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/ETOPO_prefs.png" width="100%"/>
                  </imageobject>
                </mediaobject>
              </screenshot>
            </figure></para>
        </sect2>

        <sect2 xml:id="etopo_background">
          <title>Background to ETOPO data</title>

          <para><application>Debrief 2002</application> added the capability to view gridded bathymetric data, provided through the ETOPO dataset. The ETOPO dataset and its use is explained in more detail in <xref linkend="etopo_gridded_bathy"/>.</para>

          <note xml:id="etopo_description">
            <para>The &apos;ETOPO-5&apos; data set is originally from the U.S. National Geophysical Data Center (NGDC) in Boulder, Colorado (USA), and represents the "best" available digital terrain values as integrated from existing five and ten-minute digital sources. The data set has elevation values spaced at every five-minute latitude/longitude crossing on the global grid (approx. nine km.-sq. spatial resolution, or 12 x 12 pixels/degree), and a one-meter contour interval. Bathymetric values are included in this data set, starting at approximately 10,000 meters below sea level, while the elevation values extend up to heights of approximately 8,000 meters above sea level. Some original sources of the data used include the U. S. Defense Mapping Agency for the conterminous USA, Japan and Western Europe; the Australian Bureau of Mineral Resources, and the New Zealand Department of Scientific and Industrial Research.</para>

            <para>GRID has reformatted the original NGDC data file to place the origin at 180 degrees West longitude, instead of at 0 degrees Greenwich Meridian. The &apos;ETOPO-5&apos; data file has 2160 records of data with a length of 8640 bytes each: the size of the data array is 2160 lines by 4320 elements, but this is a l6-bit or two bytes per element data file. The origin of the data file is at 90 degrees North latitude and 180 West longitude, and it extends to 90 degrees South latitude and 180 degrees East longitude. The data file comprises 18.66 Megabytes. The version of this data file at GRID has been discovered to contain two records (lines) of flawed data values; that is, portions of lines 2055 and 2056, beginning at the Weddell Sea north of Antarctica and continuing eastward. GRID is currently waiting for a response from the data supplier (NGDC) before attempting any replacement of what appear to be anomalous data values.</para>

            <para>There are two useful references for the &apos;ETOPO-5&apos; data set. These are: "Edwards, Margaret Helen, 1986. Digital Image Processing of Local and Global Bathymetric Data. Master&apos;s Thesis. Department of Earth and Planetary Sciences, Washington Univ., St. Louis, Missouri, USA, 106 p." and "Haxby, W. F. et al., 1983. Digital Images of Combined Oceanic and Continental Data Sets and their Use in Tectonic Studies. EOS Trans- actions of the American Physical Union, vol. 64, no. 52, pp. 995-1004."</para>
          </note>

          <note xml:id="etopo2_description">
            <para>In November 2002 the capability to read the US NOAA &apos;ETOPO-2&apos; data set was been added to <application>Debrief</application>. The ETOPO-2 dataset may be purchased from the <link xlink:href="http://www.ngdc.noaa.gov/mgg/gdas/gx_announce.Html" xmlns:xlink="http://www.w3.org/1999/xlink">NOAA</link>, and is delivered on CD-ROM. The ETOPO-2 CD-ROM itself contains several datasets. The Dataset supported by Debrief is the <filename>ETOPO2.RAW </filename> file containing data in the <emphasis>big-endian</emphasis> format. This file must be copied into an <filename>plugins\org.mwc.cmap.static_resources_1.0.0\data</filename> sub-directory of the Debrief installation. This 2-minute dataset offers more than 6 times the detail of the ETOPO-5 dataset. This 2-minute data is derived from the following sources: <itemizedlist>
                <listitem>
                  <para>The seafloor data between latitudes 64 North and 72 South is from the work of <emphasis>Smith and Sandwell, 1997</emphasis>. These data were obtained from satellite altimetry observations combined with shipboard echo-sounding measurements.</para>
                </listitem>

                <listitem>
                  <para>Seafloor data southward of 72 South are from the US Naval Oceanographic (NAVOCEANO) DBDBV version 4.1 at 5 minute spacing.</para>
                </listitem>

                <listitem>
                  <para>Seafloor data northward from 64 North are from the new International Bathymetric Chart of the Arctic Ocean (IBCAO) Version 1.</para>
                </listitem>

                <listitem>
                  <para>Land data is from the GLOBE Project, an internationally designed, and independently peer-reviewed global digital elevation model (DEM).</para>
                </listitem>
              </itemizedlist></para>

            <para>These sources are summarised below: <figure xml:id="etopo_sources_demo">
                <title>ETOPO2 data sources</title>

                <screenshot>
                  <mediaobject>
                    <imageobject>
                      <imagedata fileref="figures/etopo2src.jpg" width="100%"/>
                    </imageobject>
                  </mediaobject>
                </screenshot>
              </figure></para>

            <para>This information has been taken from the <link xlink:href="http://www.ngdc.noaa.gov/mgg/fliers/01mgg04.html" xmlns:xlink="http://www.w3.org/1999/xlink">NOAA Web-site</link>.</para>
          </note>

          <para>The following options are provided for plotting ETOPO data: <variablelist>
              <varlistentry>
                <term>Color</term>

                <listitem>
                  <para>The color to plot the key itself.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Key location</term>

                <listitem>
                  <para>This option determines where (and whether) to show the key for the depth data. Note that the ETOPO data will always appear behind other data, so it may be necessary to experiment with the key location.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Show land</term>

                <listitem>
                  <para>Whether to plot land as land, or as very shallow water. Plotting the land as very shallow water is the favoured way of combining ETOPO data with VPF data. The VPF coastline data is of much higher resolution, differences being highlighted when ETOPO land is shown.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Visible</term>

                <listitem>
                  <para>Whether to plot the ETOPO data.</para>
                </listitem>
              </varlistentry>
            </variablelist> The ETOPO-2 dataset provides a few more customizable attributes, which allow you to choose between enhanced performance over appearance in the plot: <variablelist>
              <varlistentry>
                <term>Bathy Res</term>

                <listitem>
                  <para>This is the size of each bathy square to be plotted in screen pixels. A resolution (Res) of 1 pixel provides the most detailed bathymetric plot, though it takes the longest time. Frequently it is possible to increase the bathy-res without any visible degradation in the data displayed - whilst providing performance benefits</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Bathy Visible</term>

                <listitem>
                  <para>This flag indicates whether the bathymetric plot should be shown or not (sometimes the set of contours are sufficient).</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Contour Depths</term>

                <listitem>
                  <para>Into this box provide a comma-separated list of depth contours (in metres) to plot. The values should expressed in ascending order as whole numbers. If Debrief encounters a problem whilst reading the values it will return to the last valid set of depths</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Contour Grid Interval</term>

                <listitem>
                  <para>The contour plotting algorithm is very processor-intensive, calculating the contours when zoomed out over a large area can take many minutes. The contour plotting algorithm inspects every depth datum in the data area whilst finding contours. The speed of calculation can be improved by directing the algorithm to skip a number of depth values before performing the next calculation. This may make the contours themselves very slightly more blocky, though still usable.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Contour Optimise Grid</term>

                <listitem>
                  <para>Setting this switch instructs Debrief to automatically increase the Contour Grid Interval as you zoom from the plot. This prevents the exponential increase in time take to conduct the contouring, ensuring that no more than 10000 calculations are performed, and when zooming in it ensures that where applicable at least 2000 calculations are performed.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Contours Visible</term>

                <listitem>
                  <para>This flag indicates whether the contours should be plotted or not - not showing contours substantially speeds up the redraw time.</para>
                </listitem>
              </varlistentry>
            </variablelist><tip>
              <para>The ETOPO-5 dataset uses a significant amount of memory on your PC, typically 30Mb, though this only gets loaded once per Debrief session, however many plots are loaded. Writing a WMF file with ETOPO data visible requires even more memory, and can cause <application>Debrief</application> to hang or crash. This problem can be overcome by following the advice described in <xref linkend="starting_debrief"/>.</para>

              <para>The ETOPO-2 dataset is many times larger than ETOPO-5, thus is not read into memory but accessed on the fly. For this reason it does not consume as much memory, but does require a fast PC to produce acceptable screen updates.</para>
            </tip></para>
        </sect2>
      </sect1>
    </chapter>
    <chapter xml:id="ExercisePlanning">
      <title>Exercise planning</title>
      <sect1 xml:id="planning_intro">
        <title>Introduction</title>
        <para>In Spring 2012 Debrief received extensions in order to support <indexterm>
            <primary>Exercise Planning</primary>
          </indexterm>exercise planning<indexterm>
            <primary>Planning</primary>
            <secondary>Exercise planning</secondary>
          </indexterm>. An analyst is able to generate tracks within Debrief, replay those tracks to verify time/spatial constaints, and finally export the run-plan to MS Word via the clipboard.</para>
        <para>The exercise planning tracks are generated in a new track-like entity. This new entity has an origin and a start date/time. These provide a quick way of changing the location and/or the start time for a set of vessel runs. The legs generated for a track represent straight line legs for a platform. Each leg is stored according to a demanded course and a leg-length. Leg-length is specified according to one of these calculation models:<variablelist>
            <varlistentry>
              <term>Range-Speed</term>
              <listitem>
                <para>The time travelled along the leg is deterlimed by the time leg length (range) / speed</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Time-Speed</term>
              <listitem>
                <para>The leg length is determined by the distance travelled in the specified time at the specified speed</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Range-Time</term>
              <listitem>
                <para>The speed along the leg is determined by the speed necessary to travel the specified distance in the specified time.</para>
              </listitem>
            </varlistentry>
          </variablelist>Thus, changing one of the two named parameters will result in the third parameter getting a calculated value.</para>
      </sect1>
      <sect1 xml:id="create_planning">
        <title>Creating tracks</title>
        <para>Newly created planning tracks are created in the centre of the current plot. So, start off by navigating to the part of the world where you roughly want your vessel tracks to be. You&apos;ll make more detailed changes to the track location once the track is created.</para>
        <para>Next, you must select "Create Track Segment" from <application>Debrief</application>&apos;s Drawing Toolbar, or the <guimenu>Drawing</guimenu> menu.<figure>
            <title>Create tracks toolbar button</title>
            <screenshot>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/AddSegment.png" align="center"/>
                </imageobject>
              </mediaobject>
            </screenshot>
          </figure></para>
        <para>Next you&apos;ll be invited to select which parent track to add the track segment to. In this instance, we don&apos;t have an existing track, so select "[New Track...]" from the dialog. Clearly if you were extending an existing planning track you&apos;d select it.<figure>
            <title>Adding a new track segment</title>
            <screenshot>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/AddSegment2.png" align="center"/>
                </imageobject>
              </mediaobject>
            </screenshot>
          </figure></para>
        <para>Since we&apos;re creating a new track we now see a couple of dialogs associated with the new track. First we must give the new track a name:<figure>
            <title>Naming the new track</title>
            <screenshot>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/AddSegment3.png" align="center"/>
                </imageobject>
              </mediaobject>
            </screenshot>
          </figure></para>
        <para>Next we must specify the starting date/time for the track:<figure>
            <title>Specifying the track&apos;s DTG</title>
            <screenshot>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/AddSegment4.png" align="center"/>
                </imageobject>
              </mediaobject>
            </screenshot>
          </figure></para>
        <para>Once we&apos;ve finished specifying the track, we must specify a name for this particular leg of the track:<figure>
            <title>Naming the leg</title>
            <screenshot>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/AddSegment5.png" align="center"/>
                </imageobject>
              </mediaobject>
            </screenshot>
          </figure>Your track will now appear on the screen, and also in the layer manager.<figure>
            <title>Track created</title>
            <screenshot>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/AddSegment5a.png" align="center"/>
                </imageobject>
              </mediaobject>
            </screenshot>
          </figure></para>
        <para>Once you&apos;ve created a parent track, next time you can select it from the first dialog - after which you just need to specify a leg name,</para>
      </sect1>
      <sect1 xml:id="manipulate_planning">
        <title>Manipulating tracks</title>
        <para>One you&apos;ve created one or more track legs you can start editing them. There are four ways to edit a leg:<variablelist>
            <varlistentry>
              <term>Properties Window</term>
              <listitem>
                <para>Select a leg in the Outline View, and you&apos;ll see the leg properties in the Properties window. Note the <guimenu>Calculation</guimenu> field, this indicates which two fields are used to specify the leg length. As you&apos;ll see, you can also amend the leg name, the course, and the depth for that leg.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Outline View</term>
              <listitem>
                <para>Right-clicking on a leg in the Outline View lets you quickly edit some of the leg parameters <screenshot>
                    <mediaobject>
                      <imageobject>
                        <imagedata fileref="figures/AddSegment6.png" width="80%" align="center"/>
                      </imageobject>
                    </mediaobject>
                  </screenshot></para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Dragging objects on the plot</term>
              <listitem>
                <para>There are two ways of dragging to edit a planning track. You can select <guibutton>Drag Whole Feature</guibutton>
                  <inlinemediaobject>
                    <imageobject>
                      <imagedata fileref="figures/DragWholeFeature.png"/>
                    </imageobject>
                  </inlinemediaobject>, and then drag the whole planning track to move it, or select <guibutton>Drag Component</guibutton>
                  <inlinemediaobject>
                    <imageobject>
                      <imagedata fileref="figures/DragComponent.png"/>
                    </imageobject>
                  </inlinemediaobject> and then drag an end of a track leg to rotate it.<note>
                    <para>It isn&apos;t possible to drag to change the length of a leg - since it&apos;s unclear which of the two attributes in that segments calculation model the user intends to change. </para>
                  </note></para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Using the Grid editor</term>
              <listitem>
                <para>If you open the Grid Editor (See <xref linkend="GridEditor"/>) you can view your set of legs in tabular form<screenshot>
                    <mediaobject>
                      <imageobject>
                        <imagedata fileref="figures/legsInGridEditor.png" width="80%" align="center"/>
                      </imageobject>
                    </mediaobject>
                  </screenshot></para>
                <para>Note also that the <guimenu>Grid Editor</guimenu> toolbar includes an <guimenu>Export to Clipboard</guimenu> function that will copy your legs to the clipboard in CSV format</para>
              </listitem>
            </varlistentry>
          </variablelist></para>
      </sect1>
      <sect1 xml:id="xy_planning">
        <title>XY plots of planning tracks</title>
        <para>If you&apos;re a clever-clogs scientist doing fancy things like producing run-plans that have a predictable bearing rate, or range between the participants then this is just up your street. If you request an XY Plot of two planning tracks, you can then configure the graph to update itself as the tracks change.</para>
        <para>Here&apos;s how you do it:<orderedlist>
            <listitem>
              <para>Select your two tracks in the Outline View</para>
            </listitem>
            <listitem>
              <para>Right-click on one of the tracks</para>
            </listitem>
            <listitem>
              <para>Select <guimenuitem>View XY Plot</guimenuitem> from the popup menu</para>
            </listitem>
            <listitem>
              <para>From the popup dialog, select the calculation you&apos;re after</para>
            </listitem>
            <listitem>
              <para>Then indicate which is the primary track (though it&apos;s irrelevant to many calcs)</para>
            </listitem>
            <listitem>
              <para>Once the plot appears, check that the Auto-Sync toggle button in the graph toolbar is selected <inlinemediaobject>
                  <imageobject>
                    <imagedata fileref="figures/synced.png"/>
                  </imageobject>
                </inlinemediaobject>. </para>
            </listitem>
          </orderedlist></para>
        <para>Now, when you drag or otherwise manipulate your tracks the graph will update to show the new relationship between the tracks. Clearly you un-set the auto-sync toggle to shop updating with the plot.</para>
      </sect1>
    </chapter>

    <chapter xml:id="viewing_narratives">
      <title>Viewing narratives</title>

      <sect1 xml:id="narrative_intro">
        <title>Introduction to narrative data</title>

        <sect2 xml:id="more_narr_intro">
          <title>Introduction</title>

          <para>The term <guilabel>Narrative Data</guilabel> is used within <application>Debrief</application> to refer to time-stamped textual data recorded during an exercise.</para>

          <para>Typically this data would be narrative data recorded to provide an overview of events within an exercise <glossterm linkend="g_serial">serial</glossterm>, but an equally valid use of the facility would be for a textual record of information exported from a recording device. An example of this could be control messages returned from a weapon, or readings taken from an onboard sensor.</para>
        </sect2>

        <sect2 xml:id="preparing_narrative_data">
          <title>Preparing the data</title>

          <para><indexterm>
              <primary>Narrative Data</primary>
              <secondary>Preparing</secondary>
            </indexterm>Narrative data is loaded into Debrief using the ;NARRATIVE and ;NARRATIVE2 replay file format entries as described at <xref linkend="replay_annotation_format"/>.</para>

          <para>The narrative data can be located in a <filename>.REP</filename> file of its own, or together with other Debrief track and annotation data.</para>
        </sect2>

        <sect2 xml:id="more_loading_narr">
          <title>Loading the data</title>

          <para>Narrative data is loaded into <application>Debrief</application> in the same way as other data, by dragging and dropping from a REP file formatted as above, or by using the <emphasis>Generate New Narrative entry</emphasis> wizard. Open the wizard by either right-clicking on the <emphasis>Narratives</emphasis> entry in the Outline View, or by right-clicking in blank area of the Outline View if this is the first narrative entry.<figure xml:id="add_narr_data">
              <title>New narrative entry wizard</title>
              <screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/NewNarrativeEntryWizard.png" width="100%"/>
                  </imageobject>
                </mediaobject>
              </screenshot>
            </figure></para>
        </sect2>

        <sect2 xml:id="viewing_narrative_data">
          <title>Viewing the data</title>

          <para><indexterm>
              <primary>Narrative Data</primary>
              <secondary>Viewing</secondary>
            </indexterm>Once the data is loaded into Debrief, it is displayed in a list window - with one entry per line. When stepping through the data the "current" entry is highlighted, but the user is also able to double-click on an entry to move the Debrief step time to the time this entry was recorded. <figure xml:id="viewing_narrative_demo">
              <title>Viewing a narrative</title>

              <screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/Narr_1.png" width="100%"/>
                  </imageobject>
                </mediaobject>
              </screenshot>
            </figure>Three settings affect how the Narrative Viewer integrates with the current plot time (as indicated on the Time Controller (see <xref linkend="time_controller"/>). <variablelist>
              <varlistentry>
                <term><guiicon>
                    <inlinemediaobject>
                      <imageobject>
                        <imagedata fileref="figures/wrap.png"/>
                      </imageobject>
                    </inlinemediaobject>
                  </guiicon></term>

                <listitem>
                  <para>Trim the narrative entries to the visible screen space</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term><guiicon>
                    <inlinemediaobject>
                      <imageobject>
                        <imagedata fileref="figures/synced.png"/>
                      </imageobject>
                    </inlinemediaobject>
                  </guiicon></term>

                <listitem>
                  <para>Highlight the narrative entry nearest to the current plot time.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term><guiicon>
                    <inlinemediaobject>
                      <imageobject>
                        <imagedata fileref="figures/clock.png"/>
                      </imageobject>
                    </inlinemediaobject>
                  </guiicon></term>

                <listitem>
                  <para>Change the plot-time to that of a narrative entry when the user double-clicks on it.</para>
                </listitem>
              </varlistentry>
            </variablelist></para>

          <para>Also, the narrative viewer is able to filter your data for you. Double-click on the <guibutton>Source</guibutton> or <guibutton>Type</guibutton> headings and a filter dialog will open.<figure xml:id="filtering_narrative">
              <title>Filtering a narrative by Type</title>
              <screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/narr_filter.png" width="338" align="center"/>
                  </imageobject>
                </mediaobject>
              </screenshot>
            </figure><figure>
              <title>Filtering a narrative by Source</title>
              <screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/narr_filter_src.png" align="center" width="338"/>
                  </imageobject>
                </mediaobject>
              </screenshot>
            </figure>In the examples shown, select which types of data you wish to see in the filtered narrative by either double-clicking on them or selecting one then clicking the right arrow. When you&apos;ve selected which data you want to see, click <guibutton>OK</guibutton>.</para>

          <para>The drop-down menu for the narrative viewer also allows you to select how you want the date column formatted - helpful for very frequent or infrequent narrative entries.</para>
        </sect2>
      </sect1>
    </chapter>

    <chapter xml:id="ChartBackdrops">
      <title>Using chart backdrops</title>
      <sect1 xml:id="ChartIntro">
        <title>Introduction</title>
        <para linkend="external_datasets">VPF and ETOPO (see <xref linkend="external_datasets"/>) can only add so much context to the analysis of a dataset<indexterm>
            <primary>Charts</primary>
            <secondary>Introduction</secondary>
          </indexterm>. Nautical Chart data contains a large volume of additional infromation that can assist analysis. Debrief supports chart data distributed by UKHO, though the standards used also allow chart from other sources to be incorporated. The chart support in Debrief is provided through integration of GeoTools library (see <xref linkend="GeoToolsRef"/>). <figure>
            <title>Chart data in Debrief</title>
            <screenshot>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/LandsEnd.png" width="450" align="center"/>
                </imageobject>
              </mediaobject>
            </screenshot>
          </figure></para>
        <sect2 xml:id="ChartFileTypes">
          <title>File types</title>
          <para>Debrief supports the following types of chart data:<variablelist>
              <varlistentry>
                <term>World Image file <filename>(.tif)</filename></term>
                <listitem>
                  <para>A raster chart image, with reference coordinates stored in a supporting .prj file</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>Esri Shapefiles <filename>(.shp)</filename></term>
                <listitem>
                  <para>A binary file adhering to the Esri open specification</para>
                </listitem>
              </varlistentry>
            </variablelist></para>
          <para>Beyond specific file types, Debrief recognises chart folios distributed by UKHO. Where these folios are configured within Debrief users are able to view the spatial extents of available charts - loading them as necessary.</para>
        </sect2>
      </sect1>
      <sect1 xml:id="loadCharts">
        <title>Loading data</title>
        <para>Data is loaded by one of two methods: drag/drop of a specific chart file, or via a chart library.</para>
        <para>Any shp or tif file can be dragged into Debrief - provided the prj sidecar files are present. When saving the plot Debrief will record the path to the datafile in the .dpf file in order that it can be reloaded at the next session.</para>
        <para>Separately, Debrief can provide a folio of charts<indexterm>
            <primary>Charts</primary>
            <secondary>Folios</secondary>
          </indexterm>, though the data must be stored in a specific layout (see <xref linkend="ChartStorage"/>), and Debrief must be configured appropriately. Configure Debrief this by selecting the <guilabel>Chart Backdrops</guilabel> page under the <guilabel>Maritime Analysis</guilabel> section of the <guilabel>Window/Preferences</guilabel> dialog. In this page specify the parent folder sitting above any chart folio folders. Debrief will search the subfolders of this location to locate any chart folio files.<figure>
            <title>Chart options</title>
            <screenshot>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/ChartOptions.png" width="100%" align="center"/>
                </imageobject>
              </mediaobject>
            </screenshot>
          </figure><note>
            <para>As you saw, there is also a transparency<indexterm>
                <primary>Charts</primary>
                <secondary>Transparency</secondary>
              </indexterm> attribute for charts. Use this to vary the transparency of the charts layers. For most analysis the presence of a chart backdrop can make vessel tracks difficult to distinguish. Making them semi-transparent fades them away a little - letting you focus on the tracks whilst still being aware of the backdrop chart data. Unfortunately, the transparency setting isn&apos;t observed when you copy the plot to the clipboard. Once pasted in MS Word, all charts are painted solid.</para>
          </note></para>
        <para>Once a parent folder is specified, when you click on Insert Chart Library from the Chart Features menu Debrief will scan the child folders for correctly named shapefiles and offer you a list of folios to choose from. Select one to load the folio.<figure>
            <title>Chart folio</title>
            <screenshot>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/ChartFolio.png" align="center" width="100%"/>
                </imageobject>
              </mediaobject>
            </screenshot>
          </figure><note>
            <para>If you right-click on the chart library in the Outline View you&apos;ll see the editable properties. These include the colour used for the rectangles plus whether the chart name is displayed against the chart rectangle.</para>
          </note></para>
        <para>The folio displays a rectangle for each available chart. The folio is a top-level layer in the Outline View that you can expand to view (and load) the child charts. Alternatively, right-click on a corner of one of the rectangles and select &apos;Load this chart&apos; to load a specific chart.<figure>
            <title>Loading a chart</title>
            <screenshot>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/LoadChart.png" align="center" width="100%"/>
                </imageobject>
              </mediaobject>
            </screenshot>
          </figure>
        </para>
        <para>The chart will then be loaded as a separate Debrief layer - and appear in the layer manager. As with any other layer, you can control it&apos;s visibility using the Outline View. Note, Debrief isn&apos;t going to store the chart image in the plot-file, it&apos;s just going to store the path to the Image - which will re-loaded next time you open the plot.</para>
      </sect1>
    </chapter>

    <chapter xml:id="sensor_data">
      <title>Analysing sensor data</title>

      <sect1 xml:id="more_sensor_data">
        <title xml:id="SensorDataSection">Getting your data in</title>

        <sect2 xml:id="sensor_Data_intro">
          <title>Introduction</title>

          <para>Debrief uses the following terms: <variablelist>
              <varlistentry>
                <term>Sensor</term>
                <listitem>
                  <para>The <glossterm linkend="g_sensor">sensor</glossterm> which recorded the data. Sensor data is grouped according to its sensor. This characteristic may be exploited by giving a unique sensor name to each track being recorded on a sensor - allowing tracks to be independently switched on and off.</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>Sensor Contact</term>
                <listitem>
                  <para>This is an individual contact recorded on a sensor, a single bearing line reaching from the sensor location (origin) along the contact bearing to the contact range.</para>
                </listitem>
              </varlistentry>
            </variablelist></para>

          <para>The sticky issue of whether to represent sensor data in absolute coordinates (where each line has its own origin) or whether to represent the data in relative coordinates (where the sensor origin is assumed to be the current ownship position) is managed through the ability to enter NULL fields for the sensor location.</para>

          <para>Support for relative coordinates is provided for two reasons: <itemizedlist>
              <listitem>
                <para>Some <glossterm linkend="g_sensor">sensor</glossterm> data sources may genuinely not contain positional data - allowing relative coordinates will ease the workload in these instances.</para>
              </listitem>

              <listitem>
                <para>In the submarine plot-lock process it is quite common to experiment with a number of track-shifts until the hull-mounted sensor bearing fans tie up with the other vessel. By keeping the sensor data separate to the vessel data, the existing sensor data-file can be dropped into Debrief with the updated vessel track-file, allowing the user to perform a visual qualitative check on the shift applied.</para>
              </listitem>
            </itemizedlist></para>

          <para>Note, it is not possible to define the sensor offset value in the REP file (see <xref linkend="SensorOffsetsEditor"/>), it may only be defined from the Properties Window of Debrief NG. The value is stored safely when the Debrief plot is saved, however.</para>

          <para>When Sensor Contact data is being plotted for a Sensor using relative coordinates, Debrief reflects a Sensor Offset distance for that sensor. The sensor offset distance denotes the horizontal distance between the centre of the centre and the attack datum of the host platform (+ve forwards, -ve backwards - so towed array data would be -ve). See the next section for more detail on the support for a shared library of array lengths. The location of the start of the sensor contact bearing line is calculated using the current value of course for the host platform and the sensor offset value.<note>
              <para>Sensor data is typically added to a plot by dragging/dropping it from the <guimenu>Navigator</guimenu> view. If the dragged in datafile only contains cuts from a single sensor a dialog pops up give you chance to override the sensor name and color. If the file contains data from more than one sensor then they just quietly slip in.</para>
            </note></para>
        </sect2>
        <sect2 xml:id="SensorTimePeriod">
          <title>Viewing Sensor Data Time Period</title>
          <para>When viewing the properties view, you will see a Start/Stop DTG for the current sensor data time period. This entry is read only, but provides an at a glance method of viewing range set for the sensor data.<mediaobject>
              <imageobject>
                <imagedata fileref="figures/sensor_dtg_readonly.png" scalefit="1" width="75%" align="center"/>
              </imageobject>
            </mediaobject></para>
        </sect2>

        <sect2 xml:id="SectWormInHole">
          <title>Worm in the hole</title>

          <para><indexterm>
              <primary>Worm in the hole</primary>
              <secondary>Usage</secondary>
            </indexterm>When examining a Sensor in the properties view, you will see that in addition to Sensor Offset, there is a &apos;Worm in the hole&apos; (see <xref linkend="WormInHole"/>). This is typically used for towed arrays, whereby the start of the sensor bearing line is located at the Sensor Offset distance back along the host platform track, instead of in a straight line behind the host.</para>
        </sect2>

        <sect2 xml:id="SensorOffsetsEditor">
          <title xml:id="titleForSensorLengths">Sensor offset lengths editor</title>

          <para><indexterm>
              <primary>Sensor data</primary>
              <secondary>Sensor offsets editor</secondary>
            </indexterm>Since Autumn 09 Debrief has supported a library of sensor offsets. These offsets are used to populate a drop-down list of lengths, used in support of specifying sensor offsets.</para>

          <para>Somewhere on your network create a csv-formatted text file that stores two columns of data (as shown below). The first column is the platform/sensor name, the second column is that combination&apos;s array offset in metres (with -ve figures at the stern of the host platform). The file should end in a csv suffix, and is formatted as follows:<screen>Sensor Name,Length (m)
Platform A,-45
Platform B,-124.6
Platform C,-551</screen></para>

          <para>Then open the Debrief preferences page, and specify the offset file location using the <guilabel>Standard Array Offsets</guilabel> page<screenshot>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/ArrayLengthsPrefs.png" scalefit="1" width="100%" align="center"/>
                </imageobject>
              </mediaobject>
            </screenshot></para>

          <para>Once the standard offsets file has been specified, you are provided with a drop-down list of sensor offset distances when you view sensor data in the properties window:<screenshot>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/LengthsEditor.png" width="308" align="center"/>
                </imageobject>
              </mediaobject>
            </screenshot></para>

          <note>
            <para>Note, if you haven&apos;t got a sensor array offsets file assigned, you can still enter a value by hand. But, you do not need to specify the metres units. For an array offset of -400m, just enter -400.</para>
          </note>
        </sect2>

        <sect2 xml:id="prepare_sensor_data">
          <title>Preparing Sensor Data</title>

          <para>Sensor data is loaded into Debrief in REP files, just like any other Debrief data. The line format is one of: <screen width="70">
<markup>;SENSOR: YYMMDD HHMMSS.SSS AAAAAA @@ DD MM SS.SS H DDD MM SS.SS  H BBB.B
 RRRR yy..yy xx..xx
;; date, ownship name, symbology, sensor lat/long (or the single word NULL),
 bearing (degs), range(yds) [or the single world NULL], sensor name, label (to end of line)</markup>
            </screen> or <screen width="70">
<markup>;SENSOR2: YYMMDD HHMMSS.SSS AAAAAA @@ DD MM SS.SS H DDD MM SS.SS H BBB.B
 CCC.C FFF.F RRRR yy..yy xx..xx
;; date, ownship name, symbology, sensor lat/long (or the single word NULL), 
 bearing (degs)  [or the single word NULL], ambigous bearing (degs) [or the 
 single word NULL], frequency(Hz) [or the single word NULL],  range(yds) [or
 the single word NULL], sensor name, label (to end of line)</markup>
            </screen> or <screen width="70">
<markup>;SENSOR3: YYMMDD HHMMSS.SSS AAAAAA @@ DD MM SS.SS H DDD MM SS.SS H BBB.B  CCC.C 
          FFF.F GGG.G RRRR yy..yy xx..xx
;; date, ownship name, symbology, sensor lat/long (or the single word NULL), 
bearing (degs) [or the single word NULL], bearing accuracy (degs) 
[or the single word NULL], frequency(Hz) [or the single word NULL], 
frequency accuracy (Hz) [or the single word NULL], range(yds) 
[or the single word NULL], sensor name, label (to end of line)</markup>
            </screen>
          </para>

          <para>As you can see, unlike most other Debrief line formats, this format allows for NULL fields. Where the sensor latitude and longitude values are replaced by the single word NULL, Debrief plots this sensor contact using a relative origin. NULL values may also be provided for the ambiguous sensor bearing and/or detection frequency.</para>
          <note>
            <para><indexterm>
                <primary>Sensor data</primary>
                <secondary>Track name missing in REP</secondary>
              </indexterm>It&apos;s quite common to produce a DSF file where the track name doesn&apos;t exactly match the tracks already loaded. So, if, when importing a REP file the track name doesn&apos;t match any existing tracks, Debrief will invite you to choose the track to add the sensor to.<screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/SensorTrackNotFound.png" width="308"/>
                  </imageobject>
                </mediaobject>
              </screenshot></para>
          </note>
        </sect2>

        <sect2 xml:id="rel_sensor_data">
          <title>Relative Data</title>

          <para>When (as described above) Debrief plots data using a relative origin, it follows the following procedure: <itemizedlist>
              <listitem>
                <para>The first time the sensor contact line is plotted, it examines its parent track to find the vessel position nearest to (or greater than) the sensor contact DTG.</para>
              </listitem>

              <listitem>
                <para>This position is then offset by a vector produced from the sensor offset value and vessel&apos;s current course.</para>
              </listitem>

              <listitem>
                <para>The sensor contact then calculates the position of its far end relative to this origin</para>
              </listitem>
            </itemizedlist></para>
        </sect2>
      </sect1>

      <sect1 xml:id="analyse_sensor_data">
        <title>Analysing your data</title>

        <sect2 xml:id="analyse_sensor_data_intro">
          <title>Introduction</title>

          <para>When first loaded, <glossterm linkend="g_sensor">sensor</glossterm> data is not <indexterm>
              <primary>Sensor data</primary>
              <secondary>Analysing</secondary>
            </indexterm> made visible, since with any reasonable volume of sensor data the plot quickly becomes illegible. Sensor data is switched on and off individually by accessing the sensor, via its Track, from the Outline View.</para>

          <para>It is once in <glossterm linkend="g_snail_trail">snail trail</glossterm> mode that sensor data is most easily analysed. When in snail mode the Snail display mode performs the following processing: <itemizedlist>
              <listitem>
                <para>For each Track being plotted, the display mode looks to see if it contains any Sensor data.</para>
              </listitem>

              <listitem>
                <para>It then examines each list of Sensor data to see if it&apos;s visible. If it is visible, it plots the current sensor contact (nearest to the <glossterm linkend="g_tote">Tote</glossterm> time), followed by the sensor contacts as disappearing contacts running back through the length indicated in the TrailLength parameter in the properties window.</para>
              </listitem>
            </itemizedlist></para>
          <formalpara xml:id="TrackFromActive">
            <title>Generate track from Active Sensor Data</title>
            <para>
              <indexterm>
                <primary>Sensor data</primary>
                <secondary>Generate track from Active data</secondary>
              </indexterm> If your sensor data has both range and bearing, you have all the data you need to generate a target track. If you right-click on a Sensor, or on a block of sensor cuts in the Outline View then Debrief will inspect them to see if they are suitable for generating a target track. Specifically it will check that they all have a Range value, a Bearing value, and no ambiguous bearing. If the selected data matches these constraints you will be invited to <guimenu>Generate Track from Active Sensor Data</guimenu>, and Debrief will generate a new track, named according to the sensor that produced it.</para>
          </formalpara>
        </sect2>

        <sect2 xml:id="BulkSensorData">
          <title>Managing high volumes of sensor data</title>

          <sect3 xml:id="HighVolumeIntro">
            <title>Introduction</title>

            <para>Modern command systems produce high volumes of sensor data, and a command system that just uses a 3-digit track counter can easily go &apos;around&apos; the clock when allocating track numbers to contacts.</para>

            <para>Debrief provides capabilities to both ease the challenge of deciding which sensor data is related to a specific target, and to automatically split a single sensor track in multiple tracks when they clearly relate to different targets.</para>
          </sect3>

          <sect3 xml:id="FilterHighVolume">
            <title>Filter sensor data of interest</title>

            <para>With lots of sensor data it can be increasingly difficult to determine which tracks should be made visible - the plot below shows just 12 visible tracks - it&apos;s possible to have many hundreds of tracks..</para>

            <para><screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/LotsOfTracks.png" width="100%"/>
                  </imageobject>

                  <caption><para>Cumbersome sensor data</para></caption>
                </mediaobject>
              </screenshot></para>

            <para><indexterm>
                <primary>Sensor data</primary>
                <secondary>Bulk data management</secondary>
              </indexterm>The new <guilabel>Bulk Sensor Manager</guilabel> offers an opportunity to determine which sensor data has a direction near to one of the other tracks currently loaded in Debrief. Before opening the Bulk Sensor Manager it&apos;s worth telling Debrief which is your &apos;ownship&apos; track, and which are the tracks of interest. Do this by marking tracks as primary and secondary in the Track Tote (see <xref linkend="assigning_tracks"/>). Once you have a primary track set, select <guilabel>Bulk Sensor Manager</guilabel> from the <guilabel>Window/Show View</guilabel> menu. You&apos;ll see a plot like the one below:<screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/BulkSensorManager.png" width="100%"/>
                  </imageobject>
                </mediaobject>
              </screenshot></para>

            <para>As you&apos;ll see, the view shows multiple series of track data. Currently visible tracks are displayed in bold lines (the thick green line in the screenshot) - so, you&apos;ll typically be trying to determine which blocks of sensor data are close to/similar to target tracks. Sensor data is shown with symbols if it&apos;s visible in the plot (see the pink line near the centre-left of the image). Clicking on a block of sensor data in the view also selects that sensor data in the Outline View (though on occasion you need to expand the <guilabel>Sensors</guilabel> folder in the Layer Manager). As blocks of sensor data are selected, they are shown in black in the view. Items can be multiple-selected with the <keysym>&lt;ctrl&gt;</keysym> key. Once multiple blocks of sensor data are selected in the Outline View you can right-click on them and select &apos;Merge sensors into <emphasis>xxxx</emphasis>&apos;</para>

            <para>Also note that whilst by default comes up with a unique color/symbol combination for each block of sensor data, you can click on the &apos;Show original colours&apos; palette icon at the top of the view. This will switch the Bulk Sensor Manager to using the sensor data color as configured via the sensor manager.</para>
          </sect3>

          <sect3 xml:id="AutoSplitSensorData">
            <title>Automatically split sensor tracks</title>

            <para>For data from a command system that frequently &apos;wraps around&apos; the track counter, when the data is read in Debrief will mistakenly assume that the data is all for the same contact: so the data will show as a continuous series to the left of the chart, then there&apos;ll be a jump over to were that track number is used again against another contact on the right hand side.</para>

            <para>Debrief offers a tool to automatically split sensor data - the scissors icon at the top of the Bulk Sensor Manager offers &apos;Auto-split sensor segments&apos;. It will pass through all of the sensor tracks in the primary track, and if there is a jump of more than 15 seconds Debrief splits the successive data into a new tracks. The original and new tracks are then renamed with a "_1", "_2" suffix.</para>
            <para>In the above screenshot you can see that the purple dataset actually covers 3 periods of sensor data, roughly: 0545-0640, 0710-0720 and 0830-1010. If we click on the Axe toolbar button (<guiicon>
                <inlinemediaobject>
                  <imageobject>
                    <imagedata align="center" fileref="figures/bulk_sensor_handaxe.png"/>
                  </imageobject>
                </inlinemediaobject>
              </guiicon>, <guibutton>Auto-split sensor segments</guibutton>), then we will see the tracks separated as in the following screenshot.<screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/BulkSensorManager_PostSplit.png" width="100%"/>
                  </imageobject>
                </mediaobject>
              </screenshot></para>
          </sect3>
          <sect3>
            <title>Trim to track period</title>
            <para>Sometimes the data extraction process results in sensor datasets being loaded/provided that cover time periods outside the range of the parent track. These unnecessarily slow down Debrief - so you may choose to delete them. The <guibutton>Trim to track period</guibutton>(<guiicon>
                <inlinemediaobject>
                  <imageobject>
                    <imagedata align="center" fileref="figures/bulk_sensor_hourglass.png"/>
                  </imageobject>
                </inlinemediaobject>
              </guiicon>) operation will delete any blocks of sensor data that completely fall outside the time period of the primary track.</para>
          </sect3>
          <sect3>
            <title>Remove sensor data unrelated to Secondary Tracks</title>
            <para>Sensor data loaded from a command system may contain many, many tracks. Many of the tracks will be of contacts unrelated to the platforms in question. It&apos;s quite easy for Debrief to determine sensor data that isn&apos;t related to the loaded secondary tracks. By clicking on the <guibutton>Remove sensor data unrelated to Secondary Tracks</guibutton> (<guiicon>
                <inlinemediaobject>
                  <imageobject>
                    <imagedata align="center" fileref="figures/bulk_sensor_scissors.png"/>
                  </imageobject>
                </inlinemediaobject>
              </guiicon>) button, Debrief will compare the bearing from the primary track to each secondary track. If a block of sensor data doesn&apos;t have a single cut that is within 45 degrees of any secondary track, it will be deleted. Running this operation on the above sample dataset gives this greatly reduced sensor dataset:<screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/BulkSensorManager_trim_unrelated.png" width="100%"/>
                  </imageobject>
                </mediaobject>
              </screenshot></para>
          </sect3>
          <sect3>
            <title>Automatically shading bulk sensor data</title>
            <para><indexterm>
                <primary>Sensor data</primary>
                <secondary>Shading sensor cuts</secondary>
              </indexterm>When very long sets of sensor data are exported to a report, it can be difficult for a reader to distinguish newer from old cuts - particularly when they are overlapping. Debrief provides support for this via the two <guimenuitem>Shade</guimenuitem> operations:<screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/ShadeSensor.png" width="100%"/>
                  </imageobject>
                </mediaobject>
              </screenshot></para>
            <para>These two operations shade the selected block of sensor data (or whole sensor) according to two operations - as shown below.<screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/ShadeRainbow.png" width="100%"/>
                  </imageobject>
                </mediaobject>
              </screenshot><screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/ShadeBlueRed.png" width="100%"/>
                  </imageobject>
                </mediaobject>
              </screenshot></para>
          </sect3>

          <sect3>
            <title>Trim length of sensor lines</title>

            <para>As you&apos;ll see in the earlier <emphasis>Cumbersome sensor plot</emphasis>, a lot of sensor data can make a plot difficult to interpret. If sensor data isn&apos;t provided with a range attribute, then sensor lines are drawn out to infinity (or the edge to the viewport - whichever is nearer...). On a large area plot this may given sensor lines of 10s of nautical miles long. If in truth the detections are only in the thousands of yards, you may wish to give the sensor data a range. To do this, start by multi-selecting a block of sensor data in the Outline View. Next, open the properties window - you&apos;ll see the elements have zero range. Just insert an &apos;indicative&apos; value for range. The sensor lines on the plot will now be clipped to that range - greatly reducing plot clutter.<screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/TrimmedTracks.png" width="100%"/>
                  </imageobject>

                  <caption><para>Trimmed sensor data</para></caption>
                </mediaobject>
              </screenshot></para>
          </sect3>
        </sect2>

        <sect2 xml:id="SensorRangePlot">
          <title>View plot of sensor range to target</title>

          <para>Whilst Debrief makes it easy to view a plot of the range between two vehicles, on occasion you may wish to view a time graph of the range from the array centre to the target. This graph can contain the distance from one or more sensors to a particular target. Open the graph by multi-selecting (&lt;ctrl-click&gt;) a series of sensor wrappers and a single target track (alternately you could select one track plus the &apos;Sensors&apos; item of another track if you wish to view a range plot that includes all the sensors). If such a combination of objects have been selected in the Outline View, when you right-click on them you are offered the &apos;View sensor range plot&apos; menu item:<screenshot>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/ViewSensorPlot.png" width="100%" align="center"/>
                </imageobject>

                <caption><para>Popup menu with a track plus multiple sensor selected</para></caption>
              </mediaobject>
            </screenshot></para>

          <para>Note, the Sensor Range Plot reflects the sensor offset length, plus whether the &apos;Worm in the hole&apos; (see <xref linkend="SectWormInHole"/>) property is set for each sensor. <tip>
              <para>On occasion you may wish to view a sensor range plot of a sensor for which you haven&apos;t loaded sensor data. That is, you&apos;ve loaded &amp; displayed hull-mounted sonar data, but you wish to know the range from the centre of the array to the target. Do this as follows:<orderedlist>
                  <listitem>
                    <para>Right-click on the ownship track, select &apos;Add new sensor&apos;</para>
                  </listitem>
                  <listitem>
                    <para>Name the new sensor using the wizard, and specify its default color</para>
                  </listitem>
                  <listitem>
                    <para>Now select the new sensor in the Outline View - in order that you can edit its properties. In the property window set the correct sensor offset distance (remember it&apos;s in metres, and specify negative values to represent a trailing array), and mark that it should use a &apos;worm in the hole&apos; algorithm</para>
                  </listitem>
                  <listitem>
                    <para>Now, back to the Outline View - multi-select the new sensor, and the target track. Right-click on them and select <guilabel>View sensor range plot</guilabel>.</para>
                  </listitem>
                </orderedlist>In this mode of use, the algorithm generates a range for each calculated position on the target track. In the normal mode (where we have sensor data), a range is calculated for each point at which there&apos;s a sensor cut (using interpolation to determine the position of the target track).</para>
            </tip><note>
              <para>Debrief is able to produce a plot of multiple sensors against on track, or the range from one sensor to multiple tracks - but it can&apos;t calculate the ranges for multiple sensors against multiple tracks. That would be just ridiculus. Your brain would explode, honest.</para>
            </note></para>
        </sect2>

        <sect2 xml:id="manage_ambiguous">
          <title>Managing ambiguous data</title>

          <para>Whilst hull-mounted sensor typically produce a single bearing to their contact, towed-arrays typically produce ambiguous bearings. They are aware of the relative bearing to the contact, but are now aware of whether it is to the Port or Starboard of the host platform.</para>

          <para>The Debrief sensor format (DSF) handles ambiguous data by allowing two bearings to be read in, and once that block of sensor data is made visible Debrief plots both sensor bearings.</para>

          <para>In order to analyse the sensor data, or use the sensor data in other analysis, the analyst must decide which is the actual bearing (to be kept), and which is the ambiguous bearing (to be removed).</para>

          <para>Once a decision has been made on which of the two bearings to keep, open that block of sensor data in the Outline View. Then, select the relevant sensor cuts (using &lt;shift&gt; and &lt;control&gt; as necessary to multi-select). Once selected, right-click on one of the items and select <guimenuitem>Keep port bearing</guimenuitem> or <guimenuitem>Keep starboard bearing</guimenuitem>.</para>
        </sect2>

        <sect2 xml:id="doppler_export">
          <title>Exploiting doppler calculations</title>

          <para><indexterm>
              <primary>Export</primary>
              <secondary>Calculated Doppler</secondary>
            </indexterm>To support the display frequency residuals (as used in <xref linkend="DraggingTracks"/>), Debrief contains a set of doppler frequency calculations (see <xref linkend="freq_alg"/>). Should you require this data in a third-party application it is possible to export this calculated data. Do this export as follows:<orderedlist>
              <listitem>
                <para>You must have a Debrief plot open that contains ownship plus target tracks</para>
              </listitem>

              <listitem>
                <para>Ownship must be marked (<xref linkend="assigning_tracks"/>) as primary track (see <xref linkend="the_tote_area"/>), and the target track must be the only secondary track</para>
              </listitem>

              <listitem>
                <para>The ownship track must contain sensor data</para>
              </listitem>

              <listitem>
                <para>The target track must have its base frequency assigned.</para>
              </listitem>

              <listitem>
                <para>Using the Time Controller view (see <xref linkend="time_controller"/>), select the time period for which data is to be exported</para>
              </listitem>

              <listitem>
                <para>Select <guimenu>Export Doppler Shift data</guimenu></para>
              </listitem>
            </orderedlist></para>

          <para>The data is collated using the following algorithm:<orderedlist>
              <listitem>
                <para>Loop through the visible blocks of sensor data for the ownship track</para>
              </listitem>

              <listitem>
                <para>Find all target track segments that overlap with this block of sensor data</para>
              </listitem>

              <listitem>
                <para>Loop through this block of sensor data</para>
              </listitem>

              <listitem>
                <para>For each sensor cut, find the position on the target track nearest to this time</para>
              </listitem>

              <listitem>
                <para>Perform a doppler calculation for this sensor cut/target position</para>
              </listitem>
            </orderedlist></para>

          <para>The data will now be written to file in csv format: first the base frequency then a series of time-stamped measured and predicted frequencies.</para>
        </sect2>

        <sect2 xml:id="MultiTonalAnalysis">
          <title>Multi tonal frequency analysis</title>

          <para>There exists the situation in frequency analysis where multiple tonals are held, but the analyst would rather use the highest freq tonals. Here&apos;s a strategy for how to manage it,</para>

          <para>First, load the bearing sensor data. Edit the sensor cuts (probably in the grid editor, <xref linkend="GridEditor"/>) to include the highest freq data held, potentially colouring the blocks of cuts according to the base tonal that they relate to. Go through these blocks of cuts creating a solution for each block - then setting the base frequency for that solution to the respective value.</para>

          <para>You can now switch individual solution blocks on and off, ensuring the stacked dots (<xref linkend="track_shifting"/>)will be working with the correct data values.</para>
        </sect2>

        <sect2 xml:id="multipath_analysis">
          <title xml:id="multipath_title">Multipath analysis</title>

          <para><indexterm>
              <primary>Multipath</primary>
              <secondary>analysis</secondary>
            </indexterm>Should you have access to multipath sensor data of a target vessel from a host platform, Debrief is able to assist in determining the target depth. In overview, Debrief allows you to compare the measured time interval with one calculated from the relevant dispositions of the two tracks (plus measured sound speeds for that location).</para>

          <sect3 xml:id="multipath_datasets">
            <title>Datasets</title>

            <para>To perform this analysis you require the following datasets:<orderedlist>
                <listitem>
                  <para>Ownship and Target tracks</para>
                </listitem>

                <listitem>
                  <para>A SVP (Sound Velocity Profile) file for the location (using the file format defined in <xref linkend="multi_data_svp"/> ). The maximum depth of the SVP is interpreted as the depth of the water column: the depth slider is uses this value as its maximum, and it is used as the maximum permissible value in the optimisation algorithm.</para>
                </listitem>

                <listitem>
                  <para>A file of measured time intervals (using the file format defined in <xref linkend="multi_data_delays"/>)</para>
                </listitem>
              </orderedlist></para>
          </sect3>

          <sect3 xml:id="multi_delay_algorithms">
            <title>Time delay algorithms</title>

            <para>The indirect path length is calculated as follows:<screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/multi_length_alg.png" width="212" align="center"/>
                  </imageobject>

                  <caption><para>Algorithm used to determine indirect path length</para></caption>
                </mediaobject>
              </screenshot>Where: <variablelist>
                <varlistentry>
                  <term>L<subscript>d</subscript></term>

                  <listitem>
                    <para>Direct path length</para>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term>L<subscript>s,horiz</subscript></term>

                  <listitem>
                    <para>Horizontal range to the point where the surface path intersects the surface (see diagram below)</para>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term>L<subscript>s</subscript></term>

                  <listitem>
                    <para>Path length from source to surface</para>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term>L<subscript>r</subscript></term>

                  <listitem>
                    <para>Path length from surface to receiver</para>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term>H<subscript>d</subscript></term>

                  <listitem>
                    <para>Horizontal range</para>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term>Z<subscript>s</subscript></term>

                  <listitem>
                    <para>Source depth</para>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term>Z<subscript>r</subscript></term>

                  <listitem>
                    <para>Receiver depth</para>
                  </listitem>
                </varlistentry>
              </variablelist>These lengths are the calculated as: <screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/multi_lengths.png" width="284" align="center"/>
                  </imageobject>

                  <caption><para>Comparison of acoustic paths</para></caption>
                </mediaobject>
              </screenshot>Finally the path lengths are divided by the respective sounds speeds to obtain the path travel times, and this the overall time delay:<screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/multi_delay.png" width="233" align="center"/>
                  </imageobject>
                  <caption><para>Calculation of time delay</para></caption>
                </mediaobject>
              </screenshot></para>
          </sect3>

          <sect3 xml:id="multi_svp_algorithms">
            <title>Sound Speed algorithms</title>

            <para>The sounds paths shown in the illustration above may travel through depths that have varying sound speeds. We calculate an average sound speed for the depth profile by calculating a weighted mean for that depth range:</para>

            <para>Source depth = 55 m</para>

            <para>Receiver depth = 30 m</para>

            <para>Sound Speed Profile:</para>

            <informaltable border="1">
              <thead>
                <tr>
                  <td valign="top">Depth (m)</td>
                  <td valign="top">Speed (m/s)</td>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td valign="top">0</td>
                  <td valign="top">1500</td>
                </tr>
                <tr>
                  <td valign="top">30</td>
                  <td valign="top">1505</td>
                </tr>
                <tr>
                  <td valign="top">40</td>
                  <td valign="top">1510</td>
                </tr>
                <tr>
                  <td valign="top">60</td>
                  <td valign="top">1515</td>
                </tr>
              </tbody>
            </informaltable>

            <para>Average sound speed between 0 m and 30 m can be ignored as the sound never goes into that region. Average sound speed between 30 m and 40 m is 1507.5 m/s. The sound speed at 55 m is 1513.75 m/s (through linear interpolation). Average sound speed between 40 m and 55 m is 1511.875 m/s. Using the depth range in metres as its weighting value, the overall average sound speed is ((1511.875*15)+(1507.5*10))/25 = 1510.125 m/s</para>
          </sect3>

          <sect3>
            <title>Optimisation Algorithm</title>

            <para>Debrief is able to use Dr Michael Thomas Flanagan&apos;s (at <link xlink:href="www.ee.ucl.ac.uk/~mflanaga" xmlns:xlink="http://www.w3.org/1999/xlink">www.ee.ucl.ac.uk/~mflanaga</link>, [note: external link]) Nelder Mead simplex optimisation algorithm to determine the optimum target depth to minimise the least-squares error between the calculated and measured curves.</para>
          </sect3>

          <sect3 xml:id="multi_ui">
            <title>User interface</title>

            <para>Perform multi-path analysis using the Multipath analysis view. Open this view by selecting it from the <guilabel>Window/Show View</guilabel> menu. <screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/multi_empty.png" scalefit="1" width="100%"/>
                  </imageobject>

                  <caption><para>Initial view of multipath analysis view</para></caption>
                </mediaobject>
              </screenshot>As you&apos;ll see from the above screenshot, the panel is laid out with a series of controls above an xy plot. The controls at the top of the view indicate the files being used for SVP and time-delays, a slider control is provided to let you trial target depths, plus there&apos;s a <emphasis>magic</emphasis> button that runs an optimisation algorithm - generating a <emphasis>best-guess</emphasis> of target-depth by minimising the time-delay error.</para>

            <para>So, start off by dragging in your SVP and time-delay files - dropping them over the respective <emphasis>[pending]</emphasis> label. Next, ensure your &apos;ownship&apos; track is marked as the current primary track, and your target track is the secondary track in the Debrief Track Tote (as explained in <xref linkend="more_assigning_tracks"/>).</para>

            <para>Once you&apos;ve loaded the data and assigned the tracks, the slider control will become enabled and you can drag it to trial new target depths. The xy plot will update to show a comparison of the calculated time delays against the measured delay. You&apos;ll determine the target depth estimate by using the slider to place the blue (calculated) line as close as possible to the red (measured) line.<screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/multi_working.png" scalefit="1" width="100%"/>
                  </imageobject>

                  <caption><para>Multipath analysis view with data loaded</para></caption>
                </mediaobject>
              </screenshot></para>

            <para>An alternative to working out the estimated target depth by eye/experimentation is to click on the magic top-hat icon. A <link xlink:href="http://www.ee.ucl.ac.uk/~mflanaga/java/Minimisation.html" xmlns:xlink="http://www.w3.org/1999/xlink">Nelder and Mead simplex optimisation algorithm</link> [note: external link] will now run - with the slider set to the result on completion. Should you be interested in the performance of this iterative optimisation algorithm, a summary of each step is placed as an information message in the error log (viewable by selecting <guimenu>Window</guimenu>/<guimenu>Show View</guimenu>/<guimenuitem>Error Log</guimenuitem>). The log will show the &apos;score&apos; for each target depth trialled - normally only around 10-20 depths are necessary to reach an optimum.</para>

            <para>Note, during development, on occasion the optimisation algorithm failed to produce a realistic target depth. On each occasion this was a symptom of there not being a valid result in the available target range (0 to 1000m) - which itself was symptomatic of invalid data files: dropping the data-files into the wrong &apos;slot&apos; or mistakenly using units different to those specified in the reference (see <xref linkend="multi_data_delays"/>).</para>
          </sect3>
        </sect2>
      </sect1>
    </chapter>

    <chapter xml:id="tma_data">
      <title>Management of TMA and TUA solutions</title>

      <sect1 xml:id="more_tma_data">
        <title>TUA data</title>

        <sect2 xml:id="tma_intro">
          <title>Introduction</title>

          <para><glossterm linkend="g_tma_solution">TMA</glossterm> algorithms are used to produce an estimate of range by analysing a sequences of sensor contacts which only contain bearing (and optionally range). The output of the algorithm is typically a series of estimated target locations with optional estimates for course, speed and depth. Uncertainty in bearing and range may be indicated by representing the target location as an ellipsoidal Target Uncertainty Area (TUA).</para>

          <para>TUA contact data is always related to one of the currently loaded tracks, and may be represented either as an absolute location (at the centre of the ellipse) or as a range and bearing from the nearest point on that loaded track. The strategy for use of absolute versus relative data is described earlier in <xref linkend="prepare_sensor_data"/>.</para>
        </sect2>

        <sect2 xml:id="pre_tma_data">
          <title>Loading TUA data in bulk</title>

          <para>TUA data is loaded into Debrief in REP files, just like any other Debrief data. The line format is: <screen>
              <markup>
;TMA_POS: YYMMDD HHMMSS.SSS AAAAAA @@ DD MM SS.SS H DDD MM SS.SS H 
TT...TT OOO.O  XXXX YYYY  CCC SSS DDD xx.xx 
;; date, time, ownship name, symbology, tma lat, tma long, track name, 
ellipse orientation (deg from north),  maxima (yds), minima (yds), 
course, speed, depth (m), label string

;TMA_RB: YYMMDD HHMMSS.SSS AAAAAA @@ BBB.B RRR.R TT...TT OOO.O
XXXX YYYY  CCC SSS DDD xx.xx 
;; date, time, ownship name, symbology, bearing (deg), range (yds), 
track name, ellipse orientation (deg from north),  maxima (yds),
 minima (yds), course, speed, depth (m), label string
              </markup>
            </screen><note>
              <para>There are two annotation format to represent TUA solutions (TMA_POS and TMA_RB). TMA_POS is used to define a TMA solution at a particular location, and TMA_RB is used to define a TMA solution at a specific range and bearing from the current ownship location at that specific DTG. Where a solution ellipse is not known the orientation, maxima and minima values can be represented by a single NULL value.</para>
            </note></para>
        </sect2>

        <sect2 xml:id="TUA_WIZARD">
          <title>Loading small amounts of TUA data</title>

          <para>An alternate route to loading TUA data is to use the &apos;Generate TUA Ellipse&apos; wizard. Right-click on a Track or the <guilabel>Solutions</guilabel> layer inside a track, and select the respective menu item. The time for the ellipse is taken from the Time Controller, though you may type in any time. Follow the steps, and when the wizard closes you will have created your TUA ellipse. Clearly, if you have lots of TUAs to load, you&apos;re better off by loading the data into Debrief via a data-files as described above.</para>
        </sect2>

        <sect2 xml:id="rel_tma_data">
          <title>Relative data</title>

          <para>When (as described above) Debrief plots data using a range and bearing, it follows the following procedure: <itemizedlist>
              <listitem>
                <para>The first time the TUA solution is plotted, it examines its parent track to find the vessel position nearest to (or greater than) the TUA solution DTG.</para>
              </listitem>

              <listitem>
                <para>The TUA solution then calculates the position of its centre relative to this origin</para>
              </listitem>
            </itemizedlist></para>
        </sect2>

        <sect2 xml:id="analysing_tma_data">
          <title>Analysing TUA data</title>

          <para>When first loaded, TUA data is not <indexterm>
              <primary>TMA Data</primary>
              <secondary>Analysing</secondary>
            </indexterm> made visible, since with any reasonable volume of TUA data the plot quickly becomes illegible. TUA data is switched on and off individually by accessing the whole TUA track, via its Track, from the Outline View.</para>

          <para>It is once in <glossterm linkend="g_snail_trail">snail trail</glossterm> mode that TUA data is most easily analysed. When in snail mode the Snail display mode performs the following processing: <itemizedlist>
              <listitem>
                <para>For each Track being plotted, the display mode looks to see if it contains any TUA data.</para>
              </listitem>

              <listitem>
                <para>It then examines each list of TUA data to see if it&apos;s visible. If it is visible, it plots the current TUA solution (nearest to the <glossterm linkend="g_tote">Tote</glossterm> time), followed by the TUA solution as disappearing solutions running back through the length indicated in the TrailLength parameter in the properties window.</para>
              </listitem>
            </itemizedlist></para>
        </sect2>
      </sect1>

      <sect1 xml:id="tma_support">
        <title xml:id="TMA_Mgt">TMA Management</title>

        <sect2 xml:id="TMAMgtIntro">
          <title>Introduction</title>

          <para>In addition to being able to display TUAs from third-party TMA implementations, Debrief can be used to derive fresh TMA solutions. These solutions are not presented in the form of TUAs, but in the form of analysis legs: a time-limited track segments comprising a series of points at constant course and speed. Traditionally these segments are created by analysis of a combination of sonar-derived bearings and frequencies.</para>

          <para>These TMA segments are represented as track segments within Debrief for which the course and speed of the whole track (solution) are editable via the Properties Window.</para>

          <para>The workflow for creating and manipulating TMA segments is covered in the <emphasis>Single Sided Reconstruction in Debrief</emphasis> tutorial in the Debrief online help.</para>
        </sect2>

        <sect2 xml:id="GeneratingTracks">
          <title>Generating track segments</title>

          <para>Debrief allows you to generate a segment of track data from a block of sensor data - replicating the process conducted on warships. This track segment adjusts dynamically to reflect the sensor location changing (such as if the sensor offset is edited - see <xref linkend="SensorOffsetsEditor"/>). In the absence of sensor data it is possible to generate a segment of target track from a set of ownship positions. Data to support these operations is collected via a wizard, as described in the above tutorial.</para>
        </sect2>

        <sect2 xml:id="DraggingTracks">
          <title>Dragging tracks</title>

          <para>Once TMA segments are present on the Debrief plot they are manipulated using the <guibutton>Drag Track Segment</guibutton> toolbar button <guiicon><inlinemediaobject>
                <imageobject>
                  <imagedata fileref="figures/SelectSegment.png"/>
                </imageobject>
              </inlinemediaobject></guiicon>. Once this button is pressed Debrief automatically displays the <guilabel>Bearing Residuals</guilabel> view, which displays bearing residual data - subject to the constraints listed earlier in <xref linkend="stacked_dots_view"/> (with the TMA Segment present as the secondary track). If your data contains frequency data then you can open the <guilabel>Frequency Residuals</guilabel> view, which display actual, and calculated frequencies (based on the selected solution). Read more about the frequency algorithms in <xref linkend="freq_alg"/>.</para>

          <para>Once the plot is in &apos;Drag track segment&apos; mode a series of track-dragging modes are enabled - with the current mode selected via the control buttons on the Stacked Dots plot. The control buttons provide the following modes:<variablelist>
              <varlistentry>
                <term>Translate</term>

                <listitem>
                  <para>Drag the whole track around, changing range and bearing from the source, but maintaining target course and speed</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Rotate</term>

                <listitem>
                  <para>Drag one end of the track, maintaining the track length (target speed) but changing the target course</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Stretch</term>

                <listitem>
                  <para>Drag one end of the track, maintaining the target course but changing the track length (target speed). When the centre-point of the track is dragged, the track moves in and out stretching/contracting as necessary to adhere to the start/end points on the host platform bearing fan.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Shear</term>

                <listitem>
                  <para>Drag one end of the track, changing both the target course and speed</para>
                </listitem>
              </varlistentry>
            </variablelist><note>
              <para>Note, only the Translate and Rotate operations are available for all track sections. Only the Stretch and Shear operations are suitable for application to straight-line TMA Segments Thus, the hand cursor will only turn green over straight-line TMA Segment hot spots.</para>
            </note> When in Translate or Rotate mode, the drag-highlight is extended beyond the first/last point in the track to assist with alignment. A target-circle is also plotted on this extended stalk. This target is plotted at a distance equal to the distance back to the end-but-one point. Thus, if you have equi-spaced track data this target can be used to align the track sections longitudinally and transversely. In the following diagram the lower-right track segment is being dragged inline with the upper-left track segment. Place the circle/cross hair over the end point of the fixed track to align the tracks in both dimensions.<screenshot>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/DragHighlight.png" width="100%"/>
                </imageobject>
              </mediaobject>
            </screenshot></para>

          <para>Note, when the plot is in one of these modes, the operations apply to the ends of the track - so the operation is started by dragging one end of the track (once the &apos;selected&apos; hover highlight is shown). In addition to the specific operations performed at the ends of the target track, all modes support picking up and dragging the track when it is picked up at its centre In the Stretch mode the track shifts as described above, in all the other modes it is translated.</para>
        </sect2>

        <sect2 xml:id="CombiningTracksMarker">
          <title xml:id="CombiningTracksTitle">Combining tracks</title>

          <para>Collectively, TMA segments are combined into target tracks using the Group and Merge operations described in <xref linkend="GroomingTrackData"/>.</para>
        </sect2>
      </sect1>
      <sect1 xml:id="satc">
        <title>Semi-Automated TMA generation</title>
        <para>Many Debrief users have high-performance workstations that have sufficient processing power to produce an initial best-guess at a solution for target tracks based on bearing data. In 2012 talks started regarding the delivery of such a capability to analyst usesrs. Significantly, it was perceived that an automated approach would benefit from multi-leg engagements, engagements that are typically challenging using the existing Debrief manual TMA capabilities.</para>

        <para>Following exploratory discussions with <guilabel>Atlas Elektronik UK</guilabel> regarding the <guilabel>FRITMA</guilabel> tool it was determined by the relevant stakeholders that a custom-built TMA algortihm would be a viable solution for the requirement. This new Debrief feature was to be called Semi Automatic Track Construction (<guilabel>SATC</guilabel>) </para>
        <para><note>
            <para>Further detail regarding the strategies and algorithms used in SATC are found later in this document, in <xref linkend="chap_genetic_algorithms"/></para>
          </note></para>
        <sect2 xml:id="SATC_tma">
          <title>Bearings Only TMA</title>
          <para>The concept of Bearings Only Target Motion Analysis, or Bearings Only Tracking (BOT) is an established field of mathematics. An easy intro to this is covered in this <link xlink:href="http://mpet.freeservers.com/dc_tma1.html">users online guidance</link> for the 688i game. This system utilises a variant on that concept. Whilst BOT focuses on the production of a near-real time estimate of the current state (location, course, speed) of the subject vehicle, this system performs the process time-late, aiming to produce a whole segment of vehicle track. The time-late nature of the undertaking (possibly several weeks later) means that an analyst has the opportunity to research other information about the vehicle track to contribute to the algorithm. This other information may be through acoustic analysis, supplementary documentation, or third-party sensors.</para>
        </sect2>
        <sect2 xml:id="satc_concepts">
          <title>Glossary</title>
          <para>
            <variablelist>
              <varlistentry>
                <term>Hard Constraint</term>
                <listitem>
                  <para>A set of parameters that any target solution must meet - for example an analyst may know the range of speeds of a class of vessel sufficient to say "any solution track for this vessel must be within 2 and 9 knots".</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>Estimate</term>
                <listitem>
                  <para>A subjective contribution from an analyst, such as "I believe the vessel is travelling at 4 knots". The SATC will consider values other than the estimate, but solutions that match the estimate will be favoured.</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>Contribution</term>
                <listitem>
                  <para>A piece of information that is used in development of target solutions. This may be a measurement (such as range, bearing or frequency) data, an analyst forecast (a prediction, such as speed range), or one of a hidden set of analysis contributions that deduce further constraints based on other contributions.</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>Scenario</term>
                <listitem>
                  <para>The collection of information and knowledge that is used to produced target solutions</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>Leg</term>
                <listitem>
                  <para>A period of time for which it is known that the target vessel is either on steady course/speed (<guilabel>Straight Leg</guilabel>) or is manoeuvring (<guilabel>Altering Leg</guilabel>)</para>
                </listitem>
              </varlistentry>
              <varlistentry xml:id="satc_precision">
                <term>Precision</term>
                <listitem>
                  <para>An indication of the level of fidelity to be considered by the SATC algorithm. For the LOW, MEDIUM, HIGH precisions the algorithm is allowed to run for 5, 15 and 30 seconds resp. For these precisions, the number of solutions considered for each processing cycle are 45, 70 and 120 resp.</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>Solution</term>
                <listitem>
                  <para>A single permutation of target track, comprised of a series of legs - both altering and straight.</para>
                </listitem>
              </varlistentry>
            </variablelist>
          </para>
        </sect2>
        <sect2 xml:id="satc_intro">
          <title>Overview of SATC</title>
          <para>A series of meetings with Dr Iain McKenna (BAE Systems) led to a strategy where informed analysts would be able to submit a series of contributions representing knowlege they held regarding a vessel engagement. This flow of knowledge and interaction with the algorithm is as recorded below<screenshot>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/SATC_sequence.png" width="100%"/>
                </imageobject>
                <caption><para>SATC Sequence</para></caption>
              </mediaobject>
            </screenshot><variablelist>
              <varlistentry>
                <term>1. Submit Bearings</term>
                <listitem>
                  <para>Bearing data lies at the core of the SATC algorthm, proving one of the most useful constraints on potential target track. The solution generation process is started by submitting a block of bearings to a solution.</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>2. Indicate Target Legs</term>
                <listitem>
                  <para>The second-most important contribution is the knowledge of time periods where the target is believed to be travelling in a straight line. Again, this greatly reduces the number of candidate solutions that need to be considered.</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>3. Submit Other Contributions</term>
                <listitem>
                  <para>Once the first two contributions are in place, the analyst is then able to submit his knowledge/hypotheses regarding target course, speed, or the range to the target. These forecasts can relate to the whole target solution, particular legs, or even discrete periods of time between those legs.</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>4. Generate/Assess Solutions</term>
                <listitem>
                  <para>The analyst can then trigger the generation of a solution. The solution is <guilabel>optimal</guilabel> in regard to the contributions that the analyst has submitted. If the solution does&apos;t match the analysts expectation, or if it just doesn&apos;t look right, then the analyst can submit further contributions, as appropriate.</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>5. Import as Debrief Track</term>
                <listitem>
                  <para>Ultimately, if/when the analyst is happy with the solution produced he can import the solution into Debrief, either as a collection of legs (to be used in the existing manual TMA process), or directly as a conventional Debrief track.</para>
                </listitem>
              </varlistentry>
            </variablelist></para>
          <para>Internally, the SATC process runs in two stages. The first considers hard-constraints that the analyst has recorded for the engagement. These constraints are intelligently fused into a consolidated body of constraints, one set for each potential target location (one location is produced for each bearing measurement). This phase is able to run very quickly, since it just deals with hard facts. It is possible to view the set of constraints changing live on the Debrief plot whilst the hard-constraints are manipulated.</para>
          <para>The second stage is where candidate solutions are produced. This stage can be quite time-consuming, so it is only run on analyst request. The stage produces an imaginary grid over the potential start and end positions for each straight leg. The algortihm then looks at the possible straight courses between combinations of these points. An optimisation algorithm reduces the number of permutations that need to be considered. The optimisation algorithm also discards solutions that, whilst mathematically optimal, do not represent achievable successive courses (due to simple speed/time calculations). <screenshot>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/SATC_Process.png" width="100%"/>
                </imageobject>
                <caption><para>SATC Process</para></caption>
              </mediaobject>
            </screenshot></para>
          <para>The following screenshot shows a TMA scenario using simulated data. The ownship track is shown in <guilabel>Blue</guilabel>, the truth target track is shown in <guilabel>Red</guilabel>, and the generated solution is shown in <guilabel>Yellow</guilabel>. The range error between truth and generated track is shown in the <guilabel>Range vs Time Plot</guilabel> at the foot of the image. The scenario is particularly challenging, given that there are more target manoeuvres than ownship manoeuvres, the target is quite distant, and the bearing rates are relatively low. <screenshot>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/SATC_solution.png" width="100%"/>
                </imageobject>
                <caption><para>Sample solution</para></caption>
              </mediaobject>
            </screenshot></para>
        </sect2>

        <sect2 xml:id="satc_ui">
          <title>User Interface</title>
          <para>SATC scenarios are managed from within the <guilabel>Maintain Contributions</guilabel> view within Debrief. This view opens automatically when a new scenario is created.<screenshot>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/MaintainContributions.png" width="100%"/>
                </imageobject>
                <caption><para>Maintain Contributions View</para></caption>
              </mediaobject>
            </screenshot>The following sections describe the three parts of the <guilabel>Maintain Contributions</guilabel> View</para>
          <formalpara xml:id="satc_ui_preferences">
            <title>Preferences</title>
            <para>This panel provides overall control of the scenario.<variablelist>
                <varlistentry>
                  <term>Auto-Recalc of Constraints</term>
                  <listitem>
                    <para>This toggle button tells SATC whether it should recalculate the constraints each time a contribution is changed</para>
                  </listitem>
                </varlistentry>
                <varlistentry>
                  <term>Calculate Solution</term>
                  <listitem>
                    <para>Actually calculating the solution can take up to several minutes, so the overall solution is only calculated when this button is pressed</para>
                  </listitem>
                </varlistentry>
                <varlistentry>
                  <term>Suppress Cuts</term>
                  <listitem>
                    <para>Whether to allow Debrief to <link linkend="SuppressingCuts">Suppress</link> the least significant cuts. Greater <link linkend="satc_precision">precision</link> settings allow suppression of fewer cuts.</para>
                  </listitem>
                </varlistentry>
                <varlistentry>
                  <term>Precision</term>
                  <listitem>
                    <para>Used to indicate which of the three <link linkend="satc_precision">precision</link> levels are required in solution generation. </para>
                  </listitem>
                </varlistentry>
              </variablelist></para>
          </formalpara>
          <formalpara xml:id="satc_ui_contributions">
            <title>Analyst Contributions</title>
            <para>This contains a list of the contributions provided by the analyst. For each contribution, this data is present:<variablelist>
                <varlistentry>
                  <term>Name</term>
                  <listitem>
                    <para>Each contribution is presented inside it&apos;s own screen object. The contribution name is provided at the top-left of this block</para>
                  </listitem>
                </varlistentry>
                <varlistentry>
                  <term>Hard Constraints</term>
                  <listitem>
                    <para>Some contributions have hard constraints. In the earlier screenshot you can see that the Speed Forecast has hard constraints of 5-15 knots. No solution will go outside these bounds.</para>
                  </listitem>
                </varlistentry>
                <varlistentry>
                  <term>Estimate</term>
                  <listitem>
                    <para>Where an estimate is provided, it is shown here. For the Speed Forecast in the earlier screenshot, you can see that an estimate of 13 knots has been provided. So, solutions will be favoured if they have a target speed nearer to 13 knots.</para>
                  </listitem>
                </varlistentry>
                <varlistentry>
                  <term>Weight</term>
                  <listitem>
                    <para>The weighting is a way of the analyst tuning the TMA process. Higher weightings figure more strongly in the generated solutions.</para>
                  </listitem>
                </varlistentry>
                <varlistentry>
                  <term>Delete</term>
                  <listitem>
                    <para>Use this to delete a contribution. It will also disappear from the Layer Manager.</para>
                  </listitem>
                </varlistentry>
              </variablelist></para>
          </formalpara>
          <formalpara>
            <title>Performance</title>
            <para>The performance graph is an indication of progress of the SATC algorithm, as a series of states along the whole solution. For each timed state object the graph shows one or more bars. A bar is shown for each contribution that is capable of calculating solution error - with some error scores shown per state (such as for Bearing Measurement Contribution) or an error shown for a whole leg (such as for an estimated leg speed). The error shown is normalised to a zero-one value within the allowable min/max range (or bearing error for bearing data), then scaled according to the weighting value for that contribution. </para>
          </formalpara>
          <formalpara>
            <title>Analysis support</title>
            <para>In the toolbar for the Maintain Contributions view is a button to export a summary of the scenario to the clipboard in CSV format. This format includes a series of x,y, date-time, course, speed ownship state measurements, followed by a series of time-stamped bearings. The X/Y and date-time have been made relative to an arbitrary location to hide any potentially sensitive data. Access to the data eases the task of externally analysing the scenario.</para>
          </formalpara>
        </sect2>
      </sect1>
    </chapter>


    <chapter xml:id="dis_support">
      <title>Support for DIS Protocol</title>

      <sect1 xml:id="dis_intro">
        <title>Introduction</title>
        <indexterm>
          <primary>DIS</primary>
          <secondary>Distributed Interactive Simulation</secondary>
        </indexterm>

        <para> One group of users employ Debrief for the analysis of scenario results from a headless simulation engine. The simulation engine produces results data in a range of output formats. Historically the users had to convert an existing output format to Debrief <code>.rep</code> format, but in the late 2000s direct support for Debrief was added. </para>
        <para> In 2015 this body of users recognised the utility of using Debrief as a live simulation monitor, to bring these benefits: <itemizedlist>
            <listitem>
              <para>Verify scenario participants behave as predicted before committing to lengthy Monte Carlo block of simulation runs</para>
            </listitem>
            <listitem>
              <para>Develop the behaviour of one or more scenario participants in a programming-like CODE-RUN-DEBUG cycle</para>
            </listitem>
          </itemizedlist> The <glossterm linkend="g_DIS">DIS</glossterm> standard was adopted for network communications between Debrief and the headless simulation engine: <uri xlink:href="https://en.wikipedia.org/wiki/Distributed_Interactive_Simulation"> </uri>. </para>
        <para>You can find System documentation for the DIS integration later in this document (<xref linkend="dis_ref"/>)</para>
      </sect1>
      <sect1 xml:id="dis_config">
        <title>Configuring DIS</title>
        <indexterm>
          <primary>DIS</primary>
          <secondary>DIS Preferences</secondary>
        </indexterm>
        <para> Access the DIS preferences page either from the <guimenu>Window / Preferences / Maritime Analysis</guimenu> DIS preferences page, or by clicking on the <guibutton>Server prefs</guibutton> link on the <guilabel>DIS Listener View</guilabel>. <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="figures/DISPrefs.png" width="60%"/>
            </imageobject>
          </mediaobject>
        </para>
        <sect2 xml:id="dis_net_config">
          <title>Network configuration</title>
          <para>Debrief uses DIS to talk to simulators running on the current machine, or on another machine on the network. This network communications requires some configuration - to tell Debrief what to listen to. Two specific values are used:<variablelist>
              <varlistentry>
                <term>IP Address</term>
                <listitem>
                  <para>The 4-block Network address for the multicast group being used for DIS messaging</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>Port</term>
                <listitem>
                  <para>The number of the port on that address which is being used for DIS messaging</para>
                </listitem>
              </varlistentry>
            </variablelist>
          </para>
        </sect2>
        <sect2 xml:id="dis_exe_config">
          <title>Configuring the launch of an external simulator</title>
          <para>Some DIS simulators run as complex combinations of services &amp; applications. Other simulators are contained in simple standalone executables. It is possible to launch such an executable directly from Debrief<variablelist>
              <varlistentry>
                <term>Path to executable</term>
                <listitem>
                  <para>The application (or script) used to trigger a simulation run</para>
                </listitem>
              </varlistentry>
            </variablelist>
          </para>
        </sect2>
        <sect2 xml:id="dis_debrief_config">
          <title>Giving Debrief an identity</title>
          <para>In an environment where a networked simulation has multiple participants, it can become necessary to specify identify particular participants (so their messages could be, for example, ignored). Two particular values are used for this configuration<variablelist>
              <varlistentry>
                <term>Site</term>
                <listitem>
                  <para>This value is unique to the site (location) where Debrief is being run from. The value isn&apos;t derived from a formal table, but is by local agreement</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>Application</term>
                <listitem>
                  <para>This value is unique to the Debrief application.</para>
                </listitem>
              </varlistentry>
            </variablelist>
          </para>
        </sect2>
        <sect2 xml:id="dis_filter_config">
          <title>Filtering DIS traffic</title>
          <para>It is possible for multiple DIS simulations to simultaneously run on a single network. Common-sense would suggest that these multiple simulations should use unique network address and port, but this isn&apos;t mandatory. If multiple simulations are being run on the same network address and port, it is possible to control which simulations Debrief listens to:<variablelist>
              <varlistentry>
                <term>Site</term>
                <listitem>
                  <para>Provision of this optional parameter restricts Debrief to handling messages from the specified site</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>Application</term>
                <listitem>
                  <para>Provision of this optional parameter restricts Debrief to handling messages from the specified application</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>Exercise</term>
                <listitem>
                  <para>Provision of this optional parameter restricts Debrief to handling messages from the specified DIS exercise</para>
                </listitem>
              </varlistentry>
            </variablelist>
          </para>
        </sect2>
      </sect1>
      <sect1 xml:id="dis_usage">
        <title>Monitoring a DIS simulation</title>
        <para> Interaction with DIS scenarios is performed from the <guimenu>DIS Listener View</guimenu>. <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="figures/DISView.png" width="60%"/>
            </imageobject>
          </mediaobject> At the top of the panel are two small icons. The first has a toggle behaviour, and when ticked Debrief will auto-resize at each step, to ensure all loaded data remains visible. The second icon opens the Console view (to keep track of messages returned by the launched simulator - see more at <xref linkend="dis_console"/>), and the final one accesses the help for Debrief&apos;s DIS integration. </para>
        <sect2 xml:id="LocalSimulator">
          <title>Running a local simulator</title>
          <para> If you have specified the path to an executable in the <guimenu>Server preferences</guimenu> (see <xref linkend="dis_exe_config"/>), then you can use the <guimenu>Local simulator</guimenu> box to (optionally) specify the location of the input file to be passed to the executable. Click on the <guibutton>...</guibutton> button to open a file browser. </para>
          <para> Once a control file has been specified, you can click on the <guibutton>Launch</guibutton> button to start the simulator executable, passing the input file to it. After launching Debrief will automatically start listening on the correct network port. <tip>
              <para>A quick way of setting the input file is to drag one from the <guimenu>Navigator</guimenu> view oneo the path. This will update the input file path to the one dragged in.</para>
              <para>An even quicker way of running a different input file is to right-click on a <filename>*.inp</filename> file in the <guimenu>Navigator</guimenu> view and select <guimenu>Run in simulator</guimenu>. This will launch the simulator, passing it that control file. Do this if you have lots of different input files in your workspace.</para>
            </tip></para>
        </sect2>
        <sect2 xml:id="DisInteration">
          <title>Interacting with a DIS simulation</title>
          <para>The large listen button is used to toggle whether Debrief is listening for DIS messages.</para>
          <para>If Debrief receives sufficient network status messages from the simulator, Debrief will enable the <guibutton>Play</guibutton>, <guibutton>Pause</guibutton>, <guibutton>Stop</guibutton>. After <guibutton>Stop</guibutton> has been pressed, and new DIS messages received will be put into a new plot (existing data will be wiped). </para>
        </sect2>
        <sect2 xml:id="OtherSettings">
          <title>Other settings</title>
          <para> Two other minor options are provided. If <guibutton>New plot per replication</guibutton> is ticked, when Debrief recognises that data for an new simulation run is being received, Debrief will open a fresh plot to contain the data. <note>
              <para>If the current plot is based on a <filename>.REP</filename> input file, Debrief will base the fresh plot on that same input file. This practice can be used to design a set of background annotations (such as exercise area, scale, bathy backdrop) - which gets used for all plots.</para>
            </note>
          </para>
          <para>If the simulator is running very quickly, and it looks like the UI is getting swamped with updates, the <guibutton>Live updates</guibutton> checkbox can be cleared, which will let Debrief continue to receive and store DIS messages, but Debrief will not bother updating the user interface (the Outline view or the Plot Editor).</para>
          <para>Lastly, the <guibutton>Server prefs</guibutton> link can be used to open the preferences page for Debrief DIS communications.</para>
        </sect2>
        <sect2 xml:id="logging">
          <title>Logging DIS messages</title>
          <para>On the <guilabel>DIS Listener</guilabel> view&apos;s drop-down menu is a <guilabel>Log Messages</guilabel> toggle button. When this is selected, Debrief will log all messages to the Debrief system log. This log can be accessed via the <guilabel>Window / Show View / Error Log</guilabel> menu option. The <filename>.log</filename> file is chunked into 1Mb files, and is stored in the hidden <filename>.DebriefNG/.metadata</filename> folder within your home directory. To remind the user about this logging (with its associated performance and disk usage penalty), the <guilabel>Scenario Complete</guilabel> popup dialog includes a reminder that logging is active, when relevant.</para>
        </sect2>
        <sect2 xml:id="PerfGraph">
          <title>Performance graph</title>
          <para> At the foot of the <guibutton>DIS Listener View</guibutton> is a performance graph. When a simulation is being listened to, this graph updates once per second. It shows two lines. One is the frequency at which simulation messages are being received, and the second is the frequency of screen updates. As more data is received, and shown on the plot, the frequency of screen updates will slow down. </para>
          <para> Inspection of this graph can give the analyst an indication of whether the simulator is running, how quickly it is running, and how Debrief is handling the volume of loaded data. </para>
        </sect2>
      </sect1>
      <sect1 xml:id="dis_tips">
        <title>DIS Tips &amp; Tricks</title>
        <indexterm>
          <primary>DIS</primary>
          <secondary>Tips &amp; Tricks</secondary>
        </indexterm>
        <sect2 xml:id="FormatParameters">
          <title>Specifying format parameters in advance</title>
          <para> In early 2016 Debrief received the ability to provide format instructions in a REP file, as in the following example. <programlisting>
;FORMAT_FIX: 10_min_sym SYMBOL NULL NULL TRUE 600000 
;FORMAT_FIX: 30_min_lab LABEL NULL NULL TRUE 1800000 
;FORMAT_FIX: 15_sec_arr ARROW NELSON NULL TRUE 900000 
;FORMAT_TRACK_NAME_AT_END: name_at_end
;FORMAT_LAYER_HIDE: hide_dis_6  DIS_6
              </programlisting> Use of these instructions will save effort re-applying formatting to each new model run. </para>
        </sect2>
        <sect2 xml:id="RunningDis">
          <title>Running Debrief&apos;s DIS simulator</title>
          <para> To aid development of the new DIS integration capability, a very simple simulator was developed that was capable of sending out messages in DIS format. This tool has now been included in Debrief, to help users get started with (or just play) with Debrief&apos;s DIS integration. </para>
          <para> The simple simulator can be started using the script file that is contained in the <filename>Sample Data / Other formats</filename> folder. Just assign the <filename>sender.sh</filename> or <filename>sender.bat</filename> as the executable in the <guimenu>Server preferences</guimenu> page, and use <filename>control.inp</filename> as the simulation input file. </para>
        </sect2>
        <sect2 xml:id="dis_console">
          <title>Track the simulator using the Console</title>
          <para>If you simulator outputs message to the command line, you may be used to always running the simulator from a command prompt - so that you can track any error / status message returned. But, you can use the Show Console button in the DIS Listener View to open the console, as shown below.<mediaobject>
              <imageobject>
                <imagedata align="center" fileref="figures/DisConsoleUI.png" width="60%"/>
              </imageobject>
            </mediaobject></para>
        </sect2>
      </sect1>
    </chapter>
  </part>

  <!-- ********************************************************************** -->

  <!-- ********************************************************************** -->

  <!--   Maintainers                                                         -->

  <!-- ********************************************************************** -->

  <part xml:id="maintainers_guide">
    <title>Maintainer&apos;s Guide</title>

    <partintro xml:id="more_maintainers">
      <para>This section will give you all you need to look after a collection of Debrief installations, from fault-finding through to optimising the installations used.</para>
    </partintro>

    <chapter xml:id="participating">
      <title>Participating in Debrief development</title>

      <sect1 xml:id="debrief_online">
        <title>Debrief online</title>

        <para>Whilst the use of <application>Debrief</application> originated at the <glossterm linkend="g_MWC">MWC</glossterm>, it now has a very distributed community of users. Communication across this distributed user-group is enabled via the Internet through three mechanisms: the Debrief home page, the SourceForge project management page, and the Debrief news list. These mechanisms are described in this chapter.</para>

        <para>The <application>Debrief</application> web-site, found at <link xlink:href="http://www.debrief.info" xmlns:xlink="http://www.w3.org/1999/xlink">http://www.debrief.info</link> provides an introduction to <application>Debrief</application>, together with access to this tutorial and a <emphasis>way-in</emphasis> to getting started with Debrief. <figure xml:id="Debrief_Home_Page">
            <title>Debrief home page</title>

            <screenshot>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/debrief_home.png" width="100%"/>
                </imageobject>
              </mediaobject>
            </screenshot>
          </figure></para>

        <para>The <application>SourceForge.net</application> page, used to support the project management of Debrief, is described later in <xref linkend="debrief_feedback"/>, and the <application>Debrief</application> news list is described in the next section, <xref linkend="debrief_news"/>.</para>
      </sect1>

      <sect1 xml:id="debrief_news">
        <title>Keeping up to date</title>
        <para>It&apos;s easy to keep up to date with what&apos;s happening in Debrief. You can find out about new bugs, software changes, and formal software releases using one of these methods:</para>
        <sect2 xml:id="Twitter">
          <title>Twitter</title>
          <para>Twitter fans just have to follow the <link xlink:href="https://twitter.com/debrieftool">@debrieftool</link> account.</para>
        </sect2>
        <sect2 xml:id="Email">
          <title>Email</title>
          <para>Alternatively, you can navigate to Debrief&apos;s <glossterm linkend="g_github">GitHub</glossterm> site (<link xlink:href="https://github.com/debrief/debrief">https://github.com/debrief/debrief</link> ), and then either <emphasis>Star</emphasis> the page to hear high level announcements, or <emphasis>Watch</emphasis> the page to hear all the gory detail. Learn more about the options <link xlink:href="https://help.github.com/articles/watching-repositories">here</link>.</para>
        </sect2>
      </sect1>

      <sect1 xml:id="debrief_at_mwc">
        <title>Debrief at the Maritime Warfare Centre</title>

        <para>This section provides guidance on maintenance of Debrief installations for users on the Maritime Warfare Centre network.</para>

        <sect2 xml:id="install_debrief">
          <title>Installing Debrief</title>

          <para>The IT Support department should be approached to conduct fresh <application>Debrief</application> installations. The most up-to-date Debrief installer is located at <filename>//File-Share/Operational Analysis/collaborative/application/debrief/InstallDebrief.exe</filename>.</para>
        </sect2>

        <sect2 xml:id="debrief_up_to_date">
          <title>Keeping your Debrief installation up to date</title>

          <para>The development of the Debrief application is ongoing throughout the year. Occasionally particular users have new requirements, or bugs are found. Normally, only users working in related areas are informed about new features or minor bugs that only occur when performing that particular type of analysis. Where new features relate to users across MWC, or where a significant bug is fixed, e-mails are sent out to the Debrief user mailing list (see <xref linkend="debrief_news"/>).</para>

          <sidebar>
            <formalpara>
              <title>Debrief Users mailing list</title>

              <para>On the MWC network mailing lists have been set up to allow e-mails to quickly be addressed to a group of users. One such list is the <emphasis>Debrief Users</emphasis> list. When you start using <application>Debrief</application> it is worth contacting IT Support to have your name added to the list - then you know you will be informed of any significant changes to Debrief.</para>
            </formalpara>
          </sidebar>

          <para>Don&apos;t worry about always having the newest version of <application>Debrief</application>. Most software changes only apply to a small portion of the software and don&apos;t justify the upgrade effort. If, however, a Debrief fix applies specifically to your work, you should follow these steps to upgrade your Debrief installation:<orderedlist xml:id="search_software_updates_internet">
              <title>Searching for software updates</title>

              <listitem>
                <para>Select <guimenu>Help</guimenu>/<guimenu>Software Updates</guimenu>/<guimenu>Find and install</guimenu>.</para>
              </listitem>

              <listitem>
                <para>Select <guibutton>Search for updates of the currently installed features</guibutton>, then <guibutton>Next</guibutton>.</para>
              </listitem>

              <listitem>
                <para>Follow the instructions provided to view what updates are available, select any relevant ones (though you can&apos;t really go wrong in retrieving all of them), and install them. Easy.</para>
              </listitem>
            </orderedlist></para>

          <para>Now, Debrief may now have found any updates. Hey, maybe there weren&apos;t any. But maybe Debrief&apos;s not looking in the right place. If no updates are found, follow these steps to ensure the MWC download server is configured:<orderedlist>
              <listitem>
                <para>Select <guimenu>Help</guimenu>/<guimenu>Software Updates</guimenu>/<guimenu>Find and install</guimenu>.</para>
              </listitem>

              <listitem>
                <para>Select <guibutton>Search for new features to install</guibutton></para>
              </listitem>

              <listitem>
                <para>You will see a list of download sites. If there isn&apos;t one with a name you associate with MWC, select <guibutton>New Local Site...</guibutton>.</para>
              </listitem>

              <listitem>
                <para>A file dialog will open. From it, enter <filename>Network Neighbourhood </filename>, and navigate to <filename>//Needles/Operational Analysis/collaborative/applications/Debrief/Updates</filename>. Then press <guibutton>OK</guibutton> and name the local site as <userinput>MWC Updates</userinput>. Accept this. Now, from the list of update sites, ensure <userinput>MWC Updates</userinput> is ticked, but not the others (since they rely on an internet connection).</para>
              </listitem>

              <listitem>
                <para>Now you should be able to perform the search for software updates again (see <xref linkend="search_software_updates"/>).</para>
              </listitem>
            </orderedlist></para>
        </sect2>
      </sect1>

      <sect1 xml:id="debrief_on_internet">
        <title>Debrief across the Internet</title>

        <para>This section provides guidance on maintenance of Debrief installations for users with world wide web (Internet) access.</para>

        <sect2 xml:id="more_install_debrief">
          <title>Installing Debrief</title>

          <para>Debrief can be downloaded via the downloads page at the Debrief site (<link xlink:href="http://sf.net/projects/debrief" xmlns:xlink="http://www.w3.org/1999/xlink">http://sf.net/projects/debrief</link>). Be warned, because the full install is getting on for 150 Mb in size. If you aren&apos;t able to perform such a download, or you need a formal copy for your IS/IT department please send an e-mail request to the project manager (see <xref linkend="contact_details"/>), and a CD-based copy will be forwarded to you via snail mail.</para>
        </sect2>

        <sect2 xml:id="debrief_install_up_to_date">
          <title>Keeping your Debrief installation up to date</title>

          <para>The development of the Debrief application is ongoing throughout the year. Occasionally particular users have new requirements, or bugs are found. Normally, only users working in related areas are informed about new features or minor bugs that only occur when performing that particular type of analysis. Where new features relate to a wide body of users , or where a significant bug is fixed, e-mails are sent out to the Debrief user mailing list.</para>

          <para>Don&apos;t worry about always having the newest version of <application>Debrief</application>. Most software changes only apply to a small portion of the software and don&apos;t justify the upgrade effort. If, however, a Debrief fix applies specifically to your work, you should follow these steps to upgrade your Debrief installation:<orderedlist xml:id="search_software_updates">
              <title>Searching for software updates</title>

              <listitem>
                <para>Select <guimenu>Help</guimenu>/<guimenu>Software Updates</guimenu>/<guimenu>Find and install</guimenu>.</para>
              </listitem>

              <listitem>
                <para>Select <guibutton>Search for updates of the currently installed features</guibutton>, then <guibutton>Next</guibutton>.</para>
              </listitem>

              <listitem>
                <para>Follow the instructions provided to view what updates are available, select any relevant ones (though you can&apos;t really go wrong in retrieving all of them), and install them. Easy.</para>
              </listitem>
            </orderedlist></para>

          <para>Now, Debrief may now have found any updates. Hey, maybe there weren&apos;t any. But maybe Debrief&apos;s not looking in the right place. If no updates are found, follow these steps to ensure the Debrief update server is configured:<orderedlist>
              <listitem>
                <para>Select <guimenu>Help</guimenu>/<guimenu>Software Updates</guimenu>/<guimenu>Find and install</guimenu>.</para>
              </listitem>

              <listitem>
                <para>Select <guibutton>Search for new features to install</guibutton></para>
              </listitem>

              <listitem>
                <para>You will see a list of download sites. If there isn&apos;t one with a name you associate with Debrief, select <guibutton>New Remote Site...</guibutton>.</para>
              </listitem>

              <listitem>
                <para>A file dialog will open. In it, enter <filename>Debrief update site</filename> for the Name, and <filename>http://debrief.sourceforge.net/eclipse/</filename> for the URL. Now, from the list of update sites, ensure <userinput>Debrief update site</userinput> is ticked, but not the others (since they rely on an internet connection).</para>
              </listitem>

              <listitem>
                <para>Now you should be able to perform the search for software updates again (see <xref linkend="search_software_updates"/>).</para>
              </listitem>
            </orderedlist></para>
        </sect2>
      </sect1>

      <sect1 xml:id="debrief_feedback">
        <title>Providing feedback</title>

        <para>In addition to the <application>Debrief</application> web-site, the <application>Debrief</application> project makes use of <application>SourceForge</application> and <glossterm linkend="g_github">GitHub</glossterm>, online development web-sites <indexterm>
            <primary>SourceForge</primary>
            <secondary>Providing Feedback</secondary>
          </indexterm> that provide us with bug-tracking, file download support, and news groups. Since 2014, Github (<link xlink:href="https://github.com">https://github.com/debrief/debrief</link>) has taken over the bug-reporting and feature requests, with SourceForge (<link xlink:href="https://sf.net">http://sf.net</link>) just responsible for downloads.</para>

        <figure xml:id="sf.net_home_page">
          <title>Debrief&apos;s home page at GitHub</title>

          <screenshot>
            <mediaobject>
              <imageobject>
                <imagedata fileref="figures/github_home.png" width="100%"/>
              </imageobject>
            </mediaobject>
          </screenshot>
        </figure>

        <para>From the screenshot of the GitHub home page for <application>Debrief</application> you can see a list of the services it provides, ranging from discussion forums, through bug and feature-request trackers</para>

        <sect2 xml:id="debrief_bugs">
          <title>Reporting bugs</title>

          <para><indexterm>
              <primary>Bugs</primary>
              <secondary>Submitting</secondary>
            </indexterm> To report a bug, or a feature which you believe is behaving incorrectly, you must first register at <link xlink:href="https://github.com">www.GitHub.com</link>. Once registered, you can navigate to the <link xlink:href="https://github.com/debrief/debrief/issues">Debrief Issues</link> page, click on the &apos;New Issue&apos; button, and submit a request for a bug-fix or new features. The items are then tracked, and provided an e-mail address was provided, the submitter is kept informed of the progress of the submission.</para>

          <para>The following screenshot shows the form used to submit bugs. Don&apos;t worry if you&apos;re not quite sure if the bug is actually intended behaviour, or if you&apos;re unsure whether a proposed new feature would &apos;make the cut&apos;. Once your request is emailed it&apos;s recorded on the system and an informed debate/discussion can follow. This ensures requests don&apos;t fall through the cracks.</para>

          <para><figure xml:id="bug_reporting_page">
              <title>GitHub Issue Reporting page</title>

              <screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/GitHub_NewIssue.png" width="100%"/>
                  </imageobject>
                </mediaobject>
              </screenshot>
            </figure></para>

          <para>Once you have submitted the report, you should receive an e-mail confirmation of the bug-report, followed by an e-mail from the Project Manager (see <xref linkend="contact_details"/>), normally containing a time-frame for resolution of the bug.</para>
        </sect2>

        <sect2 xml:id="debrief_features">
          <title>Requesting new features</title>

          <para>The procedure for <indexterm>
              <primary>SourceForge</primary>
              <secondary>Requesting new features</secondary>
            </indexterm>requesting new features is much the same as for <xref linkend="debrief_bugs"/>, described above. The time-frame for resolution of feature-requests is normally larger than for bugs, but if maintenance effort is being performed in a related area of <application>Debrief</application>, and the Project Sponsor (see <xref linkend="contact_details"/>) is supportive, then the new feature should get added quite quickly.</para>
        </sect2>
      </sect1>
    </chapter>

    <chapter xml:id="maintainers">
      <title>Debrief maintainer&apos;s guide</title>

      <sect1 xml:id="more_maintainers_guidance">
        <title>Installation guidance</title>

        <sect2 xml:id="more_install_guidance">
          <title>System requirements</title>

          <para><table xml:id="debrief_reqts">
              <title>Requirements for <application>Debrief</application></title>

              <tgroup cols="3">
                <thead>
                  <row>
                    <entry><para>Requirement</para></entry>

                    <entry><para>Minimum</para></entry>

                    <entry><para>Recommended</para></entry>
                  </row>
                </thead>

                <tbody>
                  <row>
                    <entry><para>Processor</para></entry>

                    <entry><para>800 MHz</para></entry>

                    <entry><para>1400 MHz</para></entry>
                  </row>

                  <row>
                    <entry><para>Memory</para></entry>

                    <entry><para>256 Mb</para></entry>

                    <entry><para>1024 Mb</para></entry>
                  </row>

                  <row>
                    <entry><para>Java Virtual Machine</para></entry>

                    <entry><para>JVM 1.5</para></entry>

                    <entry><para>As new as possible. JVM 1.5 includes significant performance improvements, particularly in the list processing used extensively within Debrief</para></entry>
                  </row>

                  <row>
                    <entry><para>XML Libraries</para></entry>

                    <entry><para>SAX and DOM support (through the enclosed jaxp.jar and parser.jar libraries)</para></entry>

                    <entry><para/></entry>
                  </row>

                  <row>
                    <entry><para>OpenMap libraries (used for plotting NIMA&apos;s Vector Map data)</para></entry>

                    <entry><para>4.2.1 (through the enclosed openmap.jar library)</para></entry>

                    <entry><para/></entry>
                  </row>
                </tbody>
              </tgroup>
            </table></para>
        </sect2>

        <sect2 xml:id="RightClickIntegration">
          <title>Implementing &apos;open with&apos; support for DebriefNG</title>

          <para>Since Winter 2010, DebriefNG can be opened by <indexterm>
              <primary>Right-clicking</primary>
            </indexterm> on a Debrief data file (rep (<xref linkend="replay_file_format"/>) or DPF (<xref linkend="debrief_file_format"/>)). But, first DebriefNG must be associated with files of that file-type, via Windows Explorer. Do this as follows<footnote>
              <para>Note, across the range of versions of MS Windows a variety of user interface phrases exist. The steps in this process contain the text that will loosely match that which you&apos;ll see</para>
            </footnote>:<orderedlist>
              <listitem>
                <para>Open Windows Explorer</para>
              </listitem>

              <listitem>
                <para>Navigate to a Debrief <filename>REP</filename> file</para>
              </listitem>

              <listitem>
                <para>Right-click on the file and select &apos;Open With&apos;</para>
              </listitem>

              <listitem>
                <para>Now browse to the DebriefNG.exe executable, typically contained in the <filename>c:\DebriefNG</filename>. You may also wish to select &apos;<guilabel>Always use this application</guilabel>&apos;.</para>
              </listitem>

              <listitem>
                <para>Now repeat this process for a Debrief <filename>dpf</filename> file , you can select &apos;<guilabel>Always use this application</guilabel>&apos; - since dpf files aren&apos; used by many applications. Debrief did use the <filename>xml</filename> suffix, but that related to lots of files - so in Oct 2014 we adopted <filename>.dpf</filename>. </para>
              </listitem>
            </orderedlist></para>
        </sect2>

        <sect2 xml:id="more_directory_structure">
          <title>Directory structure</title>

          <para>Debrief installs itself into a <filename>Debrief NG</filename> folder in the top level of your C:\ drive.. Within the Debrief NG folder you will find the DebriefNG executable in the top-level, together with some additional <filename>dll</filename> files used for optimised graphics (<filename>gdiplus.dll</filename>), and copy to clipboard (<filename>JavaClipboard.dll</filename>).</para>

          <para>The <filename>configuration</filename> folder contains details of Debrief&apos;s initial settings together with the locations of update download sites.</para>

          <para>The <filename>features</filename> and <filename>plugins</filename> folders include details of what Eclipse plugins are present (where each feature is actually a group of plugins), together with the plugins themselves. The <filename>workspace</filename> folder is a default workspace provided for new users. It contains current work projects together with a large volume of metadata representing change history, screen layout and user preferences.</para>
        </sect2>

        <sect2 xml:id="mulit_user">
          <title>Multi-user Debrief installation</title>

          <para>The conventional way of installing Debrief is for each user to have their own copy, maintaining their own sets of plugins and updates (as above). There is an alternate installation scenario, however - for all users to share a common Debrief installation. An advantage of this scenario is that software updates only need to be performed once, at the central location. By default, however, shared installations are troublesome for Debrief - since all users will be looking at a single set of settings - so administrator participation is necessary.</para>

          <para>Whilst a number of theoretical solutions exist for this problem, the most reliable solution to emerge is to force Debrief NG to use the workspace in the users own login directory (since each user has a unique login directory). This also overcomes the challenge of new users having to select a workspace before they know what a workspace is.</para>

          <para>Thus, the Debrief shortcut (.ini file) has been modified to explicitly indicate that the workspace is in the a folder in the user login area:<screen>-data
@user.home/.DebriefNG</screen>The &apos;.&apos; character before the DebriefNG folder name follows a convention that is normally sufficient to make the operating system make the folder hidden by default.<tip>
              <para>When users are upgrading from older versions of DebriefNG, the application will ignore the last workspace location, and load a new, blank workspace from the new user directory. If the user now closes Debrief the workspace data can be copied from the old location into the new location, which will get read when the application re-opens.</para>
            </tip></para>
        </sect2>

        <sect2 xml:id="CentralUpdates">
          <title>Centralised software updates</title>

          <para>In the Autumn 2009 updates Debrief adopted the Eclipse p2 <emphasis>update</emphasis> mechanism. With this update came support for centralised updates. Centralised updates allow updated Debrief components to be placed at a central location on shared network storage, with individual Debrief installations automatically updating from it.</para>

          <para>Start by locating a central shared folder, and creating a <emphasis>Repository</emphasis> folder in it. This is where your Debrief maintainer will unzip Debrief updates. Next, you must tell the individual Debrief installations where the repository is. Do this from the <guilabel>Preferences</guilabel>
            <guilabel>Install/Update</guilabel>
            <guilabel>Available Software Sites</guilabel> dialog:<figure xml:id="ReposLocation">
              <title>Repository location dialog</title>

              <screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/ReposLocation.png" width="100%"/>
                  </imageobject>
                </mediaobject>
              </screenshot>
            </figure></para>

          <para>Then, to update a Debrief installation select <emphasis>Check for updates</emphasis> from the <emphasis>Help</emphasis> menu. Note, the <emphasis>Install/Updates</emphasis> section of Debrief preferences also includes options for automatic software updates.</para>
        </sect2>

        <sect2 xml:id="starting_debrief">
          <title>Starting the program</title>

          <para>The shortcut placed on the <guimenu>Start|Program Files|Debrief NG</guimenu> menu actually calls the <filename>DebriefNG.exe</filename> file found in the startup directory. This application triggers the startup of Debrief, passing to it the parameters contained in the <filename>DebriefNG.ini</filename> file. This file contains options to select the initial perspective, the memory allocation, and additional files to include on the classpath.</para>
        </sect2>

        <sect2 xml:id="UseOfEnglishLocale">
          <title>Use of English locale</title>

          <para>Note that Debrief fails when on an machine set to a non-English locale, such as French(Canada). The application cannot read data-files correctly, nor can it populate screen editors. The workaround to this problem is to explicitly direct Debrief to startup using an English locale. Do this by launching Debrief with the "-nl en" command parameter. This can be performed either by modifying the shortcut used to start Debrief, or by adding the command parameter to the <filename>Debrief.ini</filename> configuration file (though this will have to be re-performed after each Debrief update).</para>
        </sect2>
      </sect1>

      <sect1 xml:id="fault_diagnosis">
        <title>Fault-diagnosis instructions</title>

        <sect2 xml:id="more_fault_diagnosis">
          <title>How-to</title>

          <para>With the adoption of the Eclipse framework, <application>Debrief</application> enjoys the benefits of the Eclipse configuration and logging engine. Debrief uses this for information, warning, and error reporting.</para>

          <para>Details of an individual Debrief NG installation can be obtained by selecting <guimenuitem>About Debrief NG</guimenuitem> from the <guimenu>Help</guimenu> menu. From the dialog that opens, select <guibutton>Installation Details</guibutton>. This will open a text dialog providing the following information:<itemizedlist>
              <listitem>
                <para>Date stamp</para>
              </listitem>

              <listitem>
                <para>System properties (about the Java and OS environments)</para>
              </listitem>

              <listitem>
                <para>Plug-in registry (plug-ins and fragments - ids, versions, and names)</para>
              </listitem>

              <listitem>
                <para>Update manager log</para>
              </listitem>

              <listitem>
                <para>Current error log contents</para>
              </listitem>
            </itemizedlist></para>

          <para>In addition to these configuration details is a button to <guibutton>View Error Log</guibutton>. The Error Log is a continuous stream of comments recorded by Debrief - typically comments that are not of value to a typical user under normal usage. The log itself is called <filename>.log</filename> and is located in the <filename class="directory">workspace/metadata</filename> folder within your Workspace (initially, this is within your Debrief NG installation directory).</para>

          <para>Th error log may be examined for hints to the problem occurring. The error trace may be viewed in a text editor, and may be forwarded back to the Project Manager (see <xref linkend="contact_details"/>) via post/e-mail/fax as applicable. The file does not contain any details of the data being edited, but the file may still be inspected before transmission</para>

          <para>If these error messages do not provide any insight to the problem, you are left with the normal diagnosis steps as follows: <itemizedlist>
              <listitem>
                <para>Try to run another Java application on the machine, to check that Java is not corrupted</para>
              </listitem>

              <listitem>
                <para>If Java is ok then, <itemizedlist>
                    <listitem>
                      <para>Check that Debrief can open and process the "sample" files included in the installation: boat1.rep and boat2.rep.</para>
                    </listitem>

                    <listitem>
                      <para>If Debrief can process these files, but not the current ones then <itemizedlist>
                          <listitem>
                            <para>Try to re-install the Debrief application from &apos;save&apos; disks to check that the sources are not corrupted</para>
                          </listitem>

                          <listitem>
                            <para>If at this point the error is still occurring then you will have to resort to reading as much of this Help guidance as practical, and then contacting the Project Manager (see <xref linkend="contact_details"/>).</para>
                          </listitem>
                        </itemizedlist></para>
                    </listitem>
                  </itemizedlist></para>
              </listitem>
            </itemizedlist></para>
        </sect2>
      </sect1>
      <sect1 xml:id="ChartStorage">
        <title>Storing Chart Folios</title>
        <para>As well as supporting the drag/drop (see <xref linkend="loadCharts"/>) of chart data directly into a Debrief plot, Debrief supports the concept of a Chart Folio<indexterm>
            <primary>Charts</primary>
            <secondary>Configuring</secondary>
          </indexterm>. Such a chart folio must adhere to specific layout conditions in order for Debrief to understand it.</para>
        <para>
          <variablelist>
            <varlistentry>
              <term>Folder</term>
              <listitem>
                <para>The chart folio is contained in a single folder, with the folder named according to the geographic area covered (since this is the name offered to the user)</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Shapefile</term>
              <listitem>
                <para>The folder must contain a shapefile named <filename>rasterExtents_ARCS_Export.shp</filename></para>
                <para>. This shapefile must contain a series of rectangle geometries - one for each chart in the folio. Each rectangle must have a property named <filename>the_geom</filename> that contains the coordinates, and one called <filename>Name</filename> that contains the filename of the respective chart.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Chart images</term>
              <listitem>
                <para>The folder must also contain a series of Tif images with supporting .prj sidecar files. (Note: the folios received from UKHO in Autumn 2011 do not contain sidecar fiels. Debrief generates the missing sidecar files as necessary. This is acceptable for UKHO charts, which follow a particular standard - one cannot assume it non UKHO charts follow the same standard).</para>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
      </sect1>

      <sect1 xml:id="debrief_props">
        <title xml:id="debrief_props_title">Debrief properties</title>

        <sect2 xml:id="more_deb_props">
          <title>Introduction</title>

          <para>Whilst Debrief used to use a dedicated settings file, the settings have now been incorporated into the general framework of the application - with context sensitive help available where applicable.</para>
        </sect2>
      </sect1>
      <sect1 xml:id="xml_ppt">
        <title>Master template for export scenario to <indexterm><primary>PowerPoint</primary><secondary>Master template format</secondary></indexterm>PowerPoint</title>
        <sect2>
          <title>Introduction</title>
          <para>In Summer 2018 the ability to export an engagement/scenario to MS PowerPoint was introduced. In the past analysis had captured engagement to video, then included this video in a presentation. Hey, in the far distant past export video was a capability build into Debrief - though it as dropped since Debrief wasn&apos;t able to compress the videos, and they were huge.</para>
          <para>The new strategy involves capturing the screen coordinates of scenario participants while Debrief is playing through an engagement, then injecting them as an animation into a specially formatted donor PowerPoint file.</para>
          <para>This section will introduce the donor template file, and how to collate/maintain it.</para>
          <para>The donor file includes the following elements (named as specified), used as in the image below it: <variablelist xml:id="donor_elements" spacing="compact">
              <title>Designated elements in template file</title>
              <varlistentry>
                <term>Map Frame</term>
                <listitem>
                  <para>Frame into which the chart is plotted. (Rectangle shape named <code>map</code>)</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>Vehicle Marker</term>
                <listitem>
                  <para>Marker to indicate current platform location (with platform name). (Callout named <code>marker</code>)</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>Vehicle track</term>
                <listitem>
                  <para>Marker that is used to build up historic platform track. (Line named <code>track</code>.)</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>Narrative Events</term>
                <listitem>
                  <para>List of visible narrative/diary events, populated as time progresses. (Line named <code>narrative</code>.)</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>Current Time</term>
                <listitem>
                  <para>Current scenario time. (Text element named <code>time</code>.)</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>Footprint</term>
                <listitem>
                  <para>Footprint to indicate the steps of the past plataform's positions. (Object named <code>footprint</code>)</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>Scale Value</term>
                <listitem>
                  <para>Text value that indicates that distance. (Object named <code>ScaleValue</code>)</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>Scale Bar</term>
                <listitem>
                  <para>This will consist of a rectangle, with width sized according to a particular distance. (Object named <code>ScaleBar</code>)</para>
                </listitem>
              </varlistentry>
            </variablelist>
            <figure xml:id="TemplateEntries">
              <title>Elements of master template</title>
              <screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/MasterTemplate2.png" width="100%"/>
                  </imageobject>
                </mediaobject>
              </screenshot>
            </figure>
          </para>
          <para> The use of this template allows an analyst&apos;s parent organisation to design a template that includes corporate branding, in order that the animated engagement tidily integrates into an outer presentation. </para>
        </sect2>
        <sect2 xml:id="PPTX_FolderStructure">
          <title>Folder structure</title>
          <para>A <filename>pptx</filename> file is actually a renamed <filename>zip</filename> archive. The archive contains a series of folders/files, of which we are interested in two: <figure xml:id="PPTX_FolderStructureDiag">
              <title>PowerPoint folder structure</title>
              <screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/FolderStructure.png" width="100%"/>
                  </imageobject>
                </mediaobject>
              </screenshot>
            </figure>
            <variablelist spacing="compact">
              <varlistentry>
                <term>Overall presentation</term>
                <listitem>
                  <para>This document contains metadata relating to the whole presentation, including the slide dimensions. The slide dimensions are signficant since some element positioning is performed relative to the size of the slide<screenshot>
                      <mediaobject>
                        <imageobject>
                          <imagedata fileref="figures/SlideDimensions.png" width="100%"/>
                        </imageobject>
                      </mediaobject>
                    </screenshot>
                  </para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>Master slide</term>
                <listitem>
                  <para>This is the document that represents the specific slide that we&apos;re writing into, and it contains the named elements detailed above in <xref linkend="donor_elements"/></para>
                </listitem>
              </varlistentry>
            </variablelist>
          </para>
        </sect2>
        <sect2>
          <title>Master slide</title>
          <para>Significant elements in the master slide are denoted using their <code>name</code> attribute: <screenshot>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/ElementName.png" width="100%"/>
                </imageobject>
              </mediaobject>
            </screenshot> The donor file is built using the following process: <orderedlist>
              <listitem>
                <para>Create a one-slide presentation that contains the elements described in the earlier table</para>
              </listitem>
              <listitem>
                <para>Rename the .<filename>pptx</filename> file to .<filename>zip</filename></para>
              </listitem>
              <listitem>
                <para>Expand the zip-file into a new folder (probably via right-click)</para>
              </listitem>
              <listitem>
                <para>Navigat to the slide1.xml file, located in the folder as detailed above in <xref linkend="PPTX_FolderStructure"/></para>
              </listitem>
              <listitem>
                <para>Work through each required element, naming the relevant xml element using the ids listed earlier. Finding the relevant elements in the XML file can be made easier by inserting recognisable blocks (<emphasis>Trumpton</emphasis>) of text into the element using PowerPoint, then looking for that text in the XML editor.</para>
              </listitem>
              <listitem>
                <para>Re-package the folder into a zip-file</para>
              </listitem>
              <listitem>
                <para>Rename the .<filename>zip</filename> file back to .<filename>pptx</filename></para>
              </listitem>
            </orderedlist>
          </para>
          <para>One the master slide has been produced, use Debrief preferences to indicate its location: <screenshot>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/DonorPreference.png" width="100%"/>
                </imageobject>
              </mediaobject>
            </screenshot>
          </para>
          <para>Note the <emphasis>Map element dimensions</emphasis> attribute in the above screenshot. Once a master template has been specified, the map element dimensions are retrieved. This is to allow the analyst to size the Debrief plot to the same dimensions, which will ensure the highest quality animated export - since the Debrief Plot and the target rectangular frame will be of identical proportions.</para>
        </sect2>
      </sect1>
    </chapter>
  </part>

  <!-- ********************************************************************** -->

  <!-- ********************************************************************** -->

  <!--   Reference                                                           -->

  <!-- ********************************************************************** -->

  <!-- ********************************************************************** -->

  <part xml:id="reference_guide">
    <title>Reference Guide</title>

    <partintro xml:id="ref_guide_intro">
      <para>If the tutorial hasn&apos;t provided you with all of the answers you need, just have a look at the pages here in the Reference Guide.</para>
    </partintro>

    <chapter xml:id="reference">
      <title>Debrief file formats</title>

      <sect1 xml:id="replay_file_format">
        <title>Replay file format</title>

        <sect2 xml:id="replay_track_format">
          <title>Track data</title>

          <para><application>Debrief</application> accepts files in the <indexterm>
              <primary>Replay file format</primary>
            </indexterm><indexterm>
              <primary>File Format</primary>
              <secondary>Replay</secondary>
            </indexterm>
            <application>Replay</application> datafile format. This format uses an character string containing data/time, vessel name, position, heading, depth and speed. More than one vessel track can be stored in each file. The gaps between the data fields can be any whitespace characters, that is any number of spaces or tabs, but there must be a value for each data field. <note>
              <para>Whilst file formats recorded here are shown against an 80 character index marker - the fields can be of any width - the data is broken down using delimiters, not fixed field widths.</para>
            </note></para>

          <para>The file-naming convention for files in the <glossterm linkend="g_replay">Replay</glossterm> format is to have a <filename>.REP</filename> suffix.</para>

          <para>Through an extension to the format, annotation data can also be accepted. The annotation data format is described below. Whilst annotation and track data may be stored in single file, it is recommended that they are stored in separate files, to ease reading and plotting track-data only.</para>

          <para>The standard data format is as follows:<screen>            <markup>
1234567890123456789012345678901234567890123456789012345678901234567890123456789
YYMMDD HHMMSS.SSS XXXXXX SY DD MM SS.SS H DDD MM SS.SS H CCC.C SS.S DDD xx...xx
            </markup> </screen>or since Autumn 2004 multi-word track names can be entered by enclosing them in double-quotation marks (") and 4-figure year values are supported: <screen xml:id="quoted_track_names">            <markup>
12345678901234567890123456789012345678901234567890123456789012345678901234567890
YYYYMMDD HHMMSS.SSS "XYX XYX XYX" SY DD MM SS.SS H DDD MM SS.SS H CCC.C SS.S DDD xx...xxx
            </markup>      </screen></para>

          <para>The field descriptions are: <table frame="all" xml:id="debrief_position_structure">
              <title>Fields in Debrief position entry</title>

              <tgroup cols="2">
                <colspec colname="col01" colnum="1" colwidth="1.00*"/>

                <colspec colname="col1" colnum="2" colwidth="4.5*"/>

                <thead>
                  <row>
                    <entry><para>Field number</para></entry>

                    <entry><para>Description</para></entry>
                  </row>
                </thead>

                <tbody>
                  <row>
                    <entry><para>1</para></entry>

                    <entry><para>Date, either 2 of 4 figure date, followed by month then date</para></entry>
                  </row>

                  <row>
                    <entry><para>2</para></entry>

                    <entry><para>Time</para></entry>
                  </row>

                  <row>
                    <entry><para>3</para></entry>

                    <entry><para>Vessel Name - either as single, unquoted word, or as a multi-word phrase enclosed in quotation marks.</para></entry>
                  </row>

                  <row>
                    <entry><para>4</para></entry>

                    <entry><para>Symbology (2 or 5 chars, see below)</para></entry>
                  </row>

                  <row>
                    <entry><para>5</para></entry>

                    <entry><para>Latitude Degrees (Debrief is able to handle decimal degrees - provide zeros for mins and secs)</para></entry>
                  </row>

                  <row>
                    <entry><para>6</para></entry>

                    <entry><para>Latitude Minutes (Debrief is able to handle decimal mins - provide zeros for secs)</para></entry>
                  </row>

                  <row>
                    <entry><para>7</para></entry>

                    <entry><para>Latitude Seconds</para></entry>
                  </row>

                  <row>
                    <entry><para>8</para></entry>

                    <entry><para>Latitude Hemisphere</para></entry>
                  </row>

                  <row>
                    <entry><para>9</para></entry>

                    <entry><para>Longitude Degrees (Debrief is able to handle decimal degrees - provide zeros for mins and secs)</para></entry>
                  </row>

                  <row>
                    <entry><para>10</para></entry>

                    <entry><para>Longitude Minutes (Debrief is able to handle decimal mins - provide zeros for secs)</para></entry>
                  </row>

                  <row>
                    <entry><para>11</para></entry>

                    <entry><para>Longitude Seconds</para></entry>
                  </row>

                  <row>
                    <entry><para>12</para></entry>

                    <entry><para>Longitude Hemisphere</para></entry>
                  </row>

                  <row>
                    <entry><para>13</para></entry>

                    <entry><para>Heading (0..359.9 degrees)</para></entry>
                  </row>

                  <row>
                    <entry><simpara>14</simpara></entry>

                    <entry><simpara>Speed (knots)</simpara></entry>
                  </row>

                  <row>
                    <entry><para>15</para></entry>

                    <entry><para>Depth (metres) <footnote>
                          <para>Where depth data is not available, the IEE symbol NaN (Not a Number) may be used. <application>Debrief</application> reflects the absence of this data where applicable.</para>
                        </footnote></para></entry>
                  </row>
                  <row>
                    <entry>16</entry>
                    <entry>Text label (optional). Any text appearing after the depth value is used as a label for that position. If no label is supplied a time-related label is generated. <emphasis>Note: since Jan 2018 it has been possible to also provide a comment. See <xref linkend="entry_comments"/></emphasis></entry>
                  </row>
                </tbody>
              </tgroup>
            </table></para>
        </sect2>

        <sect2 xml:id="replay_symbology">
          <title>Symbology attributes</title>

          <para><indexterm>
              <primary>Symbology data</primary>
            </indexterm>The symbology data field describes the representation required for this vessel track, specifying the colour of track to use and symbol-type to represent that vehicle. The Symbol style read in is used when tracks are to be shown by using symbol (in 2D or 3D). Control of when symbols are shown, and examples of the symbols are shown in <xref linkend="symbol_sets"/>. 
            <table xml:id="debrief_Sym_colors">
              <title>Debrief symbology color codes</title>
              <tgroup cols="4">
                <colspec colname="c3" colwidth="20%"/>
                <colspec colname="c4"/>
                <colspec colname="newCol3" colwidth="20%"/>
                <colspec colname="newCol4"/>
                <thead>
                  <row>
                    <entry nameend="newCol4" namest="c3">
                      <para>Colour</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>A</para>
                    </entry>
                    <entry>
                      <para>Blue</para>
                    </entry>
                    <entry>
                      <para>J</para>
                    </entry>
                    <entry>
                      <para>Light Green</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para>B</para>
                    </entry>
                    <entry>
                      <para>Green</para>
                    </entry>
                    <entry>
                      <para>K</para>
                    </entry>
                    <entry>
                      <para>Pink</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para>C</para>
                    </entry>
                    <entry>
                      <para>Red</para>
                    </entry>
                    <entry>
                      <para>L</para>
                    </entry>
                    <entry>
                      <para>Gold</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para>D</para>
                    </entry>
                    <entry>
                      <para>Yellow</para>
                    </entry>
                    <entry>
                      <para>M</para>
                    </entry>
                    <entry>
                      <para>Light Grey</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para>E</para>
                    </entry>
                    <entry>
                      <para>Magenta</para>
                    </entry>
                    <entry>
                      <para>N</para>
                    </entry>
                    <entry>
                      <para>Grey</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para>F</para>
                    </entry>
                    <entry>
                      <para>Orange</para>
                    </entry>
                    <entry>
                      <para>O</para>
                    </entry>
                    <entry>
                      <para>Dark Grey</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para>G</para>
                    </entry>
                    <entry>
                      <para>Purple</para>
                    </entry>
                    <entry>
                      <para>P</para>
                    </entry>
                    <entry>
                      <para>White</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para>H</para>
                    </entry>
                    <entry>
                      <para>Cyan</para>
                    </entry>
                    <entry>
                      <para>Q</para>
                    </entry>
                    <entry>
                      <para>Black</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para>I</para>
                    </entry>
                    <entry>
                      <para>Brown </para>
                    </entry>
                    <entry/>
                    <entry/>
                  </row>
                </tbody>
              </tgroup>
            </table>
            <table xml:id="debrief_Sym">
              <title>Debrief symbology symbol codes</title>
              <tgroup cols="4">
                <colspec colname="c1" colwidth="20%"/>
                <colspec colname="c2"/>
                <colspec colname="newCol3" colwidth="20%"/>
                <colspec colname="newCol4"/>
                <thead>
                  <row>
                    <entry nameend="c2" namest="c1">Internal Symbols</entry>
                    <entry namest="newCol3" nameend="newCol4">SVG Symbols</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>A</para>
                    </entry>
                    <entry>
                      <para>Aircraft</para>
                    </entry>
                    <entry>
                      <para>a</para>
                    </entry>
                    <entry>
                      <para>Merchant</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para>C</para>
                    </entry>
                    <entry>
                      <para>Carrier</para>
                    </entry>
                    <entry>
                      <para>b</para>
                    </entry>
                    <entry>
                      <para>Fishing</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para>D</para>
                    </entry>
                    <entry>
                      <para>Destroyer</para>
                    </entry>
                    <entry>
                      <para>c</para>
                    </entry>
                    <entry>
                      <para>Pleasure_craft</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para>F</para>
                    </entry>
                    <entry>
                      <para>Frigate</para>
                    </entry>
                    <entry>
                      <para>d</para>
                    </entry>
                    <entry>
                      <para>Coastguard law enforcement</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para>H</para>
                    </entry>
                    <entry>
                      <para>Helicopter</para>
                    </entry>
                    <entry>
                      <para>e</para>
                    </entry>
                    <entry>
                      <para>Friend Surface</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para>M</para>
                    </entry>
                    <entry>
                      <para>Merchant</para>
                    </entry>
                    <entry>
                      <para>f</para>
                    </entry>
                    <entry>
                      <para>Friend Subsurface</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para>N</para>
                    </entry>
                    <entry>
                      <para>Minesweeper</para>
                    </entry>
                    <entry>
                      <para>g</para>
                    </entry>
                    <entry>
                      <para>Neutral Air</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para>P</para>
                    </entry>
                    <entry>
                      <para>Torpedo</para>
                    </entry>
                    <entry>
                      <para>h</para>
                    </entry>
                    <entry>
                      <para>Neutral Surface</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para>R</para>
                    </entry>
                    <entry>
                      <para>Troop Carrier</para>
                    </entry>
                    <entry>
                      <para>i</para>
                    </entry>
                    <entry>
                      <para>Neutral Subsurface</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para>S</para>
                    </entry>
                    <entry>
                      <para>Submarine</para>
                    </entry>
                    <entry>
                      <para>j</para>
                    </entry>
                    <entry>
                      <para>Enemy Air</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para>T</para>
                    </entry>
                    <entry>
                      <para>TA Frigate</para>
                    </entry>
                    <entry>
                      <para>k</para>
                    </entry>
                    <entry>
                      <para>Enemy Surface</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para>U</para>
                    </entry>
                    <entry>
                      <para>Cruiser</para>
                    </entry>
                    <entry>
                      <para>l</para>
                    </entry>
                    <entry>
                      <para>Enemy Subsurface</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para>V</para>
                    </entry>
                    <entry>
                      <para>Fishing Vessel</para>
                    </entry>
                    <entry>
                      <para>m</para>
                    </entry>
                    <entry>
                      <para>Unknown Air</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para>@</para>
                    </entry>
                    <entry>
                      <para>Unknown</para>
                    </entry>
                    <entry>
                      <para>n</para>
                    </entry>
                    <entry>
                      <para>Unknown Surface</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para>I</para>
                    </entry>
                    <entry>
                      <para>Cross</para>
                    </entry>
                    <entry>
                      <para>o</para>
                    </entry>
                    <entry>
                      <para>Unknown Subsurface</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para>J</para>
                    </entry>
                    <entry>
                      <para>Square</para>
                    </entry>
                    <entry>
                      <para>p</para>
                    </entry>
                    <entry>
                      <para>Buoy_1</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para>K</para>
                    </entry>
                    <entry>
                      <para>Datum</para>
                    </entry>
                    <entry>
                      <para>q</para>
                    </entry>
                    <entry>
                      <para>Buoy_2</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para>L</para>
                    </entry>
                    <entry>
                      <para>Reference Position</para>
                    </entry>
                    <entry>
                      <para>r</para>
                    </entry>
                    <entry>
                      <para>Missile</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para>Q</para>
                    </entry>
                    <entry>
                      <para>Circle</para>
                    </entry>
                    <entry>
                      <para>s</para>
                    </entry>
                    <entry>
                      <para>Torpedo</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para>W</para>
                    </entry>
                    <entry>
                      <para>Wreck</para>
                    </entry>
                    <entry>
                      <para>t</para>
                    </entry>
                    <entry>
                      <para>Generic arrow</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para>E</para>
                    </entry>
                    <entry>
                      <para>Filled Square</para>
                    </entry>
                    <entry>
                      <para>u</para>
                    </entry>
                    <entry>
                      <para>Drop point</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para>G</para>
                    </entry>
                    <entry>
                      <para>Filled Circle</para>
                    </entry>
                    <entry>
                      <para>v</para>
                    </entry>
                    <entry>
                      <para>Splash point</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para>0</para>
                    </entry>
                    <entry>
                      <para>Active Buoy</para>
                    </entry>
                    <entry>
                      <para>w</para>
                    </entry>
                    <entry>
                      <para>Vector_1</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para>1</para>
                    </entry>
                    <entry>
                      <para>DIFAR Buoy</para>
                    </entry>
                    <entry>
                      <para>x</para>
                    </entry>
                    <entry>
                      <para>Vector_2</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para>2</para>
                    </entry>
                    <entry>
                      <para>LOFAR Buoy</para>
                    </entry>
                    <entry/>
                    <entry/>
                  </row>
                  <row>
                    <entry>
                      <para>3</para>
                    </entry>
                    <entry>
                      <para>BARRA Buoy</para>
                    </entry>
                    <entry/>
                    <entry/>
                  </row>
                  <row>
                    <entry>
                      <para>4</para>
                    </entry>
                    <entry>
                      <para>Hidar Buoy</para>
                    </entry>
                    <entry/>
                    <entry/>
                  </row>
                  <row>
                    <entry>
                      <para>5</para>
                    </entry>
                    <entry>
                      <para>Kingpin Marker</para>
                    </entry>
                    <entry/>
                    <entry/>
                  </row>
                </tbody>
              </tgroup>

            </table>Here&apos;s an illustration of how the new colors appear against the range of Debrief background colors:<figure xml:id="shades_2015">
              <title>2015 Debrief shades</title>
              <screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/NewTrackColors.png" width="100%"/>
                  </imageobject>
                </mediaobject>
              </screenshot>
            </figure>
            <note>
              <para>In 2015 the Debrief symbology attributes were extended to allow richer formatting to be applied to data on import. The new attributes mean it is possible to use a 2 or 5 character symbology element for each REP line. This was of particular value in supporting quick turnaround, in-stride, fast-look analysis. It is also of value when high volumes of annotations are produced using a simulation environment such as <link xlink:href="https://www.atlas-elektronik.com/what-we-do/submarine-systems/odin/">Odin</link>.</para>
            </note>
            <table xml:id="debrief_ExtendedSym">
              <title>Debrief extended symbology data fields</title>
              <tgroup cols="6">
                <colspec colname="c1"/>
                <colspec colname="c2"/>
                <colspec colname="c3"/>
                <colspec colname="c4"/>
                <colspec colname="c5"/>
                <colspec colname="c6"/>
                <thead>
                  <row>
                    <entry nameend="c2" namest="c1">
                      <para>Line Type</para>
                    </entry>
                    <entry nameend="c4" namest="c3">
                      <para>Line Thickness</para>
                    </entry>
                    <entry nameend="c6" namest="c5">
                      <para>Fill Style</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>@</para>
                    </entry>
                    <entry>
                      <para>SOLID</para>
                    </entry>
                    <entry>
                      <para>0</para>
                    </entry>
                    <entry>
                      <para>Hairwidth</para>
                    </entry>
                    <entry>
                      <para>0</para>
                    </entry>
                    <entry>
                      <para>No-fill</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para>A</para>
                    </entry>
                    <entry>
                      <para>DOTTED</para>
                    </entry>
                    <entry>
                      <para>1</para>
                    </entry>
                    <entry>
                      <para>1 pixel</para>
                    </entry>
                    <entry>
                      <para>1</para>
                    </entry>
                    <entry>
                      <para>Solid fill</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para>B</para>
                    </entry>
                    <entry>
                      <para>DOT_DASH</para>
                    </entry>
                    <entry>
                      <para>2</para>
                    </entry>
                    <entry>
                      <para>2 pixels</para>
                    </entry>
                    <entry>
                      <para>2</para>
                    </entry>
                    <entry>
                      <para>Semi-transparent fill</para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para>C</para>
                    </entry>
                    <entry>
                      <para>SHORT_DASHES</para>
                    </entry>
                    <entry>
                      <para>3</para>
                    </entry>
                    <entry>
                      <para>3 pixels</para>
                    </entry>
                    <entry/>
                    <entry/>
                  </row>
                  <row>
                    <entry>
                      <para>D</para>
                    </entry>
                    <entry>
                      <para>LONG_DASHES</para>
                    </entry>
                    <entry>
                      <para>4</para>
                    </entry>
                    <entry>
                      <para>4 pixels</para>
                    </entry>
                    <entry/>
                    <entry/>
                  </row>
                  <row>
                    <entry>
                      <para>E</para>
                    </entry>
                    <entry>
                      <para>UNCONNECTED</para>
                    </entry>
                    <entry>
                      <para>5</para>
                    </entry>
                    <entry>
                      <para>5 pixels</para>
                    </entry>
                    <entry/>
                    <entry/>
                  </row>
                </tbody>
              </tgroup>
            </table>
            <note>
              <para>In 2017 the Debrief symbology attributes were extended to allow the provision of some optional named parameters. The first of these is the specification of the layer into which the annotation should be inserted. Note: in the initial implementation spaces are not allowed in the entries. The second of these is the specification of the SVG Symbol to be used in the track.</para>
            </note>
            <table xml:id="debrief_NamedSym">
              <title>Debrief extended symbology data fields</title>
              <tgroup cols="2">
                <colspec colname="c1"/>
                <colspec colname="c2"/>
                <thead>
                  <row>
                    <entry>
                      <para>Example</para>
                    </entry>
                    <entry>
                      <para>Usage</para>
                    </entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>
                      <para>[LAYER=Other_Target_Layer]</para>
                    </entry>
                    <entry>
                      <para>Put this annotation into the layer named "Other_Target_Layer". Note: spaces not allowed. Use this mechanism to load a track as a high performing <glossterm linkend="g_lightweight">Lightweight Track.</glossterm><indexterm>
                          <primary>Lightweight Track</primary></indexterm><indexterm>
                          <primary>Track Data</primary><secondary>Lightweight tracks</secondary></indexterm></para>
                    </entry>
                  </row>
                  <row>
                    <entry>
                      <para>[SYMBOL=SVG_ICON_NAME]</para>
                    </entry>
                    <entry>
                      <para>This annotation places the specified icon as a symbol. Note: spaces not allowed. Icon name must be the exact name that appears in the SVG Section.</para>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </table> Please, take a look at the following example of the extended symbology at use <screen xml:id="extended_symbology_example">            <markup>
951212 050700.000 NELSON @C[SYMBOL=missile] 22 11 10.08 N 21 43 20.34 W 270.5   2.0      0 
951212 050701.000 COLLINGWOOD @C[SYMBOL=torpedo,LAYER=Support] 22 11 10.08 N 21 43 20.34 W 270.5   2.0      0 
            </markup>      </screen>
          </para>
        </sect2>
        <sect2 xml:id="replay_annotation_format">
          <title>Annotation Data Intro</title>

          <para>In addition to the positional vessel track data, annotations can also be added. Each annotation is placed on a single line in a replay file, each line beginning with the comment marker; a semi-colon &apos;;&apos;.To put a comment on a line, begin with two semi-colons.</para>
          <para>
            <note>
              <para>Note, when null positions are entered for <glossterm linkend="g_sensor">Sensor</glossterm> data, the position is taken from the track named in "ownship name". Debrief finds the nearest track location equal to or greater than the indicated time, and uses this as the sensor lat and long.</para>
            </note><note>
              <para>As with normal positional data, annotation entries which use a track/ownship name may contain multi-word phrases if they are enclosed in quotation marks ("), and the year can be expressed as 2 or 4 figures.</para>
            </note><note>
              <para>Debrief can handle decimal values for degrees or minutes. If you original data is in decimal degrees or degrees plus decimal minutes feel free to use these values directly, but remember to provide a zero for the unused column(s). Examples of this are shown below. <screen>
                  <markup>
;; example using D, M, S
951212 050100.000 NELSON @C 22 11 10.58 N 21 42 2.98 W 269.7 2.0 0
;; example using D
951212 050100.000 NELSON @C 22.455 0 0 N 21.432 0 0 W 269.7 2.0 0
;; example using D, M
951212 050100.000 NELSON @C 22 11.6678 0 N 21 42.543 0 W 269.7 2.0 0
                  </markup>
                </screen>
              </para>
            </note><note>
              <para>Where labels are provided for shapes, Debrief allows multi-line text labels - just insert a \n character to indicate the line-break</para>
            </note></para>

          <para><glossterm linkend="g_annotation">Annotation</glossterm> positions are specified in degrees as in the standard replay file format, and symbology representations are as in the above tables.</para>
        </sect2>
        <sect2 xml:id="replay_core_annotations">
          <title>Core Elements</title>
          <para><indexterm>
              <primary>Annotation Data</primary>
              <secondary>Core Elements</secondary>
            </indexterm>The format for the different types of annotations is: <screen width="70">            <markup>
123456789012345678901234567890123456789012345678901234567890123456789
0123456789012345678901234567890 

;LINE: @@ DD MM SS H DDD MM SS.S H DD MM SS.S H DDD MM SS H XX.XXX 
;; symb, start lat &amp; long, end lat &amp; long, text label (optional) 

;VECTOR: @@ DD MM SS H DDD MM SS.S H RRR BBB XX.XXX
;; symb, start lat &amp; long, range (yds), brg (degs) , text label (optional)

;TEXT: @@ DD MM SS H DDD MM SS H XX..XX 
;; symb, lat &amp; long, text (note: trailing text is optional, so just the symbol can be specified) 

;NARRATIVE:  YYMMDD HHMMSS  TTT.TTT  XX..XX 
;; dtg, track name, narrative entry 

;TIMETEXT: @@ YYMMDD HHMMSS DD MM SS.S H DDD MM SS.S H XX..XX 
;; symb, date, lat &amp; long, text 

;PERIODTEXT: @@ YYMMDD HHMMSS YYMMDD HHMMSS DD MM SS.S H DDD MM SS.S H 
DDD XX..XX 
;; symb, start date, end date, lat &amp; long, Depth(optional) text 

;GRID: @@ DD MM SS.S H DDD MM SS.S H MM.MM MM.MM XX..XX 
;; symb, centre lat &amp; long (N13) lat increment, long increment, text 

;RECT: @@ DD MM SS.S H DDD MM SS.S H DD MM SS.S H DDD MM SS.S H XX..XX
;; symb, tl corner lat &amp; long, br corner lat &amp; long, label

;POLY: @@ YYMMDD HHMMSS YYMMDD HHMMSS DD MM SS.S H DDD MM SS.S H DD MM SS.S H DDD MM SS.S H DD MM SS.S H DDD MM SS.S H  XX...XX
;POLY: @@ DD MM SS.S H DDD MM SS.S H DD MM SS.S H DDD MM SS.S H DD MM SS.S H DDD MM SS.S H  XX...XX
;; symb, start date (optional), end date (optional), lat &amp; long 1, lat &amp; long 2, lat &amp; long xxx (until end of line, or non-numeric label encountered)

;POLYLINE: @@ YYMMDD HHMMSS YYMMDD HHMMSS DD MM SS.S H DDD MM SS.S H DD MM SS.S H DDD MM SS.S H DD MM SS.S H DDD MM SS.S H  XX...XX
;POLYLINE: @@ DD MM SS.S H DDD MM SS.S H DD MM SS.S H DDD MM SS.S H DD MM SS.S H DDD MM SS.S H  XX...XX
;; (this is an open polygon) symb, start date (optional), end date (optional), lat &amp; long 1, lat &amp; long 2, lat &amp; long xxx (until end of line, or non-numeric label encountered)

;SGSAGEOG: @@ YYMMDD HHMMSS YYMMDD HHMMSS DD MM SS.S H DDD MM SS.S H 
DD MM SS.S H DDD MM SS.S H XX..XX 
;; symb, start date, end date, tl lat &amp; long, br lat &amp; long, 
text label (1 word) 

;SGSAGRID: @@ YYMMDD HHMMSS YYMMDD HHMMSS AA NN AA NN XX..XX 
;; symb, start date, end date, tl corner, br corner, text label (1 word) 

;WHEEL: @@ YYMMDD HHMMSS DD MM SS.S H DDD MM SS.S H YYY YYY XX.XX
;; symb, centre date, centre lat, centre long, inner radius (yards), 
outer radius (yards), label

;CIRCLE: @@ DD MM SS.S H DDD MM SS.S H YYY XX.XX 
;; symb, centre lat, centre long, radius (yards), label 

;ELLIPSE: BD YYMMDD HHMMSS DD MM SS.SS H DD MM SS.SS H CCC XXXX YYYY xx.xx 
;; symb, date, time, lat, long, orientation, maxima (yards), 
minima (yards), label 

;ELLIPSE2: BD YYMMDD HHMMSS YYMMDD HHMMSS DD MM SS.SS H DD MM SS.SS H CCC XXXX YYYY xx.xx 
;; symb, start-date, start-time, end-date, end-time, lat, long, orientation, maxima (yards), 
minima (yards), label 

;BRG: BD YYMMDD HHMMSS DD MM SS.SS H DD MM SS.SS H CCC XXXX xx.xx 
;; symb, date, time, lat, long, orientation, length (yards), label (one word) 

;SENSOR: YYMMDD HHMMSS.SSS AAAAAA @@ DD MM SS.SS H DDD MM SS.SS H 
BBB.B RRRR yy..yy xx..xx 
;; date, ownship name, symbology, sensor lat/long (or the single word NULL), 
bearing (degs), range(yds) [or the single world NULL], sensor name, label (to end of line),
, optional comment - see <xref linkend="entry_comments"/>

;SENSOR2: YYMMDD HHMMSS.SSS AAAAAA @@ DD MM SS.SS H DDD MM SS.SS H BBB.B CCC.C 
FFF.F RRRR yy..yy xx..xx
;; date, ownship name, symbology, sensor lat/long (or the single word NULL), 
bearing (degs) [or the single word NULL], ambigous bearing (degs) [or the 
single word NULL], frequency(Hz) [or the single word NULL],  range(yds) 
[or the single word NULL], sensor name, label (to end of line), optional
comment - see <xref linkend="entry_comments"/>

;SENSOR3: YYMMDD HHMMSS.SSS AAAAAA @@ DD MM SS.SS H DDD MM SS.SS H BBB.B  CCC.C 
FFF.F GGG.G RRRR yy..yy xx..xx
;; date, ownship name, symbology, sensor lat/long (or the single word NULL), 
bearing (degs) [or the single word NULL], bearing accuracy (degs) 
[or the single word NULL], frequency(Hz) [or the single word NULL], 
frequency accuracy (Hz) [or the single word NULL], range(yds) 
[or the single word NULL], sensor name, label (to end of line), optional
comment - see <xref linkend="entry_comments"/>

;TMA_POS: YYMMDD HHMMSS.SSS AAAAAA @@ DD MM SS.SS H DDD MM SS.SS H 
TT...TT OOO.O  XXXX YYYY  CCC SSS DDD xx.xx 
;; date, time, ownship name, symbology, tma lat, tma long, track name, 
ellipse orientation (deg from north),  maxima (yds), minima (yds), course, 
speed, depth (m), label string

;TMA_RB: YYMMDD HHMMSS.SSS AAAAAA @@ BBB.B RRR.R TT...TT OOO.O 
XXXX YYYY  CCC SSS DDD xx.xx 
;; date, time, ownship name, symbology, bearing (deg), range (yds), 
track name, elipse orientation (deg from north),  maxima (yds), minima (yds), 
course, speed, depth (m), label string

;NARRATIVE:  YYMMDD HHMMSS  TTT.TTT  XX..XX
 ;; dtg, track name, narrative entry. Note the track name can be multi-word if 
surrounded by quotes (").

;NARRATIVE2:  YYMMDD HHMMSS  TTT.TTT AA..AA XX..XX
 ;; dtg, track name, narrative entry-type, narrative entry.  Note the track name 
and entry type can be multi-word if surrounded by quotes (").
            </markup>   </screen>
          </para>
        </sect2>
        <sect2 xml:id="entry_comments">
          <title>Entry comments</title>
          <para><indexterm>
              <primary>Replay File Format</primary>
              <secondary>Entry comment</secondary>
            </indexterm> Note: some entry types allow an additional comment to be appended to the end of an entry. The comment follows a <emphasis>//</emphasis> separator.</para>
          <screen width="70"><markup>
951212 050100.000 NONSUCH @A@00 22 12 10.51 N 21 32 14.81 W 269.9 2.0 0
;; label is normal DTG value, comment is empty (legacy behaviour)

951212 050200.000 NONSUCH @A@00 22 12 10.51 N 21 32 14.81 W 269.9 2.0 0 Standard label
;; label is "Standard label", comment is empty (legacy behaviour)

951212 050300.000 NONSUCH @A@00 22 12 10.51 N 21 32 27.27 W 268.7 2.0 0 Standard label // Custom comment
;; label is "Standard label", comment is "Custom comment"

951212 050400.000 NONSUCH @BA10 22 12 10.28 N 21 32 40.33 W 270.6 2.0 0 // Custom comment
;; label is normal DTG value, comment is "Custom comment"

;SENSOR2: 951212 051600.000 NEL_STYLE2 @B NULL 59.3 300.8 49.96 NULL SENSOR LABEL // COMMENT
;; label is "SENSOR LABEL", comment is "COMMENT"
          </markup>
          </screen>
          <para>For track positions, it&apos;s possible to indicate whether the comment should be shown, using the <guibutton>Comment Showing</guibutton> attribute of the position. The comment is always placed opposite the label, even if the label isn&apos;t shown</para>
        </sect2>
        <sect2 xml:id="towed_array_annotations">
          <title>Towed Array Extensions</title>
          <para><indexterm>
              <primary>Annotation Data</primary>
              <secondary>Towed Array Extensions</secondary>
            </indexterm>In Spring 2017 additional annotations were introduced to support more complex Towed Array datasets <screen width="70"><markup>

;TA_FORE_AFT: 090722 041522 NONSUCH SENSOR_A_1 44.2 260.2 45.4 262.3
;; data from module sensors, in depth/heading pairs
;; date-time, platform, sensor, two pairs of depth (m) &amp; heading (degs) data.  Or replace the pairs with four NULL values.

;TA_MODULES: YYMMDD HHMMSS AAAAAA BBBBBB DD.D HH.H ... DD.D HH.H
;; 12 sets of depth/heading data from module sensors. Either first 4, or last 8 will be populated
;; the other pairs should have zero values
;; date-time, platform, sensor, pairs of depth &amp; heading data, to the end of line.
;; But, if you&apos;re not interested in the spec at all, you could just include four NULL values.

;TA_COG_ABS: YYMMDD HHMMSS AAAAAA BBBBBB LAT.Y LONG.X DD.D
;; absolute measurement of towed array aperture Centre of Gravity
;; date-time, platform, sensor, lat/long (Degrees) depth (m). Lat/Lon/D may be null.

;TA_COG_REL: YYMMDD HHMMSS AAAAAA BBBBBB XX.X YY.Y DD.D
;; relative measurement of towed array aperture Centre of Gravity
;; date-time, platform, sensor, x/y/depth(m). X/Y/D may be null

            </markup>   </screen>
          </para>
        </sect2>
        <sect2 xml:id="replay_dynamic_annotations">
          <title>Dynamic Elements</title>

          <para>In addition to individual annotation shapes it is possible to define a dynamic annotation. Do this by using a series of dynamic annotations, all with the same annotation name. Once loaded, Debrief will only show the shape nearest to the current scenario time (according to the Time Controller). The dynamic annotations largely take the same format as their non-dynamic equivalents as described above, save for the introduction of a Shape Name</para>

          <para><indexterm>
              <primary>Annotation Data</primary>
              <secondary>Dynamic Elements</secondary>
            </indexterm>The format for the different types of dynamic annotations is: <screen width="70">
            <markup>
;;DYNAMIC_CIRCLE: @@@@@ "NAME" YYMMDD HHMMSS DD MM SS.S H DDD MM SS.S H YYY XX.XX 
;;DYNAMIC_POLY: @@@@@ "NAME" YYMMDD HHMMSS DD MM SS.S H DDD MM SS.S H DD MM SS.S H DDD MM SS.S H DD MM SS.S H DDD MM SS.S H  XX...XX
;;DYNAMIC_RECT: @@@@@ "NAME" YYMMDD HHMMSS DD MM SS.S H DDD MM SS.S H DD MM SS.S H DDD MM SS.S H XX..XX
;; symb, shape name, date-time [other fields as in the standard annotation type]
;; example:
;DYNAMIC_CIRCLE: @@011 "Circle Track A" 151212 143000 54 05 12.1 N 4 0 12.4 W 1000 At time 1430 
;DYNAMIC_CIRCLE: @@011 "Circle Track B" 151212 143100 54 05 14.1 N 4 0 12.1 W 1100 At time 1431         
;DYNAMIC_POLY: @@011 "Circle Track C" 151212 143200 54 05 15.1 N 4 0 12.1 W  54 06 15.1 N 4 0 11.1 W  54 05 13.1 N 4 1 14.1 W At time 1432         
;DYNAMIC_RECT: @@011 "Circle Track D" 151212 143300 54 05 17.1 N 4 0 12.1 W  54 05 10.1 N 4 0 12.6 W At time 1433
            </markup>
            </screen>
          </para>
        </sect2>
        <sect2 xml:id="replay_dynamic_track_annotations">
          <title>Dynamic Track Annotations</title>

          <para>
            <screenshot>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/DynamicArcs.png" width="80%"/>
                </imageobject>
              </mediaobject>
            </screenshot> It is also possible to attach annotations to tracks - so that the annotation moves (and rotates) with the track. These annotations can be grouped. This allows the dynamic shape itself to change dimensions during its life, but with the whole collection of shapes switched on and off as one.</para>
          <para> Here are a series of examples (but note that the REP lines have been abbreviated): <screenshot>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/arcs_1.png" width="40%" align="center"/>
                </imageobject>
              </mediaobject>
            </screenshot>
            <screenshot>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/arcs_2.png" width="40%" align="center"/>
                </imageobject>
              </mediaobject>
            </screenshot>
            <screenshot>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/arcs_3.png" width="40%" align="center"/>
                </imageobject>
              </mediaobject>
            </screenshot>
          </para>

          <para><indexterm>
              <primary>Annotation Data</primary>
              <secondary>Dynamic Track Annotations</secondary>
            </indexterm>The format for the different types of dynamic track annotations is shown below. Note that each line may contain a series of definitions, and that the distance units are in yards.<screen width="70">
            <markup>
;SENSORARC YYMMDD HHMMSS.SSS YYMMDD HHMMSS.SSS TRACKNAME SYMBOLOGY LEFT RIGHT INNER OUTER [LEFT RIGHT INNER OUTER] LABEL
;; (start time, end time, parent track, styling, min-max angles of the arc, inner-outer radiuses, collective label.
;; simple example

;SENSORARC 951212 062800 951212 063000 NELSON @@ -75 35 0 1000 "fwd dynamic"
;; dynamic example - so donut spreads outwards in time using 3 steps

;SENSORARC: 951212 053000 951212 054000 NELSON @A 0 360 500 1000 CZ_Ring
;SENSORARC: 951212 054000 951212 055000 NELSON @B 0 360 600 1100 CZ_Ring
;SENSORARC: 951212 055000 951212 060000 NELSON @C 0 360 700 1200 CZ_Ring
            </markup>
            </screen>
            <note>
              <para>A NULL can be provided instead of one or more of the times. This will result in the dynamic shape being used for part or all of the track lifetime.</para>
            </note>
          </para>
        </sect2>
        <sect2 xml:id="replay_format_annotations">
          <title>Formatting helpers</title>
          <para> Entries can be included in REP files to help format data as it is loaded. These commands can specify the frequency at which labels/symbols are shown, or perform other presentation configuration, either on specific tracks/layers or for all data. <screenshot>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/FormatExample.png" width="60%" align="center"/>
                </imageobject>
              </mediaobject>
            </screenshot>
            <tip>
              <para>You can use these helpers to create a set of default look &amp; feels for your plots. Create a set of label, symbol, arrow markers to suit your data, then store them in a REP file, called something like <filename>LONG_RANGE_FORMAT.REP</filename>. Then, when conducting a new piece of analysis of long range tracks, start by opening this REP file. Now, when you drag in your tracks, they will all get formatted according to your preferred styling.</para>
            </tip>
          </para>

          <para><indexterm>
              <primary>Format Helpers</primary>
              <secondary>REP Format Helpers</secondary>
            </indexterm>The format for these helpers is shown below.<screen width="70">
            <markup>
;FORMAT_FIX: 30_min_lab LABEL NULL NULL TRUE 1800000
;; 30_min_lab - name for this formatter (shown in outline view) 
;; LABEL - what we&apos;re applying to (SYMBOL, LABEL, ARROW)
;; NULL - track name we apply to (or null for all tracks)
;; NULL - symbology we apply to (e.g. @A) (or null for all tracks) 
;; TRUE - whether interval should fall on regular interval or start
;;        from first data point
;; 1800000 - interval (in millis) to apply formatting

;FORMAT_FIX: 10_min_sym SYMBOL NELSON NULL TRUE 600000 
;; show symbol on every 10 minute marker (00:00,00:10, 00:20, etc) 
;;    for track Nelson

;FORMAT_LAYER_HIDE: format_name layer_name
;; name for this formatter, name of the layer to hide 

;FORMAT_LAYER_HIDE: format_name layer_1_name "layer 2 name"
;; name for this formatter, name of the layers to hide
;;     quotes can be used if name contains spaces 

;FORMAT_TRACK_NAME_AT_END: format_name track_names
;; name for this formatter, list of track names for which the name 
;;     should be shown at the end, or empty to apply to all tracks
            </markup>
            </screen>
            <note>
              <para>A NULL can be provided instead of one or more of the times. This will result in the dynamic shape being used for part or all of the track lifetime.</para>
            </note>
          </para>
        </sect2>
      </sect1>

      <sect1 xml:id="debrief_file_format">
        <title>Debrief file format</title>

        <sect2 xml:id="more_file_format">
          <title>Introduction</title>

          <para><glossterm linkend="g_xml">DPF</glossterm>
            <indexterm>
              <primary>File Format</primary>
              <secondary>XML</secondary>
            </indexterm> is the Extensible Markup Language. Like its predecessor SGML, <glossterm linkend="g_xml">XML</glossterm> is a meta-language used to define other languages. The article in the Reference Guide taken from MSDN gives some background to <glossterm linkend="g_xml">XML</glossterm></para>
        </sect2>

        <sect2 xml:id="more_adopting_xml">
          <title>Adoption of XML</title>

          <para>An acknowledged shortcoming of the former file format ( <filename>dpl</filename>) used in <application>Debrief</application> was the frequency with which <application> Debrief</application> modifications rendered previous <filename>DPL</filename> files unreadable. This use of <application>Java</application> serialization offered low cost in development terms and was seen as essential to store the more complex data used in <application>Debrief 2000</application> (such as projections, and formatting data).</para>

          <para>The only way to divorce the <application>Debrief</application> version from the file format has been to adopt an independent file format. This independent format must be structured in order to store <application>Debrief</application> data tidily, and the development to support it must not be too "expensive". The adoption of <application> XML</application> meets both of these criteria = it is quite capable of storing <application>Debrief</application> data, and there are a number of libraries available which support it.</para>

          <para>XML provides additional benefits beyond those described above: <itemizedlist>
              <listitem>
                <para>It is human-readable, offering the following benefits: <itemizedlist>
                    <listitem>
                      <para>Apparently corrupt data files can be examined in a text editor and repaired</para>
                    </listitem>

                    <listitem>
                      <para>Data files can be edited outside Debrief</para>
                    </listitem>
                  </itemizedlist></para>
              </listitem>

              <listitem>
                <para>It is a world-wide standard independent of Debrief and Java <itemizedlist>
                    <listitem>
                      <para>Applications are freely available which support it: Internet Explorer will open XML data files for inspection</para>
                    </listitem>

                    <listitem>
                      <para>When used in conjunction with the <indexterm>
                          <primary>DTD</primary>
                          <secondary>XML Structure</secondary>
                        </indexterm><indexterm>
                          <primary>XML</primary>
                          <secondary>DTD Structure</secondary>
                        </indexterm>Debrief DTD, the IBM Xeena editor provides easy editing/creation of Debrief plots</para>
                    </listitem>

                    <listitem>
                      <para>As more organisations/industries adopt XML, there is increased likelihood that import/export filters will not be required, since XML documents are easily translated between each other.</para>
                    </listitem>
                  </itemizedlist></para>
              </listitem>
            </itemizedlist></para>

          <para>The XML structure adopted within Debrief is as follows: <figure xml:id="debrief_xml">
              <title>XML file structure in Debrief</title>

              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/XMLStructure.gif" width="100%"/>
                </imageobject>
              </mediaobject>
            </figure>
            <note>
              <para>In Autumn 2014 the <filename>dpf</filename> suffix was adopted. The data is still stored in XML format, but the adoption of a unique suffix makes it easier to find Debrief files from a File Explorer.</para>
            </note>
          </para>
        </sect2>
      </sect1>

      <sect1 xml:id="Section_KML">
        <title xml:id="SectionKML_Title">KML file format</title>

        <sect2 xml:id="IntroToKML">
          <title>Introduction to KML file format</title>

          <para><blockquote>
              <attribution><link xlink:href="http://en.wikipedia.org/wiki/Kml" xmlns:xlink="http://www.w3.org/1999/xlink">WikiPedia</link>, 2010</attribution>

              <para>Keyhole Markup Language (KML) is an XML-based language schema for expressing geographic annotation and visualization on existing or future Internet-based, two-dimensional maps and three-dimensional Earth browsers. KML was developed for use with Google Earth, which was originally named Keyhole Earth Viewer. It was created by Keyhole, Inc, which was acquired by Google in 2004. The name "Keyhole" is an homage to the KH reconnaissance satellites, the original eye-in-the-sky military reconnaissance system first launched in 1976. KML is an international standard of the Open Geospatial Consortium. Google Earth was the first program able to view and graphically edit KML files, and other projects such as Marble have also started to develop KML support</para>
            </blockquote></para>

          <para><indexterm>
              <primary>KML/KMZ Files</primary>
            </indexterm> Whilst it has military roots, the KML dialect of XML has received wide adoption for the recording and distribution of positional information. KML extends the GML standard. KML and GML provide a number of ways of recording positional data. This section will record the KML dialects that Debrief understands.</para>
        </sect2>

        <sect2 xml:id="KML_LineString">
          <title>LineString KML files</title>

          <para>Handheld GPS systems (including mobile phones) tend to store positional data in a <command>Placemark</command> that contains a single, lengthy <command>LineString</command> element containing a series of long, lat, altitude elements - devoid of time stamps. Debrief makes the following assumptions regarding this format:<orderedlist>
              <listitem>
                <para>If altitude data is missing, its comma separator will still be present</para>
              </listitem>

              <listitem>
                <para>The filename will be of the form w20090802164801.kml, where the digits represent year, month, day, hour, minute, second</para>
              </listitem>

              <listitem>
                <para>The data items will have been recorded at one second intervals</para>
              </listitem>

              <listitem>
                <para>The filename (without suffix) is used as the track identifier</para>
              </listitem>
            </orderedlist></para>
        </sect2>

        <sect2 xml:id="KML_MultiGeometry">
          <title>MultiGeometry KML files</title>

          <para>More capable recording systems tend to store positional data in a more refined, time-stamped format - using series of <command>Placemark</command> entries - each containing a <command>MultiGeometry</command> record. Additionally, these more complex files are able to represent data for a number of different vehicles. Debrief makes the following assumptions regarding this file format:<orderedlist>
              <listitem>
                <para>Only <command>Placemark</command> elements that contain a <command>MultiGeometry</command> element are treated as compliant and processed</para>
              </listitem>

              <listitem>
                <para>The <command>Placemark</command> name element is used to determine the track id: any digits/letters appearing before a "-" hyphen are treated as a track id, this multiple positions are attributed to their relevant track</para>
              </listitem>

              <listitem>
                <para>Tracks imported into Debrief from this file format are named as the first component of the filename (before the "."), followed by the unique id declared in the Placemark entries.</para>
              </listitem>

              <listitem>
                <para>The contents of the <command>when</command> element are treated as the time-stamp of the position record (time-zone ignored, always treated as GMT)</para>
              </listitem>

              <listitem>
                <para>The long/lat/altitude coordinates are taken from the first <command>coordinates</command> element in the <command>Placemark</command></para>
              </listitem>

              <listitem>
                <para>Course and speed data is taken from the <command>description</command> element, based on a presumption that the element contains a string formatted like: <code>&lt;br&gt;Course: 345.2&lt;br&gt;Speed: 9.6 knots&lt;br&gt;Date:</code></para>
              </listitem>
            </orderedlist></para>
        </sect2>
      </sect1>

      <sect1 xml:id="Section_Flat">
        <title xml:id="SectionFlat_Title">Flat file format</title>

        <sect2 xml:id="IntroToFlat">
          <title>Introduction to Flat file (SAM) format</title>

          <para>One Debrief user organisation frequently has to use exported Debrief tracks in a subsequent analysis application (SAM). This application requires tab-separated columns of data using a flat-earth measurements in imperial units. The data is formatted as specified below. Note that records are only included for times for which there is sensor datums - which may be a shorter time period than that which the user specified.</para>
        </sect2>

        <sect2 xml:id="FlatSchema">
          <title>Schema for Flat file format</title>

          <programlisting>STRAND Scenario Report 1.00
&lt;Operation_Name&gt;
&lt;Platform_Name&gt;
&lt;Ownship_Track_Name&gt;
&lt;Sensor_Track_Name&gt;
&lt;Measured_Tgt_Name&gt;
&lt;Predicted_Tgt_Name&gt;
&lt;Start_Time&gt;
&lt;End_Time&gt;
&lt;Bearing_SIF&gt;
&lt;Range_SIF&gt;
&lt;Combined_SIF&gt;
&lt;Num_Records&gt;
&lt;Geo_Origin_X&gt; &lt;Geo_Origin_Y&gt;
Time OS_Status OS_X OS_Y OS_Speed OS_Heading Sensor_Status Sensor_X Sensor_Y
Sensor_Brg Sensor_Bacc Sensor_Freq Sensor_Facc Sensor_Speed Sensor_Heading 
Sensor_Type Msd_Status Msd_X Msd_Y Msd_Speed Msd_Heading Prd_Status Prd_X Prd_Y 
Prd_Brg Prd_Brg_Acc Prd_Range Prd_Range_Acc Prd_Course Prd_Cacc Prd_Speed Prd_Sacc 
Prd_Freq Prd_Freq_Acc
&lt;scenario_sample_time&gt; &lt;OS_Data_Status&gt; &lt;OS_X&gt; &lt;OS_Y&gt; &lt;OS_Speed&gt; &lt;OS_Heading&gt; 
  &lt;Sensor_Data_Status&gt; &lt;Sensor_X&gt; &lt;Sensor_Y&gt; &lt;Sensor_Brg&gt; &lt;Sensor_Bacc&gt; &lt;Sensor_Freq&gt; 
  &lt;Sensor_Facc&gt; &lt;Sensor_Speed&gt; &lt;Sensor_Heading&gt; &lt;Sensor_Type&gt; &lt;Msd_status&gt; &lt;Msd_X&gt;
  &lt;Msd_Y&gt; &lt;Msd_Speed&gt; &lt;Msd_Heading&gt; &lt;Prd_Status&gt; &lt;Prd_X&gt; &lt;Prd_Y&gt; &lt;Prd_Brg&gt;
  &lt;Prd_Brg_Acc&gt; &lt;Prd_Range&gt; &lt;Prd_Range_Acc&gt; &lt;Prd_Course&gt; &lt;Prd_Cacc&gt; &lt;Prd_Speed&gt;
  &lt;Prd_Sacc&gt; &lt;Prd_Freq&gt; &lt;Prd_Freq_Acc&gt;
&lt;scenario_sample_time&gt; &lt;OS_Data_Status&gt; &lt;OS_X&gt; &lt;OS_Y&gt; &lt;OS_Speed&gt; &lt;OS_Heading&gt; 
  &lt;Sensor_Data_Status&gt; &lt;Sensor_X&gt; &lt;Sensor_Y&gt; &lt;Sensor_Brg&gt; &lt;Sensor_Bacc&gt; &lt;Sensor_Freq&gt; 
  &lt;Sensor_Facc&gt; &lt;Sensor_Speed&gt; &lt;Sensor_Heading&gt; &lt;Sensor_Type&gt; &lt;Msd_status&gt; &lt;Msd_X&gt;
  &lt;Msd_Y&gt; &lt;Msd_Speed&gt; &lt;Msd_Heading&gt; &lt;Prd_Status&gt; &lt;Prd_X&gt; &lt;Prd_Y&gt; &lt;Prd_Brg&gt;
  &lt;Prd_Brg_Acc&gt; &lt;Prd_Range&gt; &lt;Prd_Range_Acc&gt; &lt;Prd_Course&gt; &lt;Prd_Cacc&gt; &lt;Prd_Speed&gt;
  &lt;Prd_Sacc&gt; &lt;Prd_Freq&gt; &lt;Prd_Freq_Acc&gt;
&lt;scenario_sample_time&gt; &lt;OS_Data_Status&gt; &lt;OS_X&gt; &lt;OS_Y&gt; &lt;OS_Speed&gt; &lt;OS_Heading&gt; 
  &lt;Sensor_Data_Status&gt; &lt;Sensor_X&gt; &lt;Sensor_Y&gt; &lt;Sensor_Brg&gt; &lt;Sensor_Bacc&gt; &lt;Sensor_Freq&gt; 
  &lt;Sensor_Facc&gt; &lt;Sensor_Speed&gt; &lt;Sensor_Heading&gt; &lt;Sensor_Type&gt; &lt;Msd_status&gt; &lt;Msd_X&gt;
  &lt;Msd_Y&gt; &lt;Msd_Speed&gt; &lt;Msd_Heading&gt; &lt;Prd_Status&gt; &lt;Prd_X&gt; &lt;Prd_Y&gt; &lt;Prd_Brg&gt;
  &lt;Prd_Brg_Acc&gt; &lt;Prd_Range&gt; &lt;Prd_Range_Acc&gt; &lt;Prd_Course&gt; &lt;Prd_Cacc&gt; &lt;Prd_Speed&gt;
  &lt;Prd_Sacc&gt; &lt;Prd_Freq&gt; &lt;Prd_Freq_Acc&gt;
&lt;scenario_sample_time&gt; &lt;OS_Data_Status&gt; &lt;OS_X&gt; &lt;OS_Y&gt; &lt;OS_Speed&gt; &lt;OS_Heading&gt; 
  &lt;Sensor_Data_Status&gt; &lt;Sensor_X&gt; &lt;Sensor_Y&gt; &lt;Sensor_Brg&gt; &lt;Sensor_Bacc&gt; &lt;Sensor_Freq&gt; 
  &lt;Sensor_Facc&gt; &lt;Sensor_Speed&gt; &lt;Sensor_Heading&gt; &lt;Sensor_Type&gt; &lt;Msd_status&gt; &lt;Msd_X&gt;
  &lt;Msd_Y&gt; &lt;Msd_Speed&gt; &lt;Msd_Heading&gt; &lt;Prd_Status&gt; &lt;Prd_X&gt; &lt;Prd_Y&gt; &lt;Prd_Brg&gt;
  &lt;Prd_Brg_Acc&gt; &lt;Prd_Range&gt; &lt;Prd_Range_Acc&gt; &lt;Prd_Course&gt; &lt;Prd_Cacc&gt; &lt;Prd_Speed&gt;
  &lt;Prd_Sacc&gt; &lt;Prd_Freq&gt; &lt;Prd_Freq_Acc&gt;
....
  Own Ship Data Fields    Sensor Data Fields    Measured Target Data Fields  
  Predicted Target Data Fields

Data Dictionary
All fields are tab delimited.  All text shown in bold is to be included in the output file exactly as shown.

Header Information
&lt;Operation_Name&gt;     The name of the operation taken from the header Information of the own ship file
&lt;Platform_Name&gt;      The name of the own ship platform taken from the headerinformation of the own ship track.
&lt;Ownship_Track_Name&gt; The name of the own ship track taken from the header information of the own ship track
&lt;Sensor_Track_Name&gt;  The name of the sensor track taken from the header informationof the sensor track
&lt;Measured_Tgt_Name&gt;  The name of the measured target track taken form the target trackheader information
&lt;Predicted_Tgt_Name&gt; The name of the predicted target track taken from the targettrack header information
&lt;Start_Time&gt;         The time of the first data record in the form:
                      hh:mm:ss &lt;TAB&gt; dd/mm/yyyy
&lt;End_Time&gt;           The time of the last data record in the form: 
                      hh:mm:ss &lt;TAB&gt; dd/mm/yyyy
&lt;Bearing_SIF&gt;        The system integrity factor based on bearing information
&lt;Range_SIF&gt;          The system integrity factor based on range information
&lt;Combined_SIF&gt;       The system integrity factor for the whole system
&lt;Num_Records&gt;        The number of data records in the file&apos;s body
&lt;Geo_Origin_X&gt;       The X component of the geographical origin in cartesian coordinates
&lt;Geo_Origin_Y&gt;       The Y component of the geographical origin in cartesiancoordinates

Body Information
All records consist of a sequence of TAB delimited fields generating a tabular output.  Each column will be identified by a title as shown in bold type.

&lt;scenario_sample_time&gt; The time of the scenario information contained in the record.
                        Measured in seconds from the start time given in the header.
&lt;OS_Data_Status&gt;      Flag defining the availability of own ship data built from the sum of the following codes.
                        0 = No own ship data, 1 = OS Position, 2 = Os Speed, 
                        4 = OS Heading.  For example if all own ship data is available the status = 1+2+4 = 7
&lt;OS_X&gt;                The X component of the own ship position in cartesiancoordinates at scenario sample time.  
                        Use STRANDPos type - integers measuring scenario location in yards
&lt;OS_Y&gt;                The Y component of the own ship position in cartesiancoordinates at scenario sample time.
                        Use STRANDPos type - integers measuring scenario location in yards
&lt;OS_Speed&gt;            The speed of the own ship at scenario_sample_time in knots.
                       Positive float
&lt;OS_Heading&gt;          The heading of the own ship at scenario_sample_time in degrees.
                       Float in range 0 to 359.99
&lt;Sensor_Data_Status&gt;  Flag defining the availability of sensor data built from the sum of the following codes.
                       0 = No sensor data, 1 = Sensor position, 2 = sensor bearing, 
                       4 = sensor frequency, 8 = Sensor Speed, 16 = Sensor Heading,
                       32 = Sensor Type.  For example if all sensor data is available
                       the status = 63
&lt;Sensor_X&gt;            The X component of the sensor position in cartesian coordinates at scenario sample time.
                       Use STRANDPos type - integers measured in yards
&lt;Sensor_Y&gt;            The Y component of the sensor position in cartesian coordinates at scenario sample time.
                       Use STRANDPos type - integers measured in yards
&lt;Sensor_Brg&gt;          The true bearing measured by the sensor in degrees. 
                       Float in range 0 to 359.99
&lt;Sensor_Bacc&gt;         The accuracy of the measured bearing in degrees.  Float in 
                       range 0 to 180.0
&lt;Sensor_Freq&gt;         The frequency measured by the sensor in hertz. Positive Float
&lt;Sensor_Facc&gt;         The accuracy of the measured frequency in hertz.  Positive float
&lt;Sensor_Speed&gt;        The speed of the sensor in knots. Positive float
&lt;Sensor_Heading&gt;      The heading of the sensor in degrees. Float in range 0 to 359.99
&lt;Sensor_Type&gt;         The type of sensor the data refers to.  
                       1 character H = hull or T = towed array
&lt;Msd_status&gt;          Flag defining the availability of measured target data built from the sum of the following codes.  
                       0 = no measured target data, 1 = measured target position, 
                       2 = measured target speed, 4 = measured target heading.
&lt;Msd_X&gt;               The X component of the measured target position in cartesian coordinates at scenario sample time. 
                       Use STRANDPos type - integers measured in yards
&lt;Msd_Y&gt;               The Y component of the measured target position in cartesian coordinates at scenario sample time. 
                       Use STRANDPos type - integers measured in yards
&lt;Msd_Speed&gt;           The measured target speed in knots. Positive float
&lt;Msd_Heading&gt;         The measured target heading in degrees. Float in range 0 to
                       359.99
&lt;Prd_status&gt;          Flag defining the availability of predicted target data built from the sum of the following codes.
                       0 = no predicted target data, 1 = predicted position, 
                       2 = predicted  bearing, 4 = predicted bearing accuracy, 
                       8 = predicted range, 16 = predicted range accuracy, 
                       32 = predicted course, 64 = predicted course accuracy, 
                       128 = predicted speed, 256 = predicted speed accuracy, 
                       512 = predicted frequency, 1024 = predicted frequency accuracy 
&lt;Prd_X&gt;               The X component of the predicted target position in cartesian coordinates at scenario sample time. 
                       Use STRANDPos type - integers measured in yards
&lt;Prd_Y&gt;               The Y component of the predicted target position in cartesian coordinates at scenario sample time.
                       Use STRANDPos type - integers measured in yards
&lt;Prd_Brg&gt;             The predicted target bearing in degrees.  Float in range 0 to
                       359.99
&lt;Prd_Brg_Acc&gt;         The predicted target bearing accuracy in degrees.  Float in 
                       range 0 to 180.0
&lt;Prd_Range&gt;           The predicted target range in yards.  Positive float
&lt;Prd_Range_Acc&gt;       The predicted target range accuracy in yards.  Positive float
&lt;Prd_Course&gt;          The predicted target course in degrees.  Float in range 0 to 
                       359.99
&lt;Prd_Cacc&gt;            The accuracy of the predicted course in degrees.  Positive 
                       float in range 0 to 359.99
&lt;Prd_Speed&gt;           The predicted target speed in knots.  Positive float
&lt;Prd_Sacc&gt;            The accuracy of the measured speed in knots.  Positive float
&lt;Prd_Freq&gt;            The predicted target range in hertz  Positive float
&lt;Prd_Freq_Acc&gt;        The predicted target frequency accuracy in hertz  Positive float</programlisting>
        </sect2>
      </sect1>

      <sect1 xml:id="multi_data_files">
        <title>Multipath analysis datafiles</title>

        <sect2 xml:id="multi_data_intro">
          <title>Introduction</title>

          <para><indexterm>
              <primary>Multipath</primary>
              <secondary>data files</secondary>
            </indexterm> The Multi Path Analysis view (see <xref linkend="multipath_analysis"/>) allows a target depth to be estimated by visually aligning a calculated set of time delays with a measured set. This view requires two additional data files to be loaded. Both of these files are in textual <filename>csv</filename> format.</para>
        </sect2>

        <sect2 xml:id="multi_data_svp">
          <title>SVP file</title>

          <para>The Sound Velocity Profile file is a two-column csv text file:<variablelist>
              <varlistentry>
                <term>depth</term>

                <listitem>
                  <para>floating point depth (m)</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>sound speed</term>

                <listitem>
                  <para>floating point sound speed (m/s)</para>
                </listitem>
              </varlistentry>
            </variablelist></para>
        </sect2>

        <sect2 xml:id="multi_data_delays">
          <title>Time delays file</title>

          <para>The time-delays data file is a multi-column csv text file:</para>

          <para><screen>YYYY,MM,DD,HH,MM,SS,mmm,TIME_DELAY(msec),POWER(dB)
2009,04,22,18,37,00,254,6.797688,22</screen></para>

          <variablelist>
            <varlistentry>
              <term>date</term>

              <listitem>
                <para>Series of fields recording date and time (including milliseconds) of observation</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>time-delay</term>

              <listitem>
                <para>floating point time delay (mSecs)</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>power</term>

              <listitem>
                <para>ignored in current implementation</para>
              </listitem>
            </varlistentry>
          </variablelist>

          <para>Note, you can determine the timestamp using the <link xlink:href="http://www.unixstamp.com/" xmlns:xlink="http://www.w3.org/1999/xlink">unix timestamp</link> web site.</para>
        </sect2>
      </sect1>
      <sect1 xml:id="format_2087_files">
        <title>S2087 Track files</title>
        <indexterm>
          <primary>S2087 Log-file format</primary>
        </indexterm>
        <indexterm>
          <primary>File Format</primary>
          <secondary>S2087</secondary>
        </indexterm>
        <sect2 xml:id="Intro2087">
          <title>Introduction</title>
          <para> The S2087 system is able to provide ownship track. On occasions when the command system isn&apos;t able to provide ownship track then this data can be used as a fallback.</para>
          <para>The following assumptions have been made regarding the data: <itemizedlist>
              <listitem>
                <para>The file ends in .csv</para>
              </listitem>
              <listitem>
                <para>Course is in degrees, and speed is in knots</para>
              </listitem>
              <listitem>
                <para>Measured Time is recorded in GMT</para>
              </listitem>
              <listitem>
                <para>Measurement time is stored in the SYS_ORDINAL_TIME column</para>
              </listitem>
            </itemizedlist>
            <note>
              <para>Local IT settings may hide the file suffix for MS Windows devices. So, a file titled <filename>context.csv</filename> may just appear as <filename>context</filename>, with MS Windows indicating that the file is a <emphasis>Microsoft Office Excel Comma Separated Value file</emphasis>.</para>
            </note>
          </para>

        </sect2>
        <sect2 xml:id="Fileformat2087">
          <title>File format</title>
          <para>Here is a sample of the expected format (line-breaks inserted to aid legibility).<screen>SYS_INTERNAL_TIME,SYS_ORDINAL_TIME,SHIP_ORDINAL_TIME,LATITUDE,LONGITUDE,SPEED_MADE_GOOD,
SHIP_COURSE, LOG_SPEED,SHIP_HEADING,TA_SCOPE,TA_DEPTH,TA_X,TA_Y,TA_HEADING,TA Deployed,TB_SCOPE,
TB_DEPTH,TB_X, TB_Y, TB_HEADING, TB Deployed,SPEED_OF_SOUND, TEMPERATURE, SHIP_ROLL, SHIP_PITCH, 
WIND_DIRECTION, WIND_SPEED, DRIFT_NORTH, DRIFT_EAST
23-08-2014 02 36 53,01-09-2014 00 00 12,31-08-2014 23 00 08,48.55566666666667,-9.359333333333334,
8.922246514887131,318.8,9.349891895292325,319.2,303,48,-570.0,511.3,317.0,TA_DEPLOYED,70,64,-81.9,
66.3,319.0,TB_DEPLOYED,1513.51,16.0,0.0,0.0,0.0,0.0,0.0,0.0
23-08-2014 02 36 55,01-09-2014 00 00 13,31-08-2014 23 00 08,48.57566666666667,-9.339333333333334,
8.722246514887131,319.8,9.449891895292325,320.2,303,48,-570.0,511.3,317.0,TA_DEPLOYED,70,64,-81.9,
66.3,319.0,TB_DEPLOYED,1513.51,16.0,0.0,0.0,0.0,0.0,0.0,0.0
23-08-2014 02 36 57,01-09-2014 00 00 15,31-08-2014 23 00 08,48.59566666666667,-9.319333333333334,
8.522246514887131,321.8,9.549891895292325,321.2,303,48,-570.0,511.3,317.0,TA_DEPLOYED,70,64,-81.9,
66.3,319.0,TB_DEPLOYED,1513.51,16.0,0.0,0.0,0.0,0.0,0.0,0.0
23-08-2014 02 36 59,01-09-2014 00 00 19,31-08-2014 23 00 08,48.61566666666667,-9.269333333333334,
8.322246514887131,323.8,9.649891895292325,322.2,303,48,-570.0,511.3,317.0,TA_DEPLOYED,70,64,-81.9,
66.3,319.0,TB_DEPLOYED,1513.51,16.0,0.0,0.0,0.0,0.0,0.0,0.0</screen></para>
        </sect2>
      </sect1>
      <sect1 xml:id="SVG_symbol_format">
        <title>SVG Symbol Format</title>
        <sect2>
          <title>Introduction</title>
          <para>Traditionally, symbols were hard-coded in Java code, within Debrief.  When a new symbol was required, the graphically talented analyst
          would develop a set of pairs of coordinates for the new shape in Excel, then pass these to the maintainer, for their translation
          into source code.  Adopting SVG as a standard is seen as a way to get artist-drawn icons and symbols into Debrief.
          Learn more about the symbols provided in <xref linkend="symbol_sets"/>.</para>
        </sect2>
        <sect2>
          <title>Implementation</title>
          <para>SVG files are XML-based language schema showing how to render the images. Debrief has implemented a subset of the SVG format. It supports
          the following shapes: Circle, Ellipse, Line, Poligon, Polyline and Rectangle. Any other shape would be ignored in the rendering process. There
          are also some extra rules to guarantee that all the icons in Debrief have a consistant appearance.
   		  </para>
          <itemizedlist>
	          <listitem>
	            <para>They must have a size of 100x100 pixels</para>
	          </listitem>
	          <listitem>
	            <para>There must be an circle shape having the id <computeroutput>origin</computeroutput>. It indicates where is the center of the image, which is important to place it
	            in the correct position on tracks, labels, etc. This origin is also the centre of rotation for the shape, for shapes that are able to rotate.</para>
	          </listitem>
	          <listitem>
	            <para>If the user needs the shape to be able to rotate, you need to set the Circle color to Green. If you need to remain aligned as the original, just 
	            assign any other color</para>
	          </listitem>
	          <listitem>
	            <para>Image filling is very similar to the regular SVG shape. If the style is set to `<computeroutput>fill: none</computeroutput>` or `<computeroutput>fill-opacity: 0</computeroutput>` it will be empty.
	            It could also be assigned using the traditional XML attribute `fill-opacity` instead of style.</para>
	          </listitem>
	          <listitem>
	          	<para>In case you need to specify a color, you could do it using the attribute `<computeroutput>fill</computeroutput>`, assigning the color in hexagonal format.
	          	</para>
	          </listitem>
           </itemizedlist>
         </sect2>
	     <sect2>
	     	<title>Here are some examples:</title>
         	<para>
	          	<programlisting><![CDATA[ 
<?xml version="1.0" encoding="utf-8"?>
<svg width="100px" height="100px" viewBox="0 0 100 100" version="1.1" xmlns="http://www.w3.org/2000/svg">
  <polyline fill="#000000" fill-opacity="0" fill-rule="nonzero" stroke="#000000" stroke-width="5" points="5 53 20 24 35 53 50 24 65 53 80 24 95 53"/>
  <polyline fill="#000000" fill-opacity="0" fill-rule="nonzero" stroke="#000000" stroke-width="5" points="5 76 20 47 35 76 50 47 65 76 80 47 95 76"/>
  <circle id="origin" cx="50" cy="50" r="2.5" style="fill: rgb(255, 0, 0);"/>
</svg>
          	]]> </programlisting>
          	</para>
          	<para> In this case, we have an image with two polyline shape. Also pay attention to the circle shape which _must_ have the `id` attribute
          	value as `origin`.</para>
          	<para>
          		<programlisting><![CDATA[
<?xml version="1.0" encoding="utf-8"?>
<svg width="100px" height="100px" viewBox="0 0 100 100" version="1.1" xmlns="http://www.w3.org/2000/svg">
  <polygon id="Triangle-2" points="49.5 0 67.5 100 32.5 100"/>
  <circle id="origin" cx="50" cy="69" r="2.5" style="fill: rgb(0, 255, 0);"/>
</svg>
          		]]></programlisting>
          	</para>
          		
          		<para>We have only one polygon in this case. Please notice that this shape is able to rotate according to the subject vehicle.</para>
          		
	     </sect2>
          	
          	
      </sect1>
      <sect1 xml:id="BRT_format">
        <title>Third Party BRT Format</title>
        <sect2>
          <title>Introduction</title>
          <para>Some analysts use a third party software package to produce their bearing data.  Unfortunately, for towed array data
            the package calculates the absolute bearing using the current platform heading, not the heading for the platform
            was following when it was at the current array centre.
           </para>
          <para>
            But, since the packagea already outputs a data-file containing the relative bearing we're able to do our own calculation of
            absolute bearing, using a better value for ownship heading.
          </para>
        </sect2>
        <sect2>
          <title>Format</title>
          <para>The data is in two columns, elapsed seconds since the epoch, and the relative bearing in Degreees, like this:
          <programlisting>
            1263297600.000000, 69.00
            1263297840.000000, 67.85
            1263298080.000000, 65.63
            1263298320.000000, 63.33
          </programlisting>
          </para>
        </sect2>
      </sect1>

    </chapter>
    <chapter xml:id="GeoToolsRef">
      <title>GeoTools in Debrief</title>
      <sect1 xml:id="GeoToolsIntro">
        <title>Introduction</title>
        <para>The display of chart data in Debrief is all down to the <link xlink:href="http://geotools.org/"><citetitle>GeoTools</citetitle></link> library. Recently the SWT module was added to this library. The SWT module incorporates the SwtMapPane class upon which the Debrief plot now sits. With the incorporation of GeoTools brings a wide range of new file formats, both image and vector, plus more advanced topographic and earth model related capabilities. Rest assured, Debrief will exploit these library features as much as possible in coming months/years.</para>
      </sect1>
    </chapter>

    <chapter xml:id="chap_debrief_algorithms">
      <title>Debrief algorithms</title>

      <sect1 xml:id="rng_brg_calcs">
        <title>Range/Bearing calculations within Debrief</title>


        <para><indexterm>
            <primary>Range/bearing calculations</primary>
          </indexterm>Since Spring 2013, ranges and bearings within Debrief are calculated using the <link xlink:href="http://svn.osgeo.org/geotools/trunk/modules/library/referencing/src/main/java/org/geotools/referencing/GeodeticCalculator.java">GeoTools GeodeticCalculator</link> derivative of the T.Vincenty approximation: <programlisting>
        /*
         * Solution of the geodetic inverse problem after T.Vincenty.
         * Modified Rainsford&apos;s method with Helmert&apos;s elliptical terms.
         * Effective in any azimuth and at any distance short of antipodal.
         *
         * Latitudes and longitudes in radians positive North and East.
         * Forward azimuths at both points returned in radians from North.
         *
         * Programmed for CDC-6600 by LCDR L.Pfeifer NGS ROCKVILLE MD 18FEB75
         * Modified for IBM SYSTEM 360 by John G.Gergen NGS ROCKVILLE MD 7507
         * Ported from Fortran to Java by Daniele Franzoni.
         *
         * Source: ftp://ftp.ngs.noaa.gov/pub/pcsoft/for_inv.3d/source/inverse.for
         *         subroutine GPNHRI
         *         version    200208.09
         *         written by robert (sid) safford
         */ 
</programlisting></para>

        <para><emphasis>LEGACY ALGORITHM</emphasis> In the past, Debrief used the Rhumb-line calculation for the display of measured range-bearing and for the projection of data onto the monitor. Briefly, to convert from real-world to screen coordinates the following procedure was followed:</para>

        <para><orderedlist>
            <listitem>
              <para>Determine the area represented by the current viewed data in world coordinates</para>
            </listitem>

            <listitem>
              <para>Determine the centre of this data area - this is used as the origin of the data</para>
            </listitem>

            <listitem>
              <para>For each data point to be plotted, find its range and bearing from the origin</para>
            </listitem>

            <listitem>
              <para>Convert this range and bearing into a delta-x and delta-y in screen coordinates</para>
            </listitem>

            <listitem>
              <para>Produce a data point in screen coordinates by adding these deltas to the centre of the screen</para>
            </listitem>
          </orderedlist></para>

        <note>
          <para>The result of this projection algorithm (as with most others) is that whilst the information plotted at the centre horizontal section (mid-latitude) of the screen is an accurate representation, travelling further north and south from it degrades the accuracy. This is negligible in data areas near the equator or where only a small area is covered (less than a couple of hundred nautical miles). With greater data areas, and nearer the poles, the effects are more noticeable, however.</para>
        </note>

        <para>For those without access to the Admiralty Manual of Navigation, here is an abbreviated snippet from it:</para>

        <sect2 xml:id="rhumb-lines">
          <title>LEGACY - The Rhumb-Line formulae</title>

          <para>A line on the earth&apos;s surface which cuts all meridians at the same angle is called a rhumb line.</para>

          <para>With his knowledge of the distance along a parallel of latitude and the departure between two places, the navigator can find the course he must steer in order to follow the rhumb line joining the two places, and also the distance he will travel along whilst doing so. In <xref linkend="rhumb_line_parts"/> FT is the rhumb-line divided into a large number of equal parts FA, AB, BC... <figure xml:id="rhumb_line_parts">
              <title>Rhumb line parts</title>

              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/rhumb_line_segments.gif" width="200" align="center"/>
                </imageobject>
              </mediaobject>
            </figure></para>

          <para>Af, Ba, Cb... are the arcs of parallels drawn through A, B, C ... and the angles at f, a, b ..., are therefore at right-angles. If the divisions of FT are made sufficiently small, the triangles FaF, ABa, BbB ... are themselves small enough to be treated as plane triangles. Also, since the course angle at F, A, B, C, ... remains constant by the definition of a rhumb-line, these small triangles are equal.</para>
        </sect2>

        <sect2 xml:id="short_dist_sailing">
          <title>LEGACY - Short-distance sailing</title>

          <para>By the term <emphasis>short-distance sailing</emphasis> is meant the following of a rhumb-line track for a distance not greater than 600&apos;. Within this limiting distance, the navigator can obtain all he wants to know about the track from the three formulae:</para>

          <para><screen> <markup>
departure = d.long cos (mean latitude)   (1)
departure = distance sin (course)     (2)
d.lat = distance cos (course)         (3)

The course is given by (2) divided by (3). Thus:
departure / d.lat = tan (course)</markup>
            </screen></para>
        </sect2>
      </sect1>

      <sect1 xml:id="WormInHole">
        <title>Worm in the hole algorithm</title>

        <sect2 xml:id="WormOverview">
          <title>Overview</title>

          <para><indexterm>
              <primary>Algorithms</primary>
              <secondary>Worm in the hole</secondary>
            </indexterm>Frequently vehicles in Debrief use sensors with a different datum to the host platform - either because they&apos;re several metres from the position recorded datum on board the platform, or because they&apos;re an offboard sensor dragged behind the sensor. For an onboard sensor it is acceptable to locate the sensor by reference to its sensor length offset in conjunction with the current heading. However for an offboard sensor this coarse calculation may not be representative of the actual sensor location. When a platform is on a straight-line course, it is acceptable to plot the sensor datum back along the reverse heading. But, when a platform has travelled through a turn, plotting the sensor datum at the reciprocal of the platform heading will place the sensor in an unrealistic location. To counter this, Debrief offers a &apos;Worm in the hole&apos; sensor locating model.</para>

          <para>The &apos;worm in the hole&apos; algorithm takes the sensor length offset value, and determines the point this specified distance back along the platform track. The metaphor is that a worm has opened a tunnel through a body of material. The sensor is being dragged through this tunnel, and we determine the sensor location accordingly.</para>

          <note>
            <para>This is not a perfect algorithm. In truth, during a turn the forces on a towed array will cause it to slip sideways, cutting off the corner to an extent. It is the responsibility of the analyst to appraise himself with array performance and determine the applicability of the worm in the hole algorithm - though note its results are much more accurate than the non-worm in the hole straight line model.</para>
          </note>
        </sect2>

        <sect2 xml:id="WormExample">
          <title>Example</title>

          <para>The screenshot belows shows a comparison of the two models. The red ownship track has positions at times 100,200,300 and 400. The sensor track has positions at times 100,140,280,350. The array is 400m long.</para>

          <para>The two array models show the same value for the first 3 points plotted: in the first two of these the array falls behind the start of the ownship track - thus the reciprocal of ownship heading is necessary to determine the position. In the third position, the length of the 400m array falls completely within the 600m leg.</para>

          <para>The fourth position is, however, different. The straight-line model plots it back along the reciprocal of the platform heading at time 300. The worm in the hole model, however, turns back along the ownship track from position 200 to 300. At time 350, the ownship platform will be 1/2 way down between positions 300 and 400 - this will consume 1/2 of the 600m separation (300m), leaving another 100m of array to be consumed - this the algorithm moves 100m back down between the points at 200 &amp; 300.<screenshot>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/WormInHole.png" scalefit="1" width="100%"/>
                </imageobject>
              </mediaobject>
            </screenshot></para>
        </sect2>

        <sect2 xml:id="WormAlgorithm">
          <title>Algorithm</title>

          <para>The worm in the hole algorithm is implemented as follows:<orderedlist>
              <listitem>
                <para>Determine platform track, the time at which sensor location is required, the specified length offset, and whether the sensor is &apos;ticked&apos; for &apos;worm in the hole algorithm&apos;.</para>
              </listitem>

              <listitem>
                <para>Work through the platform track to find the position immediately after the specified dtg, together with a list of points preceding that. These represent the &apos;nextPoint&apos; and the backTrack from that dtg.</para>
              </listitem>

              <listitem>
                <para>Calculate the platform position at the specified dtg by interpolating between the last item of the backTrack and the nextPoint , at the specified dtg. Name this new position nextPoint - it represents the platform position at the specified dtg</para>
              </listitem>

              <listitem>
                <para>Now repeatedly perform the following:<orderedlist>
                    <listitem>
                      <para>Work out the distance from nextPoint to the last item in the backTrack</para>
                    </listitem>

                    <listitem>
                      <para>If this distance is greater than the remaining array offset length then:<orderedlist>
                          <listitem>
                            <para>Work out the proportion of the distance that the remaining sensor length represents, name it timeDelta</para>
                          </listitem>

                          <listitem>
                            <para>Interpolate back from nextPoint to the last item in the backTrack by the timeDelta parameter. This is the resultant sensor location</para>
                          </listitem>
                        </orderedlist></para>
                    </listitem>

                    <listitem>
                      <para>If the calculated distance is less than the remaining sensor length then<orderedlist>
                          <listitem>
                            <para>reduce the remaining sensor length by the calculated distance (to represent the array being &apos;consumed&apos; by the backTrack)</para>
                          </listitem>

                          <listitem>
                            <para>if there are any more points in the backTrack then<orderedlist>
                                <listitem>
                                  <para>store the last point on the backTrack as nextPoint, and move back along the backTrack by one element</para>
                                </listitem>
                              </orderedlist> else<orderedlist>
                                <listitem>
                                  <para>calculate the offset back from the start of the platform track, of the remaining sensor length, along the reciprocal of the vessel heading. This is the resultant sensor location.</para>
                                </listitem>
                              </orderedlist></para>
                          </listitem>
                        </orderedlist></para>
                    </listitem>
                  </orderedlist></para>
              </listitem>
            </orderedlist></para>
        </sect2>
      </sect1>

      <sect1 xml:id="other_algs">
        <title>Other Debrief algorithms</title>

        <sect2 xml:id="freq_alg">
          <title>Frequency algorithms</title>

          <para><indexterm>
              <primary>Algorithms</primary>
              <secondary>Frequency</secondary>
            </indexterm>In the Single Sided Reconstruction extensions to Debrief (2009) the use of frequency data in track reconstruction, specifically involving the application of Doppler Offsets. The algorithms used have been loosely taken from the Royal Naval Submarine School training guide titled <emphasis>The Bearing Frequency Plot and Narrowband Analysis</emphasis>. The core doppler calculation is as follows:<programlisting>	private static double calcDopplerComponent(final double theBearingRads,
      final double myCourseRads, 
      final double mySpeedKts,	final double observedFreq)
	{
		final double speedOfSoundKts = 2951;
		double relBearingRads = theBearingRads - myCourseRads;

		final double ownSpeedAlongKts = Math.abs(Math.cos(relBearingRads)
				* mySpeedKts);

		// put rel brg into +/- 180 domain
		while (relBearingRads &gt; Math.PI)
			relBearingRads -= (2 * Math.PI);
		while (relBearingRads &lt; -(Math.PI))
			relBearingRads += (2 * Math.PI);

		double dopplerOffset = (ownSpeedAlongKts * observedFreq) / speedOfSoundKts;

		if (Math.abs(relBearingRads) &lt; (Math.PI / 2))
			dopplerOffset = -dopplerOffset;
		return dopplerOffset;
	}</programlisting>The doppler calculation is used in calculation of the corrected frequency - which involves the removal of the ownship doppler component:<programlisting>	public double getCorrectedFrequency()
	{
		double correctedFreq = 0;

		final double theBearingDegs = getBearingToTarget();
		final double theBearingRads = MWC.Algorithms.Conversions
				.Degs2Rads(theBearingDegs);
		final double myCourseRads = _hostFix.getCourse();

		final double mySpeedKts = _hostFix.getSpeed();
		double observedFreq = _sensor.getFrequency();
		final double dopplerComponent = calcDopplerComponent(theBearingRads,
				myCourseRads, mySpeedKts, observedFreq);

		correctedFreq = observedFreq + dopplerComponent;

		return correctedFreq;
	}</programlisting>The next frequency calculation involves the addition of ownship and target dopplers to the base frequency: <programlisting>	public double getPredictedFrequency()
	{
		double predictedFreq = 0;

		if (_targetTrack instanceof RelativeTMASegment)
		{
			RelativeTMASegment rt = (RelativeTMASegment) _targetTrack;
			final double theBearingDegs = getBearingToTarget();
			final double theBearingRads = MWC.Algorithms.Conversions
					.Degs2Rads(theBearingDegs);
			final double myCourseRads = _hostFix.getCourse();

			final double mySpeedKts = _hostFix.getSpeed();
			double baseFreq = rt.getBaseFrequency();
			final double myDopplerComponent = calcDopplerComponent(theBearingRads,
					myCourseRads, mySpeedKts, baseFreq);

			final double hisCourseRads = _targetFix.getCourse();
			final double hisSpeedKts = _targetFix.getSpeed();

			final double hisDopplerComponent = calcDopplerComponent(Math.PI
					+ theBearingRads, hisCourseRads, hisSpeedKts, baseFreq);

			predictedFreq = baseFreq - (myDopplerComponent + hisDopplerComponent);
		}
		return predictedFreq;
	}</programlisting></para>
        </sect2>
      </sect1>

      <sect1 xml:id="RemoveJumpsRef">
        <title>Remove Jumps</title>
        <sect2 xml:id="RemoveJumpsBack">
          <title>Background</title>
          <indexterm>
            <primary>Track sections</primary>
            <secondary>Remove jumps (algorithm)</secondary>
          </indexterm>

          <para>
            <note>
              <para>Read the user perspective on removing jumps in the user guide (<xref linkend="RemoveJumpsUser"/>)</para>
            </note> The initial strategy to remove drift was to find the range/direction of the jump from the last dived point to the first GPS fix. But, during implementation it became clear that this wouldn&apos;t work. What was actually needed was to "plot-on" the last dived point to derive where the dived track would be at the time of the GPS fix. The following diagram shows a stylized representation of a period of dived drift. <screenshot>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/JumpRefOne.png" scalefit="1" width="100%"/>
                </imageobject>
              </mediaobject>
            </screenshot> In the diagram, the measured track is AEF, but the true track was AF. We can see that the correct location for B is B&apos;, C is C&apos;, and so on. So, the vector necessary to transform B to B&apos; is 135 degs length 1.41 (sqrt(2)). This correct vector can be obtained by producing the virtual point F&apos;, which is defined as “where would F be if there hadn’t been a jump”. Using F&apos;-F as the offset vector gives the correct result. </para>
        </sect2>
        <sect2 xml:id="RemoveJumpsAlg">
          <title>Algorithm</title>
          <para>
            <orderedlist>
              <listitem>
                <para>Analyst selects period of data.</para>
              </listitem>
              <listitem>
                <para>The first position is stored as a “lock point”.</para>
              </listitem>
              <listitem>
                <para>Loop forwards through data, looking for large position deltas (where calculated speed equates to 3 or more time the measured speed travelled in the previous step).</para>
              </listitem>
              <listitem>
                <para>Each time we find a jump, the position after the jump is a “lock point”, the position before jump is the “jump point”. The delta between the two is the “jump offset”.</para>
              </listitem>
              <listitem>
                <para>From the first lock-point, move forwards through the data until you find a jump point. If a jump point is found, pass through those points, applying the relative sliced jump offset to each point.</para>
              </listitem>
            </orderedlist> The diagram belows shows the results of remove jumps. The yellow track ABCDEFG is the recorded track. The points A,C,E,G are the lock-points (GPS fixes). The blue track is the track after running remove jumps. Note that AC is longer than AB, so the algorithm has rotated and scaled AB. Similarly, CE is shorter than CD and gets scaled to produce CE. EG shows how a complex shape gets transformed to fit the lock points. <screenshot>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/JumpRefTwo.png" scalefit="1" width="100%"/>
                </imageobject>
              </mediaobject>
            </screenshot>
          </para>
        </sect2>
      </sect1>
      <sect1 xml:id="contouring_algorithm">
        <title>Contouring algorithm</title>

        <para>The contouring algorithm employed within Debrief was originally produced by Paul Bourke back in 1987, for submission to the Byte magazine. Here&apos;s the article pretty much verbatim:</para>

        <sect2 xml:id="contour_intro">
          <title>Introduction</title>

          <para>This article introduces a straightforward method of contouring some surface represented as a regular triangular mesh.</para>

          <para>Contouring aids in visualizing three dimensional surfaces on a two dimensional medium (on paper or in this case a computer graphics screen).</para>

          <para>Two most common applications are displaying topological features of an area on a map or the air pressure on a weather map. In all cases some parameter is plotted as a function of two variables, the longitude and latitude or x and y axis. One problem with computer contouring is the process is usually CPU intensive and the algorithms often use advanced mathematical techniques making them susceptible to error.</para>
        </sect2>

        <sect2 xml:id="conrec_intro">
          <title>CONREC</title>

          <para><indexterm>
              <primary>Algorithms</primary>
              <secondary>Contouring</secondary>
            </indexterm>To do contouring in software you need to describe the data surface and the contour levels you want to have drawn. The software given this information must call the algorithm that calculates the line segments that make up a contour curve and then plot these line segments on whatever graphics device is available.</para>

          <para>CONREC satisfies the above description, it is relatively simple to implement, very reliable, and does not require sophisticated programming techniques or a high level of mathematics to understand how it works.</para>

          <para>The input parameters to the CONREC subroutine are as follows : <itemizedlist>
              <listitem>
                <para>The number of horizontal and vertical data points designated iub and jub.</para>
              </listitem>

              <listitem>
                <para>The number of contouring levels, nc.</para>
              </listitem>

              <listitem>
                <para>A one dimensional array z(0:nc-1) that saves as a list of the contour levels in increasing order. (The order of course can be relaxed if the program will sort the levels)</para>
              </listitem>

              <listitem>
                <para>A two dimensional array d(0:iub,0:jub) that contains the description of the data array to be contoured. Each element of the array is a sample of the surface being studied at a point (x,y)</para>
              </listitem>

              <listitem>
                <para>Two, one dimensional arrays x(0:iub) and y(0:jub) which contain the horizontal and vertical coordinates of each sample point. This allows for a rectangular grid of samples.</para>
              </listitem>
            </itemizedlist><figure xml:id="conrec_input">
              <title>Some of the CONREC input parameters.</title>

              <screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/contour_1.gif" align="center"/>
                  </imageobject>
                </mediaobject>
              </screenshot>
            </figure></para>

          <para/>

          <para>The contouring subroutine CONREC does not assume anything about the device that will be used to plot the contours. It instead expects a user written subroutine called VECOUT. CONREC calls VECOUT with the horizontal and vertical coordinates of the start and end coordinates of a line segment along with the contour level for that line segment. In the simplest case this is very similar to the usual LINE (x1,y1)-(x2,y2) command in BASIC. See the source code listing below.</para>
        </sect2>

        <sect2 xml:id="conrec_alg">
          <title>Algorithm</title>

          <para>As already mentioned the samples of the three dimensional surface are stored in a two dimensional real array. This rectangular grid is considered four points at a time, namely the rectangle d(i,j), d(i+1,j), d(i,j+1), and d(i+1,j+1). The centre of each rectangle is assigned a value corresponding to the average values of each of the four vertices. Each rectangle is in turn divided into four triangular regions by cutting along the diagonals. Each of these triangular planes may be bisected by horizontal contour plane. The intersection of these two planes is a straight line segment, part of the contour curve at that contour height.</para>

          <para>Depending on the value of a contour level with respect to the height at the vertices of a triangle, certain types of contour lines are drawn. The 10 possible cases which may occur are summarised below <orderedlist numeration="loweralpha">
              <listitem>
                <para>All the vertices lie below the contour level.</para>
              </listitem>

              <listitem>
                <para>Two vertices lie below and one on the contour level.</para>
              </listitem>

              <listitem>
                <para>Two vertices lie below and one above the contour level.</para>
              </listitem>

              <listitem>
                <para>One vertex lies below and two on the contour level.</para>
              </listitem>

              <listitem>
                <para>One vertex lies below, one on and one above the contour level.</para>
              </listitem>

              <listitem>
                <para>One vertex lies below and two above the contour level.</para>
              </listitem>

              <listitem>
                <para>Three vertices lie on the contour level.</para>
              </listitem>

              <listitem>
                <para>Two vertices lie on and one above the contour level.</para>
              </listitem>

              <listitem>
                <para>One vertex lies on and two above the contour level.</para>
              </listitem>

              <listitem>
                <para>All the vertices lie above the contour level.</para>
              </listitem>
            </orderedlist></para>

          <para>In cases a, b, i and j the two planes do not intersect, i.e. no line need be drawn. For cases d and h the two planes intersect along an edge of the triangle and therefore line is drawn between the two vertices that lie on the contour level. Case e requires that a line be drawn from the vertex on the contour level to a point on the opposite edge. This point is determined by the intersection of the contour level with the straight line between the other two vertices. Cases c and f are the most common situations where the line is drawn from one edge to another edge of the triangle. The last possibility or case g above has no really satisfactory solution and fortunately will occur rarely with real arithmetic. <figure xml:id="contour_lines">
              <title>Possible line orientations</title>

              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/contour_2.gif" align="center"/>
                </imageobject>
              </mediaobject>
            </figure></para>
        </sect2>

        <sect2 xml:id="conrec_demo">
          <title>Example</title>

          <para>As a simple example consider one triangle with vertices labelled m1,m2 and m3 with heights 0, 2 and 3 respectively <figure xml:id="line_permutations">
              <title>Line permutations within contouring algorithm.</title>

              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/contour_3.gif" align="center"/>
                </imageobject>
              </mediaobject>
            </figure></para>

          <para>To calculate where a contour line at a height of 1 should be drawn, it can be seen that this is case f described earlier. Level 1 intersects line segment m1-m2 half the way along and it intersects line segment m1-m3 one third of the way along. A line segment is drawn between these two points. Each rectangular mesh cell is treated this way.</para>
        </sect2>

        <sect2 xml:id="conrec_sub">
          <title>Subroutine</title>

          <para>An attempt is made at optimization by checking first to see if there are any contour levels within the present rectangle and second that there are some contour levels within the present triangle. The indices i and j are used to step through each rectangle in turn, k refers to each contour level and m to the four triangles in each rectangle. <figure xml:id="contour_notations">
              <title>Some of the notation used for identifying the rectangles and triangles in the subroutine</title>

              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/contour_4.gif" align="center"/>
                </imageobject>
              </mediaobject>
            </figure> Note that for large arrays the whole data array need not be stored in memory . Since the algorithm is a local one only requiring 4 points at a time, the data for each rectangle could be read from disk as required.</para>
        </sect2>

        <sect2 xml:id="more_conrec_demo">
          <title>Example</title>

          <para>Contour map and the following function <figure xml:id="contour_function_demo">
              <title>Function to be contoured</title>

              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/contour_5.gif"/>
                </imageobject>
              </mediaobject>
            </figure><figure xml:id="sample_conrec_plot">
              <title>Sample contour plot using CONREC algorithm</title>

              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/contour_6.gif" align="center"/>
                </imageobject>

                <caption><para>Contouring algorithm</para></caption>
              </mediaobject>
            </figure>The sample contour plot itself</para>
        </sect2>

        <sect2 xml:id="conrec_note">
          <title>Note</title>

          <para>On occasion users have reported gaps in their contour lines, this should of course never happen. There is however a pathological case that all local contouring algorithms suffer from (local meaning that they only use information in the immediate vicinity to determine the contour lines). The problem arises when all four vertices of a grid cell have the same value as the contour level under consideration. There are a number of strategies that can be employed to overcome this special event, the correct way is to consider a larger region in order to join up the contours on either side of the problem cell. CONREC doesn&apos;t do this and just leaves the cell without any contour lines thus resulting in a gap. This special case essentially never happens for real values data, it is most commonly associated with integer height datasets. The simplest solution is to offset the contour levels being drawn by a very small amount.</para>
        </sect2>
      </sect1>
    </chapter>
    <chapter xml:id="chap_genetic_algorithms">
      <title>Semi Automated Track Construction (SATC)</title>

      <section>
        <title>High-Level SATC Concepts</title>

        <para>This section records the high-level concepts related to the Semi-Automatic Track Construction (SATC) implementation in <application>Debrief</application>. The content presented here represents system documentation, not necessarily targeted at the routine SATC user, user guidance is contained in <xref linkend="satc"/>.</para>



        <section>
          <title>Strategy</title>

          <para>Some BOT strategies focus very strongly on the bearing data, with other aspects (priors, constraints, etc) used to refine the end product.</para>

          <para>Since we&apos;re doing this process with hindsight, we have more data available. So we&apos;re taking a more free-form approach, where any type of information can contribute to the solution. This will make it easier to add other contributing information in the future. </para>

          <para>Each time the analyst/user submits some information to be used in the algorithm he&apos;s contributing to the answer - so the piece of information is termed a contribution. </para>
        </section>

        <section>
          <title>Process</title>

          <para>In generating one or more vehicle solutions the system will first constrain the global problem space, then generate candidate solutions within that space, and lastly assess their performance. If none of the candidate solutions are acceptable the analyst may refine existing contributions, or supply more contributions to further inform the system. These phases are described in more detail later, once we&apos;ve covered the necessary data concepts.</para>
        </section>

        <section>
          <title>Data Concepts</title>

          <section>
            <title>Scenario</title>

            <para>A single instance of performing SATC on a set of data, plus contributions is called a Scenario. This includes all contributions and their states. It also includes the measurements that inform a Measurement Contributions. A scenario may be saved to file, in order that its analysis may continue at another time.</para>
          </section>

          <section>
            <title>Problem space</title>

            <para>The problem space is a series of bounded vehicle state objects with a Vehicle Performance instance.</para>
          </section>

          <section>
            <title>Vehicle Track</title>

            <para>A track is comprised of a series of Vehicle State objects. It represents an estimate of the path followed by a vehicle for a period of time. </para>
          </section>

          <section>
            <title>Leg</title>

            <para>A leg represents a period of vehicle track. The leg may be a straight leg (representing the way vehicles normally move) or an alteration leg (representing how a vehicle makes the transition from one straight leg to another). The fact that the a set of Vehicle States (or Bounded Vehicle States) objects are in a straight or altering leg means we can infer further constraints/relaxations on them. </para>
          </section>

          <section>
            <title>Vehicle State</title>

            <para>A vehicle state is represented as a time, location, course and speed. </para>
          </section>

          <section>
            <title>Bounded Vehicle State</title>

            <para>A bounded vehicle state describes a range of possible vehicle states. It includes a course range (min-max, always clockwise), a speed range (min-max), and a polygon representing spatial constraints. </para>

            <note>
              <para>We use a polygon for location instead of min/max values for lat/long values so that we gain access to more complex spatial operations. </para>
            </note>

            <note>
              <para>We may need to introduce non-continuous ranges for these states. We may need to constrain course, for example, to being in the range of either 040-060 or 130-150. But, as of Nov 2012 this requirement hasn&apos;t emerged yet.</para>
            </note>
          </section>

          <section>
            <title>Straight Leg</title>

            <para>A straight leg is uniform, with constant course and speed. When constraining the problem space the leg will be formed from multiple bounded vehicle states, but when candidate solutions are being generated they will always have constant course and speed. During the Constrain the problem space phase we allow the straight leg to be comprised of varying bounded vehicle states to allow a manoeuvre detection algorithm to detect that there must actually be a course or speed change within the leg (since there isn&apos;t a single course or speed that is achievable along the whole leg), leading to the introduction of an alteration leg.</para>
          </section>

          <section>
            <title>Alteration Leg</title>

            <para>An alteration leg allows for change in course and/or speed. The alteration leg may represent a speed change, a course change, or a period for which insufficient data is available to suggest straight-line travel (in which case there may be an unpredictable number of course/speed changes). Consequently an Alteration Leg doesn&apos;t just have values for vehicle state at either end, it is expressed as a series of vehicle states (or bounded vehicle states in the constrain the problem space phase).</para>
          </section>

          <section>
            <title>Contribution</title>

            <para>A contribution is a piece of knowledge supplied by the analyst. Beyond the simple, abstract description provided below, specific contributions may contain great algorithmic complexity. </para>

            <section>
              <title>Contribution attributes</title>

              <para>The contribution will always have at least one of </para>

              <itemizedlist spacing="compact">
                <listitem>
                  <para><emphasis>Hard constraints</emphasis> - these are values that are used to constrain the problem space. Candidate solutions will not be considered that fall outside these constraints</para>
                </listitem>

                <listitem>
                  <para><emphasis>Estimate</emphasis> - these are values that are used to assess the performance of a candidate solution. The estimate may be a single value or a range. Candidate solutions will be assessed according to their proximity to the specified value/range.</para>
                </listitem>
              </itemizedlist>

              <para>It may also have: </para>

              <itemizedlist spacing="compact">
                <listitem>
                  <para><emphasis>Time bounds</emphasis> - the period for which the contribution is valid. Note: a contribution does not need time bounds. For example, a hard constraint that a vehicle has a maximum speed of 20 knots is time independent.</para>
                </listitem>

                <listitem>
                  <para><emphasis>Weighting</emphasis> - used to affect the significance of this contribution when comparing candidate solutions (only used if estimate data is present)</para>
                </listitem>
              </itemizedlist>
            </section>

            <section>
              <title>Contribution abilities</title>

              <para>A contribution is able to:</para>

              <itemizedlist spacing="compact">
                <listitem>
                  <para><emphasis>Constrain the problem space</emphasis>: Take a set of bounded vehicle states, and return another set of bounded vehicle states. The returned set of bounded states will normally have been reduced in bounds by the contribution. But, the contribution may also have introduced new legs (with states). The introduction of new legs may be the product of a manoeuvre detection algorithm.</para>
                </listitem>

                <listitem>
                  <para><emphasis>Assess candidate solutions</emphasis>: Take a series of vessel states and measure the error from any estimate values/ranges.</para>
                </listitem>
              </itemizedlist>
            </section>
          </section>

          <section>
            <title>Reference contribution</title>

            <para>This type of contribution represents some known fact about the vehicle. It may include max/min attainable speed, max/min acceleration and deceleration rates, and max/min turning circles. These contributions are normally time independent, and typically only have hard constraints. Reference contributions are typically only effective in constraining the problem space, they do not assist in the assessment of candidate solutions. An example of a reference contribution is the Vehicle Performance Reference Contribution.</para>

            <para>In implementation, it is expected that a ‘library&apos; of reference data be made available to the analyst. The analyst may load a contribution from the library, but changes made to that contribution would only be made locally - the library would remain unchanged.</para>
          </section>

          <section>
            <title>Forecast Contribution</title>

            <para>This type of contribution represents an analyst&apos;s forecast of vehicle behaviour. The forecasts are typically time bounded. They normally have estimates, and may also have hard constraints: “the vehicle is probably travelling between 4 and 6 knots. It is certainly not travelling outside 2 and 10 knots”. These contributions are probably to be used in both constraining the problem space and assessing candidate solutions. Examples of a forecast contribution are the Speed Forecast Contribution and the Straight leg forecast contribution.</para>
          </section>

          <section>
            <title>Measurement contribution</title>

            <para>This type of contribution represents some measurement on the vehicle, such as that produced by a radar or sonar. The contribution is a time-stamped collection of measurements. Hard constraints may apply to error ranges on the sensor (bearing or range, for example). The measurement itself is interpreted as an estimate. An example of measurement contribution is the Bearing Measurement Contribution. The analyst should be provided with a means of suppressing some measurements. In the <application>Debrief</application> implementation it is proposed that this is done by setting them to not visible in the Outline View.</para>
          </section>

          <section>
            <title>Analysis contribution</title>

            <para>This type of contribution uses algorithms to either constrain the problem space, or assess the performance of a candidate solution - they contain no attributes. These contributions may not have to be explicitly specified by an analyst - they may be permanently present. An example of an analysis contribution is the Speed Analysis Contribution.</para>
          </section>
        </section>

        <section>
          <title>Algorithms</title>

          <section>
            <title>Constrain the global problem space</title>

            <para>It is thought that the generation and assessment of candidate solutions is an expensive process, so the problem space will be constrained as far as possible prior to consideration of candidate solutions. </para>

            <para>The analyst triggers the generation of a new solution, specifying a time period. Here&apos;s what happens next:</para>

            <orderedlist>
              <listitem>
                <para>The algorithm initialises a problem space containing zero bounded state objects.</para>
              </listitem>

              <listitem>
                <para>This unbounded set of states is then populated with any Reference Contributions - significantly using the vehicle performance characteristics (min/max speed).</para>
              </listitem>

              <listitem>
                <para>Analyst-contributed measurement contributions are then applied to the bounded vehicle state. Measurement Contributions will typically generate a new bounded vehicle state for each measurement available.</para>
              </listitem>

              <listitem>
                <para>The system then repeatedly applies the analysis contributions, reference contributions, forecast contributions until the bounded vehicle state becomes stable. We repeatedly run through the contributions since some of them are capable of generating new bounded vehicle constraints - to which hard constraints present in forecast contributions and reference contributions should be applied. Any changes in contributions then need to be processed by the analysis contributions. <note>
                    <para>We may not achieve an unchanging bounded state due to perturbations in the algorithm, so we decide it&apos;s stable when there are negligible differences. </para>
                  </note>
                </para>
              </listitem>
              <listitem>
                <para>If the user has indicated <guibutton>Suppress Cuts</guibutton> then cuts are suppressed as follows: <orderedlist>
                    <listitem>
                      <para>Decide how many cuts to be <link linkend="SuppressingCuts">suppressed</link>. Each <link linkend="satc_precision">precision</link> level has a different %age, from 80% in Low Precision to 20% in High Precision</para>
                    </listitem>
                    <listitem>
                      <para>Loop through the states, and identify each bounded state that doesn&apos;t represent the first or last state in a leg. For each of these "Available" states, determine the overlap (intersection) between its Location Polygon and the Polygon from the previous state. </para>
                    </listitem>
                    <listitem>
                      <para>Store the "Available" states in ascending order of overlap since the previous polygon</para>
                    </listitem>
                    <listitem>
                      <para>Delete the lowest 20% of these available states, or the required number to reach the target limit (whichever is the smaller value).<note>
                          <para>We don&apos;t delete the required number of states in the first pass, we must remove a proportion at each step to ensure we retain the most significant location states.</para>
                        </note></para>
                    </listitem>
                  </orderedlist>
                </para>
              </listitem>
            </orderedlist>
            <para><note xml:id="SuppressingCuts">
                <para> The following images show the effect of cut suppression. It is surprising how many cuts can be suppressed whislt still producing an effective solution. <figure xml:id="no_suppress">
                    <title>Solution showing all bounded states</title>
                    <mediaobject>
                      <imageobject>
                        <imagedata fileref="figures/NoSuppress.png" align="center" width="100%"/>
                      </imageobject>
                      <caption><para>A solution showing all bounded states</para></caption>
                    </mediaobject>
                  </figure>
                  <figure xml:id="cuts_suppressed">
                    <title>Solution showing low precision cut suppression</title>
                    <mediaobject>
                      <imageobject>
                        <imagedata fileref="figures/CutsSuppressed.png" align="center" width="100%"/>
                      </imageobject>
                      <caption><para>A solution showing Low Precision cut suppression</para></caption>
                    </mediaobject>
                  </figure>
                </para>
              </note></para>
            <para>On completion the algorithm moves on to generating and assessing candidate solutions.</para>
          </section>

          <section>
            <title>Generate and assess candidate solutions</title>

            <para>The system will investigate candidate solutions offering the single or multiple best candidates to the user. </para>

            <orderedlist>
              <listitem>
                <para>A solution generator generates a candidate solution that falls within the problem space, defined as a series of vehicle states - one at each bounded vehicle state. </para>
              </listitem>

              <listitem>
                <para>The candidate solution is then provided to the contributions, which return a performance score for that solution.</para>
              </listitem>

              <listitem>
                <para>The score of a solution may then be passed to the solution generator to inform successive generations.</para>
              </listitem>

              <listitem>
                <para>The system will then collate optimal solutions for presentation to the analyst. </para>
              </listitem>

              <listitem>
                <para>The analyst may elect to convert one or more solutions into permanent vehicle tracks, tune existing contributions, or provide new ones.</para>
              </listitem>
            </orderedlist>

            <para>The processing power available with modern desktop PCs is seen as an enabler that may allow a ‘brute-force&apos; approach to solution assessment. </para>

            <para>Beyond the brute-force approach, a feedback loop may inform the generation of successive solutions, using their assessed effectiveness. Such a loop would support the evolutionary production of candidate solutions, such as those in a genetic algorithm.</para>
          </section>

          <section>
            <title>Solution generator</title>

            <para>The solution generator is an algorithm that is able to take a problem space definition, and use the contributions to define possible course and speed permutations for a series of start points. </para>

            <para>Solutions are generated leg-by-leg as follows:</para>

            <itemizedlist>
              <listitem>
                <para>Apply a grid to the bounded locations for the start of the first leg. </para>
              </listitem>

              <listitem>
                <para>Apply a grid to the bounded locations for the end of the first leg. </para>
              </listitem>

              <listitem>
                <para>We can now create a matrix with start points down the left-hand side, and end points along the top. The matrix represents the relationship between each start point to each end point. We&apos;ll term it the “leg one attainable matrix”, since it will record which end points are attainable from each start point in leg one. </para>
              </listitem>

              <listitem>
                <para>Take the first point in the start grid. </para>
              </listitem>

              <listitem>
                <para>Pass this point to the set of contributions, and invite them to generate a set of bounded vehicle states specific to this start point. We can picture this set of bounded states as a polygon of possible end-points respective to this start points. </para>
              </listitem>

              <listitem>
                <para>Record in the matrix whether each end point is within this polygon. </para>
              </listitem>

              <listitem>
                <para>Now loop through the other start points. </para>
              </listitem>

              <listitem>
                <para>We now move along the solution, and consider the next leg. Do this by creating a “Leg two attainable matrix”. The set of end points for leg one now become the start points for leg two, and form the rows of the matrix. The end points for leg two form the columns. </para>
              </listitem>

              <listitem>
                <para>We repeat the process of working through the start points for this leg and determining the resultant polygon of achievable positions - marking which end points are achievable. </para>
              </listitem>

              <listitem>
                <para>This process continues until we have passed along the whole set of legs. </para>
              </listitem>

              <listitem>
                <para>Next we do some fancy maths to determine the attainable leg permutations: each leg matrix is multiplied against the matrix for the successive leg. The resulting matrix contains the possible leg permutations - from start points in the first leg, to end points in the last leg. So, it is only cells that have a non-zero value that need to be considered. </para>
              </listitem>

              <listitem>
                <para>At some point we need to consider introducing variance in the time periods for legs and contributions. I suspect we&apos;re ok doing this at the solution generation point - where we allow some subtle variance in the vessel state that is generated from the bounded vessel state.</para>
              </listitem>
            </itemizedlist>
          </section>

          <section>
            <title>Genetic algorithm</title>

            <para>One methodology for producing candidate solutions is the use of a genetic algorithm. We already refer to the potential matching tracks as candidate solutions. We can then consider the error-from-estimate value as the fitness function for that solution. We can then consider the legs that comprise that solution as the discrete genes within the genotype.</para>

            <para> Well, that makes reasonable enough sense, but it&apos;s 10 years since I&apos;ve implemented a G.A. I&apos;d rather work in the context that we have location, course, speed as the three genes that get compared - so that we&apos;re solving single leg solutions. </para>

            <para>Maybe there&apos;s merit in a two-phase GA construct: </para>

            <orderedlist spacing="compact">
              <listitem>
                <para>come up with a range of ‘fit&apos; candidates for each leg (where the gene is loc, crse,spd). </para>
              </listitem>

              <listitem>
                <para>then scale up so we have a much longer gene - a series of loc, crse, spd values representing all of the legs.</para>
              </listitem>
            </orderedlist>
            <note>
              <para>Genetic Algortihms have proven to be the most versatile and effect optimisation strategy for SATC. The SATC implementation of GA is recorded in further detail at <xref linkend="satc_ga"/></para>
            </note>
          </section>

          <section>
            <title>Collate optimal solutions</title>

            <para>It is expected that the system will generate and investigate many, many solutions. For some scenarios there may be one (or few) solutions with very high performance. These can be presented directly to the analyst for consideration. For other scenarios there may be many solutions that offer a similar performance result. It is proposed that the system has a means by which it offers distinct solutions to the analyst, in order to further refine the contributions. Such processes could include:<variablelist>
                <varlistentry>
                  <term>Extreme solutions</term>
                  <listitem>
                    <para>The system could examine the solutions, and highlight those that have have extremes of course, speed, location within the bounded vehicle states. For these extreme solutions the system could show how particular contributions ‘contributed&apos; to their performance score - to allow the estimate or hard constraints on those contributions to be relaxed/tightened.</para>
                  </listitem>
                </varlistentry>
                <varlistentry>
                  <term>Bounded vehicle states </term>
                  <listitem>
                    <para>Alternatively, where too many solutions are provided, the system could (somehow) provide a visualisation of the set of bounded vehicle states. The analyst may determine that for a period of time there are insufficient or excessive constraints on the problem space and adjust the contributions accordingly to either tighten the space, or loosen the space to allow fresh solutions to be considered.</para>
                  </listitem>
                </varlistentry>
              </variablelist></para>
          </section>

          <section>
            <title>Manoeuvre Detection Algorithm</title>

            <para>A measured contribution may be able to inspect its measurements in conjunction with the bounded vehicle states and determine that one of the legs is actually comprised of a combination of straight and alteration legs. For example, a measured frequency contribution may be able to recognise that a single leg is actually comprised of a straight leg, an alteration leg then another straight leg. Similarly, a contribution may be able to determine that an alteration leg actually contains a period of steady course and speed - and insert a straight leg covering that period. Note: if the leg has been created through an analyst&apos;s Straight leg forecast contribution specified as a hard-constraint then the leg will not be decomposed.</para>

            <section>
              <title>Bearing-based MDA</title>

              <para>As two vessels move past each other, the bearings typically follow a fairly smooth/regular curve. Below is a very poor representation, but it is possible to produce a mathematical smoothing of the bearing curve representing “sensor and subject in steady state”. When the bearings start to diverge from this curve then something has changed - either the sensor or subject have changed their course/speed vector. The only input necessary for this is the bearing data. But, it&apos;s of note that only the BearingMeasurementContribution knows the actual bearings, they&apos;re not visible outside. So, I believe the bearing-based MDA must sit “inside” the BearingMeasCont.</para>

              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/tma_bearingbasedMDA.gif" align="center"/>
                </imageobject>
              </mediaobject>
              <note>
                <para>While Bearing based MDA worked effectively with simulated data, it proved unable to recognise manoeuvres in real data. The simulated data typically had 3 decimal places of degrees bearing. But, our real world bearing typically only have one or zero decimal places - and the algortihms were unable to work with this low fidelity.</para>
              </note>
            </section>

            <section>
              <title>State-analysis MDA</title>

              <para>Another way of detecting manoeuvres is by analysis of a series of bounded states. Where consecutive/adjacent states have incompatible bounds, we may be able to deduce that a manoeuvre must have happened. We may have a series of states with course bounds 040-080, then a series of states with a bounds 110-150. Clearly there must be a subject vehicle manoeuvre in between these states.</para>
            </section>
          </section>
        </section>

        <section>
          <title>Examples of contributions</title>

          <section>
            <title>Vehicle performance reference contribution</title>

            <section>
              <title>Attributes</title>

              <para>Hard constraints are available that specify that the vehicle has a minimum speed of 1 knot, and a maximum speed of 30 knots. The minimum turning circle is 1km radius. It is also known that the vehicle can decelerate at 1 knot per 5 seconds and accelerate at 1 knot per 10 seconds. </para>

              <para>Potentially, such a constraint could also include an estimate on vehicle state, such as the vehicle normally travels between 8 and 12 knots.</para>
            </section>

            <section>
              <title>Abilities</title>

              <para>This contribution mostly affects the constrain the problem space phase. </para>

              <itemizedlist spacing="compact">
                <listitem>
                  <para><emphasis>Speed</emphasis>. This contribution will examine all of the bounded vehicle states and ensure that all speeds are within those permissible for the platform. It will then pass through the bounded vehicle states and ensure that speeds in successive states are achievable given the known accel/decel rates.</para>
                </listitem>

                <listitem>
                  <para><emphasis>Course</emphasis>. The contribution will pass through the bounded vehicle states and ensure that courses in successive states are achievable given the known turn circles - constraining them as necessary. </para>
                </listitem>
              </itemizedlist>

              <note>
                <para>it is acknowledged that these two abilities will only really have an effect in alteration legs. </para>
              </note>

              <para>The contribution may affect the assess candidate solutions phase - the contribution will assess the candidate solution speeds and offer a performance measure based on the speed being within the normal speed range, or it&apos;s error outside that range.</para>
            </section>
          </section>

          <section>
            <title>Bearing measurement contribution</title>

            <section>
              <title>Attributes</title>

              <para>This is a series of measured bearings. The bearings have a value (the estimate) plus an origin (sensor location). The dataset will also have error range (hard constraints). The error range may be relative bearing dependent, or the same for the whole dataset. The dataset may also have a maximum range value, beyond which no detection could be possible (another hard constraint). </para>
            </section>

            <section>
              <title>Abilities</title>

              <itemizedlist>
                <listitem>
                  <para><emphasis>Constrain problem space.</emphasis></para>

                  <para>For any leg received, the contribution will generate a bounded vehicle state for each time for which there is a measurement. The bounded vehicle state will contain a sector for the bounded location, but the other attributes will be unbounded. Note: we aren&apos;t using the course/speed bounds from the points before/after. These bounds may have been assigned by a time-limited Forecast Contribution, and we don&apos;t know the respective period. We leave them unbounded, and when the Forecast Contribution next runs it will fill in any bounded vehicle states in its time period.</para>

                  <para>The combination of range, bearing and bearing errors can be used to generate a sector shape. The intersection between this shape and the existing bounded location will produce a reduced bounded location.</para>

                  <para>The contribution will also examine the bearing rate through the leg, to perform both straight-leg and alteration-leg detection, inserting new legs as appropriate (as described in Manoeuvre Detection Algorithm).</para>
                </listitem>

                <listitem>
                  <para><emphasis>Assess candidate solution. </emphasis></para>

                  <para>Given a solution, the contribution will calculate the target location at the time of each measured bearing. The error between each measured bearing and the bearing to the calculated target location will be determined, the weighting applied to it, and the value returned. </para>
                </listitem>
              </itemizedlist>
            </section>
          </section>

          <section>
            <title>Speed analysis contribution</title>

            <section>
              <title>Attributes</title>

              <para>This contribution contains no data.</para>
            </section>

            <section>
              <title>Abilities</title>

              <para><emphasis>Constrain the problem space. </emphasis></para>

              <para>This contribution will pass through the series of bounded vehicle states, examine the bounded locations and calculate the speeds necessary to travel between the closest points on the bounds (min speed) and furthest points on the bounds (max speed). The speed bounds will be further constrained to these values. </para>

              <para>Also, the speed analysis contribution will examine the speed bounds for successive bounded vehicle states. If the speed bounds do not overlap, then the contribution will determine that the leg must actually contain an alteration - and replace it with an alteration leg. I don&apos;t think it&apos;s able to determine how to segment a straight leg into a composite - it can only replace it whole-meal. </para>
            </section>
          </section>

          <section>
            <title>Speed forecast contribution</title>

            <section>
              <title>Attributes</title>

              <para>The analyst indicates that for a set period the vehicle must be travelling between 1 and 8 knots, and is probably travelling between 4 and 6 knots. He also gives a weighting to this forecast.</para>
            </section>

            <section>
              <title>Abilities</title>

              <itemizedlist>
                <listitem>
                  <para><emphasis>Constrain the problem space. </emphasis></para>

                  <para>For any bounded vehicle states between the specified time period the speeds are constrained (or further constrained) to being between 1 and 8 knots. The contribution will also generate an additional bounded vehicle state (if necessary) at the start and stop times. These bounded vehicle states will only contain the hard speed constraints.</para>
                </listitem>

                <listitem>
                  <para><emphasis>Assess candidate solution. </emphasis></para>

                  <para>For the current candidate solution, each vessel state within the specified time period is examined. A performance figure is generated according to if the candidate speed for that state is between 4 and 6 knots, or how far outside that range the speed is.</para>
                </listitem>
              </itemizedlist>
            </section>
          </section>

          <section>
            <title>Straight leg forecast contribution</title>

            <section>
              <title>Attributes</title>

              <para>The analyst specifies a time period for which he believes the vehicle is travelling on a straight course at constant speed. </para>
            </section>

            <section>
              <title>Abilities</title>

              <para><emphasis>Constrain the problem space. </emphasis></para>

              <para>The contribution will examine the current set of legs. If there isn&apos;t a straight leg defined for the specified time period, then the a leg is inserted.</para>
            </section>
          </section>
        </section>
      </section>
      <section xml:id="ga_optimisation">
        <title>Optimisation Strategies</title>
        <para>Of the two phased approach to SATC, the second page - consider candidate solutions has a much larger processing requirement. It&apos;s in that stage that high volumes of potential solutions have to be considered, with each point of each solution being used in many error/performance calculations,</para>
        <para>The following three strategies were considered for phase 2.</para>
        <section>
          <title>Brute Force</title>
          <para>The first strategy considered involved Brute Force. The algortihm steadily progressed through all possible permutations, exhaustively considering performance of each one, and finally producing an optimal result. This straightforward method was easy to implement, and proved useful in the early implementation phases. But, as we strove for greater fidelity in solution produced the grids of candidate start/end points got tighter and tighter, giving an exponential explosion in the volume of processing to be conducted.</para>
        </section>
        <section>
          <title>Simulated Annealing</title>
          <para>After we had reached the limits of how much the Brute Force Algortihm could be performance optimised, we needed to consider optimisation technique in order to get <emphasis>good enough</emphasis> solutions in a reasonable time frame.</para>
          <para>The first technique considered was Simulated Annealing. In this technique a function is produced that is able to produce a candidate solution. This function contains a temperature variable. At the start of processing this variable is high, which allows for a great variety of solutions considered. As it cools, it reduces the allowable changes in the solution. </para>
          <para>This algorithm gave a significant performance improvement in generating solutions, and carried a lot of hope. But, it fell short in not giving the necessary degree of control when it came to ensuring that consecutive legs were coherent with each other, as explained below in <xref linkend="inconsistent_range"/>. </para>
        </section>
        <section>
          <title>Genetic Algortihm</title>
          <para>Genetic Algortihms were the third optimisation technique considered. They brought the performance improvements of Simulated Annealing with the tight control offered by Brute Force processing. It is described further in the next section.</para>
        </section>
      </section>

      <section xml:id="satc_ga">
        <title>Solution Generator based on Genetic Algorithm</title>
        <section>
          <title>Definitions</title>
          <para>
            <variablelist>
              <varlistentry>
                <term>Gene</term>
                <listitem>
                  <para>single permutation of a straight leg track segment</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>Chromosome, Individual</term>
                <listitem>
                  <para>set of genes, set of straight routes and constructed alterations between them (a composite route)</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>Population</term>
                <listitem>
                  <para>set of chromosomes which are used on current iteration (a collection of composite routes).</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>GA</term>
                <listitem>
                  <para>the collection of algorithms/processing that lead to the delivery of an optimal composite track solution</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>Island</term>
                <listitem>
                  <para>one instance of separate GA with its own characteristics.</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>Iteration</term>
                <listitem>
                  <para>the production and assessment of a single solution</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>Epoch</term>
                <listitem>
                  <para>number of iterations conducted before a migrations is performed. (20 iterations by default in <application>Debrief-SATC</application>).</para>
                </listitem>
              </varlistentry>
            </variablelist>
          </para>
          <example>
            <title>Example</title>
            <para><emphasis>Gene of Chromosome 1</emphasis> - any black straight line</para>
            <para><emphasis>Gene of Chromosome 2</emphasis> - any blue straight line</para>
            <para><emphasis>Chromosome 1</emphasis> - set of black straight lines</para>
            <para><emphasis>Chromosome 2</emphasis> - set of blue straight lines</para>
          </example>
          <figure xml:id="example1">
            <title>Example</title>
            <mediaobject>
              <imageobject>
                <imagedata width="100%" fileref="figures/tma_fig1_definitions.png"/>
              </imageobject>
            </mediaobject>
          </figure>
        </section>
        <section>
          <title>Structure</title>
          <section>
            <title>Islands</title>
            <para>To allow multiple parallel threads of solution derivation, an Islands Model (Multiple-population GA) is used, with synchronized migrations (<link xlink:href="http://tracer.uc3m.es/tws/cEA/documents/cant98.pdf">http://tracer.uc3m.es/tws/cEA/documents/cant98.pdf</link>). This involves several separate populations which are optimized in parallel. After each epoch the islands exchange chromosomes between each other. Each island is separate GA with its own characteristics.</para>
            <para>Our islands structure is shown on <xref linkend="islands_structure"/>.</para>
            <figure xml:id="islands_structure">
              <title>Islands structure</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/tma_fig2_islandstructure.png" align="center"/>
                </imageobject>
              </mediaobject>
            </figure>
            <para>The figure shows two simple and two complex islands. These are designed to produce good candidates from random search area. After each epoch every of simple and complex islands sends 5 elite individuals to elite island, which chooses the best candidate from these islands and optimizes it. The presence of different types of island allows the algorithm to produce an optimal solution across a range of problem types.</para>
          </section>
          <section>
            <title>Genetic algorithm</title>
            <para>Each island is one instance of GA with its own parameters. The different island types have different strategies for Selection, Crossover, and Mutation.<orderedlist>
                <listitem>
                  <para>Candidate Generation - generates random chromosomes (see <xref linkend="candidate_factory"/>)</para>
                </listitem>
                <listitem>
                  <para>Selection Strategy - selects chromosomes from current population (see <xref linkend="chromosome_selection"/>)</para>
                </listitem>
                <listitem>
                  <para>Crossover - mates chromosomes selected by selection strategy and generates new chromosomes (see <xref linkend="crossover"/>)</para>
                </listitem>
                <listitem>
                  <para>Mutation - mutates some genes in chromosomes produced by crossover (see <xref linkend="mutation"/>)</para>
                </listitem>
                <listitem>
                  <para>Completion - the GA stops evolving after one of two criteria: time elapsed (typically set to 30 secs), or stagnation (where the optimal solution stops showing improvement in successive generations).</para>
                </listitem>
              </orderedlist></para>
            <screen><code>population = CandidateFactory.randomPopulation(populationSize)
while not finished(population)
   elite = take best from (population)
   newPopulation = SelectionStrategy.select(population)
   newPopulation = Crossover.mate(newPopulation)
   newPopulation = Mutation.mutate(newPopulation)
   add (elite) to (newPopulation)
   calculate fitness and sort (newPopulation)
   population = newPopulation
end </code></screen>
            <para>The Simple and Complex islands are configured as described in <xref linkend="island_attributes"/></para>
          </section>
        </section>
        <section xml:id="candidate_factory">
          <title>Candidate Factory</title>
          <para>The Candidate Factory generates an initial set of candidate routes (individuals) within the problem space, together with further randomly generated routes.</para>
          <para>No specific algorithm is used to generate initial population, it simply generates the required number of random solutions according to the following steps.</para>
          <para>Usually start and end polygons contain part of corresponding bearing line. When present, the target bearing measurement is the most effective observation on the target track, so the best solutions start with initial points on this line. Where the polygon does contain part of bearing line this line splits on multiple segments and the candidate factory takes a random point from each segment consequentially, as shown on <xref linkend="bearing_lines"/>.</para>
          <figure xml:id="bearing_lines">
            <title>Bearing lines for new points</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="figures/tma_fig3_bearingline.png" align="center"/>
              </imageobject>
            </mediaobject>
          </figure>
          <para>When the candidate factory needs to generate a point for above polygon it takes first segment and generates c<subscript>1</subscript>, when it needs a new point again it takes second segment and generates c<subscript>2</subscript> etc.</para>
          <para>On occasions when the start or end polygon doesn&apos;t have part of corresponding bearing line (there is no sensor data for that time), the candidate factory generates a grid of points for this polygon, it applies a grid to the polygon then takes a random one each time, as in <xref linkend="polygon_without"/>.</para>
          <figure xml:id="polygon_without">
            <title>Polygon without bearing line</title>
            <mediaobject>
              <imageobject>
                <imagedata width="100%" fileref="figures/tma_fig4_polygonwithoutline.png"/>
              </imageobject>
            </mediaobject>
          </figure>
          <para>To generate random chromosomes the candidate factory takes the start and end polygons for each straight leg and generates a point from each one using the above rules. The following pseudocode documents this:</para>
          <screen><code>I = empty chromosome
for (leg = every straight of Legs)
  S = start polygon of (leg)
  E = end polygon of (leg)
  s<subscript>a</subscript> = take next point of (S)
  e<subscript>a</subscript> = take next point of (E)
  a = route(s<subscript>a</subscript>, e<subscript>a</subscript>)
  add new gene (a) to chromosome (I)
end</code></screen>
        </section>
        <section xml:id="chromosome_selection">
          <title>Chromosome selection strategy</title>
          <para>To select the chromosome to use in genetic operators we use tournament selection (<link xlink:href="http://en.wikipedia.org/wiki/Tournament_selection" xlink:type="simple">http://en.wikipedia.org/wiki/Tournament_selection</link>) with tournament size = 2 and a probability to allow the worse candidate, depending on the island type.</para>
          <para>The tournament strategy is implemented according to this pseudocode:</para>
          <screen><code>population = current population
population = current population
p = probability to accept worse
selected = empty set of chromosomes
while (selected.size &lt; populationSize)
  better = take random chromosome from (population)
  worse = take random chromosome from (population)
  if (better.score &gt; worse.score)
    better &lt;=&gt; worse (swap them over)
  end
  if (use_worse_event(p))
    add new chromosome(worse) to (selected)
  else
    add new chromosome(better) to (selected)
  end
end</code></screen>
        </section>
        <section>
          <title>Genetic operators</title>
          <para>Two types of genetic operator are used: crossover and mutation.</para>
          <section xml:id="crossover">
            <title>Crossover</title>
            <para>Crossover is genetic operator which is used to produce new chromosomes based on crossing two parent chromosomes. There are several techniques to implement crossover, we use two of them: one-point list crossover and arithmetic crossover.</para>
            <section>
              <title>One-point list crossover</title>
              <para>One-point list crossover is well known and widely used crossover operator <link xlink:href="http://en.wikipedia.org/wiki/Crossover_%28genetic_algorithm%29">http://en.wikipedia.org/wiki/Crossover_(genetic_algorithm)</link>. It selects random split point in parent chromosomes and generates two child chromosome based on the following rule:</para>
              <para>
                <mediaobject>
                  <imageobject>
                    <imagedata align="center" fileref="figures/tma_crossoveroperator.png"/>
                  </imageobject>
                </mediaobject>
              </para>
              <para>In our example (<xref linkend="example1"/>): our two chromosomes</para>
              <blockquote>
                <para>X<subscript>1</subscript> = { a<subscript>1</subscript>, b<subscript>1</subscript>, c<subscript>1</subscript>} - black straight lines</para>
                <para>X<subscript>2</subscript> = { a<subscript>2</subscript>, b<subscript>2</subscript>, c<subscript>2</subscript>} - blue straight lines</para>
              </blockquote>
              <para>let&apos;s take our split point = 1, in this case we will have two new chromosomes:</para>
              <figure>
                <title>one point crossover example</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/tma_fig5_1ptcrossover.png" width="90%"/>
                  </imageobject>
                </mediaobject>
              </figure>
              <blockquote>
                <para>I<subscript>1</subscript> = { a<subscript>2</subscript>, b<subscript>1</subscript>, c<subscript>1</subscript>} - black lines on the above figure</para>
                <para>I<subscript>2</subscript> = { a<subscript>1</subscript>, b<subscript>2</subscript>, c<subscript>2</subscript>} - blue lines on the above figure</para>
              </blockquote>
            </section>
            <section>
              <title>Arithmetic crossover</title>
              <para>Arithmetic crossover is GA crossover operator designed for continuous search spaces, it has several modification and described in many papers (for instance: <link xlink:href="http://www.researchgate.net/publication/228618503_A_new_genetic_algorithm_with_arithmetic_crossover_to_economic_and_environmental_economic_dispatch/file/9fcfd50a6971a00cc5.pdf">http://www.researchgate.net/publication/228618503_A_new_genetic_algorithm_with_arithmetic_crossover_to_economic_and_environmental_economic_dispatch/file/9fcfd50a6971a00cc5.pdf</link>)</para>
              <para>The general idea of arithmetic crossover is to take two corresponding genes from parent individuals and create new gene as linear combination of parent genes:</para>
              <para><inlinemediaobject>
                  <imageobject>
                    <imagedata align="left" fileref="figures/tma_equation1.png"/>
                  </imageobject>
                </inlinemediaobject> where</para>
              <itemizedlist spacing="compact">
                <listitem>
                  <para>a - gene from first parent</para>
                </listitem>
                <listitem>
                  <para>b - gene from second parent</para>
                </listitem>
                <listitem>
                  <para>c - new gene</para>
                </listitem>
                <listitem>
                  <para>r - random number [0; 1]</para>
                </listitem>
              </itemizedlist>
              <para>Because the above formula restricts a new gene to be between its parents, several authors propose extending the random number interval to [-d; 1 + d], where d is parameter which allows new gene to go outside. Usually d is less than 0.25.</para>
              <para>For 2D points arithmetic crossover looks like: a, b - (blue) parent genes, c - (green) possible new genes:</para>
              <figure>
                <title>Illustration of arithmetic crossover for 2D points</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/tma_fig6_crossover2d.png"/>
                  </imageobject>
                </mediaobject>
              </figure>
              <para>In our application we will use the following implementation of arithmetic crossover. Initial parameters: two parent chromosomes P<subscript>1</subscript>, P<subscript>2</subscript>.</para>
              <para>Pseudocode:</para>
              <screen><code>I = empty chromosome

for (a = every gene of X<subscript>1</subscript>) (b = every gene of X<subscript>2</subscript>)
  s<subscript>a</subscript> = take start point of a
  s<subscript>b</subscript> = take start point of b
  e<subscript>a</subscript> = take end point of a
  e<subscript>b</subscript> = take end point of b

  // generate random from [-0.1; 1.1)
  // this allows to create new individuals
  // which aren&apos;t in parent&apos;s bounds sometimes
  r = 1.2 * random() - 0.1
  // new start point on road from sa to sb
  s<subscript>c</subscript> = r * s<subscript>a</subscript> + (1 - r) * s<subscript>b</subscript>
  // new end point on road from e<subscript>a</subscript> to e<subscript>b</subscript>
  e<subscript>c</subscript> = r * e<subscript>a</subscript> + (1 - r) * e<subscript>b</subscript>
  c = route(s<subscript>c</subscript>, e<subscript>c</subscript>)
  add new gene (c) to chromosome (I)
end</code></screen>
              <para>For our example from <xref linkend="example1"/>, we generate new chromosome (green) with arithmetic crossover.</para>
              <figure>
                <title>Arithmetic crossover example</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/tma_fig7_arithmeticcrossoverex.png" width="100%"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </section>
          </section>
          <section xml:id="mutation">
            <title>Mutation</title>
            <para>The goal of mutation is to produce individuals which aren&apos;t present in current population - thus individuals that aren&apos;t achievable by crossover. Mutation is a genetic operator which produces new chromosomes by substituting genes in parent chromosome for newly generated ones with some specified probabilit. The specific mutation used in a GA instance depends on an understanding of the problem domain and data patterns.In our implementation we will use two techniques.</para>
            <section>
              <title>Random mutation</title>
              <para>Random mutation substitutes some genes of a parent chromosome for corresponding genes randomly generated by candidates factory chromosome. Pseudocode of random mutation looks like:</para>
              <screen><code>X = parent chromosome
R = new random chromosome (from CandidatesFactory.generateRandom)
p = mutation probability
I = empty chromosome
for (a every gene of X) (b every gene of R)
  if (mutation_event(p))
    add new gene (b) to chromosome (I)
  else
    add new gene (a) to chromosome (I)
  end
end</code></screen>
              <para>Example: Let&apos;s take parent chromosome X (black) and random chromosome R (red). Mutation is made only on second gene this will produce new chromosome I (green)</para>
              <figure>
                <title>Random mutation</title>
                <mediaobject>
                  <imageobject>
                    <imagedata width="100%" fileref="figures/tma_fig8a_randommutation.png"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </section>
            <section>
              <title>Mutation to vertex</title>
              <para>Mutation to vertex comes to GA from <application>Debrief</application>&apos;s experimental Simulated Annealing (SA) optimized point generation implementation (see <xref linkend="optimised_generation"/>), this algorithm gives good results for SA optimization and there is value in also using it within GA with some specific modifications.</para>
              <para>Because in GA on each iteration there are multiple individuals there is no reason to use two vertices and take a new point between them. It&apos;s simpler to take only one vertex and create a new point as linear combination of current point and chosen vertex:</para>
              <para><inlinemediaobject>
                  <imageobject>
                    <imagedata width="30%" fileref="figures/tma_equation2.png"/>
                  </imageobject>
                </inlinemediaobject> where</para>
              <itemizedlist spacing="compact">
                <listitem>
                  <para>a - current point</para>
                </listitem>
                <listitem>
                  <para>b - chosen vertex</para>
                </listitem>
                <listitem>
                  <para>c - new point</para>
                </listitem>
                <listitem>
                  <para>r - random number between [0, 1]</para>
                </listitem>
              </itemizedlist>
              <para>To generate "r” we use Y distribution from SA implementation (see <xref linkend="standard_VFA"/>). This distribution depends on current iteration and produces values which are closest to 0 when number of iterations goes to infinity. To avoid very small values for "r” we take iteration parameter for this distribution as follows:</para>
              <para><inlineequation>
                  <mathphrase>iteration = real iteration % 300</mathphrase>
                </inlineequation></para>
              <para>Pseudocode for mutation to vertex:</para>
              <screen><code>X - parent chromosome
p - mutation probability

I = empty chromosome
for (a every gene of X)
  if (mutation_event(p))
    s<subscript>a</subscript> = start point of a
    e<subscript>a</subscript> = end point of a  
    S = find start polygon for (a)
    E = find end polygon for (a)
    r = y_random(iteration % 300)
    s<subscript>c</subscript> = vertex(S) * r + (1-r) * s<subscript>a</subscript>
    e<subscript>c</subscript> = vertex(E) * r + (1-r) * e<subscript>a</subscript>
    c = route(s<subscript>c</subscript>, s<subscript>e</subscript>)
    add new gene (c) to chromosome (I)
  else
    add new gene (a) to chromosome (I)
  end
end</code></screen>
              <para>Example: Parent chromosome X (black), new chromosome I (green). Mutation was made for first and third genes.</para>
              <figure>
                <title>Mutation to vertex example</title>
                <mediaobject>
                  <imageobject>
                    <imagedata width="100%" fileref="figures/tma_fig9_mutationtovertex.png"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </section>
          </section>
          <section xml:id="standard_VFA">
            <title>Standard VFA strategy</title>
            <para>The development of the semi-automated TMA in <application>Debrief</application> included some investigation into the value in Simulated Annealing (SA). In support of this, algorithms were developed that related to the Very Fast Algortihm (VFA) strategy for producing an improved SA temperature function.</para>
            <para>The initial algorithm is an implementation on VFA selection algorithm with current point (P) and current temperature (T):</para>
            <orderedlist>
              <listitem>
                <para>VFA defines random distribution (Y):</para>
                <para><inlinemediaobject>
                    <imageobject>
                      <imagedata width="30%" fileref="figures/tma_equation3.png"/>
                    </imageobject>
                  </inlinemediaobject></para>
                <para>T - current temperature</para>
                <para>u - random value of uniform distribution</para>
              </listitem>
              <listitem>
                <para>Calculate two random values y<subscript>1</subscript> and y<subscript>2</subscript> based on this Y distribution</para>
              </listitem>
              <listitem>
                <para>Create new point: <inlineequation>
                    <mathphrase>P<subscript>new</subscript> = (P.x + y<subscript>1</subscript> * width, P.y + y<subscript>2</subscript> * height)</mathphrase>
                  </inlineequation></para>
              </listitem>
              <listitem>
                <para>If current polygon doesn&apos;t contain P<subscript>new</subscript> point go to step 2.</para>
              </listitem>
            </orderedlist>
          </section>
          <section xml:id="optimised_generation">
            <title>Optimised point generation</title>
            <para>The VFA selection strategy described above has a high performance cost when run later in the process - a cost that isn&apos;t justified when the temperature is cooling, and only small steps are needed (when SA is in the "discrete improvements" phase as temperature approaches zero and only small jumps are allowed). So, a custom selection strategy is provided, which selects a random point in area with current point (P) and current temperature (T):</para>
            <orderedlist>
              <listitem>
                <para>Select two random vertices of current polygon (V<subscript>1</subscript>, V<subscript>2</subscript>)</para>
              </listitem>
              <listitem>
                <para>Create two segments: (P, V<subscript>1</subscript>), (P, V<subscript>2</subscript>)</para>
              </listitem>
              <listitem>
                <para>Calculate two random values y<subscript>1</subscript> and y<subscript>2</subscript> based on Y distribution from VFA (VFA - 1)</para>
              </listitem>
              <listitem>
                <para>find X point on (P, V<subscript>1</subscript>) segment on road from P to V<subscript>1</subscript>, with distance <inlineequation>
                    <mathphrase>d<subscript>1</subscript> = abs(y<subscript>1</subscript>) * distance(P, V<subscript>1</subscript>)</mathphrase>
                  </inlineequation></para>
              </listitem>
              <listitem>
                <para>find Y point on (P, P<subscript>2</subscript>) segment on road from P to V<subscript>2</subscript>, with distance <inlineequation>
                    <mathphrase>d<subscript>2</subscript> = abs(y<subscript>2</subscript>) * distance(P, V<subscript>2</subscript>)</mathphrase>
                  </inlineequation></para>
              </listitem>
              <listitem>
                <para>find P<subscript>new</subscript> on road from X to Y with distance = rand(0, 1) * distance(X, Y)</para>
              </listitem>
            </orderedlist>
            <figure>
              <title>Point generation</title>
              <mediaobject>
                <imageobject>
                  <imagedata width="100%" fileref="figures/tma_fig10_pointgeneration.png"/>
                </imageobject>
              </mediaobject>
            </figure>
          </section>
        </section>
        <section>
          <title>Fitness function</title>
          <para>As previously explained, each chromosome in GA is a set of straight routes. The fitness function starts by verifying that each of these straight routes are achievable. If everything is ok it then constructs altering routes (cubic bezier curves) between them. The GA fitness score is the sum of two scores:<itemizedlist>
              <listitem>
                <para>a) contributions scores for straight and altering routes</para>
              </listitem>
              <listitem>
                <para>b) score how altering route is compatible with its previous and next straight routes.</para>
              </listitem>
            </itemizedlist></para>
          <para>The detail of the a) scores is described in the <application>Debrief-SATC</application> contribution documentation.</para>
          <para>Score b) is very effective in producing a solution that is the sum of consistent straight line legs. It&apos;s quite easy for the GA to produce a solution that is the collection of the best performing individual legs, but where the legs aren&apos;t consistent with each other. In <xref linkend="inconsistent_range"/> it is clear that whilst the green and purple legs are both valid, they aren&apos;t consistent with each other.</para>
          <figure xml:id="inconsistent_range">
            <title>Inconsistent range</title>
            <mediaobject>
              <imageobject>
                <imagedata width="100%" fileref="figures/tma_fig11_inconsistentrange.png"/>
              </imageobject>
            </mediaobject>
          </figure>
          <para><xref linkend="consistent_legs"/> demonstrates the inclusion of the consistent legs scoring - used to verify that it is possible for a vehicle to transition between the two legs in the available time.</para>
          <figure xml:id="consistent_legs">
            <title>Consistent legs</title>
            <mediaobject>
              <imageobject>
                <imagedata width="100%" fileref="figures/tma_fig12_consistentlegs.png"/>
              </imageobject>
            </mediaobject>
          </figure>
          <para>Note that in <xref linkend="consistent_legs"/>, the solutions still don&apos;t match the true ("SUBJECT") track - that requires further contribution from the analyst. But, the legs in the solution route are consistent with each other.</para>
          <para>To score how well altering route is compatible with its previous and next straight routes the GA fitness function uses speed changes during alteration.</para>
          <para> A smooth speed plot (without peaks) is the best situation (<xref linkend="speed_plot"/>), peaks which are near to previous and next speed are worse but valid (<xref linkend="speed_plotb"/>), and huge peaks are the worst situation (<xref linkend="speed_plotc"/>)</para>
          <figure xml:id="speed_plot">
            <title>Speed plot with smooth speed change</title>
            <mediaobject>
              <imageobject>
                <imagedata width="100%" fileref="figures/tma_fig13a_speedplot.png"/>
              </imageobject>
            </mediaobject>
          </figure>
          <figure xml:id="speed_plotb">
            <title>Speed plot with peaks near to straight legs</title>
            <mediaobject>
              <imageobject>
                <imagedata width="100%" fileref="figures/tma_fig13b_speedplot.png"/>
              </imageobject>
            </mediaobject>
          </figure>
          <figure xml:id="speed_plotc">
            <title>Speed plot with huge peaks</title>
            <mediaobject>
              <imageobject>
                <imagedata width="100%" fileref="figures/tma_fig13c_speedplot.png"/>
              </imageobject>
            </mediaobject>
          </figure>
          <para>Pseudocode for altering route score is:</para>
          <screen><code>a - altering route
previous - previous straight route
next - next straight route

peaks = a.speed_peaks_count
score = 0;
if (peaks == 0)
  score = 0;
else if (peaks == 1)
  score = (a.speed_peak - closest(previous.speed, next.speed))<superscript>2</superscript>
else
  score = 1.5 * (a.max_speed_peak - a. min_speed_peak)<superscript>2</superscript>
end</code></screen>
          <para>Pseudocode of fitness function:</para>
          <screen>X - chromosome to score
score = 0;
if (some route from (X) is impossible)
  score = MAX_SCORE;
  return;
end
alterings = generate alterings for (X)
for (every straight route (s) from X)
  score = score + calculate contributions score for (s)
end
for (every altering route (a) from (alterings))
  score = score + calculate contributions score for (a)
  score = score + compatible score (a, previous of(a), next of (a))
end</screen>
        </section>
        <section xml:id="island_attributes">
          <title>Island attributes</title>
          <section>
            <title>Elite island characteristics (beta)</title>
            <itemizedlist>
              <listitem>
                <para>Fixed population size = 70 individuals by default</para>
              </listitem>
              <listitem>
                <para>Fixed chromosome size = count of straight legs</para>
              </listitem>
              <listitem>
                <para>Elitism = 10 individuals by default</para>
              </listitem>
              <listitem>
                <para>Tournament selection (probability to select worse = 0)</para>
              </listitem>
              <listitem>
                <para>Use altering legs</para>
              </listitem>
              <listitem>
                <para>Crossovers: <itemizedlist>
                    <listitem>
                      <para>one-point crossover (20% of selected candidates)</para>
                    </listitem>
                    <listitem>
                      <para>adaptive arithmetic crossover (80% of selected candidates)</para>
                    </listitem>
                  </itemizedlist></para>
              </listitem>
              <listitem>
                <para>Mutations:<itemizedlist>
                    <listitem>
                      <para>mutation to vertex with 0.25 probability</para>
                    </listitem>
                  </itemizedlist></para>
              </listitem>
            </itemizedlist>
          </section>
          <section>
            <title>Simple and complex island characteristics</title>
            <para>The only difference between simple and complex island is simple islands use only straight legs and DON&apos;T use altering ones, and complex islands use altering legs too.</para>
            <itemizedlist>
              <listitem>
                <para>Fixed population size = 70 individuals by default</para>
              </listitem>
              <listitem>
                <para>Fixed chromosome size = count of straight legs</para>
              </listitem>
              <listitem>
                <para>Elitism = 10 individuals by default</para>
              </listitem>
              <listitem>
                <para>Tournament selection (probability to select worse = 0.3)</para>
              </listitem>
              <listitem>
                <para>Crossovers: <itemizedlist>
                    <listitem>
                      <para>non-adaptive arithmetic crossover</para>
                    </listitem>
                  </itemizedlist></para>
              </listitem>
              <listitem>
                <para>Mutations:<itemizedlist>
                    <listitem>
                      <para>mutation to vertex with 0.4 probability (60% of selected candidates)</para>
                    </listitem>
                    <listitem>
                      <para>random mutation with 0.4 probability (40% of selected candidates)</para>
                    </listitem>
                  </itemizedlist></para>
              </listitem>
            </itemizedlist>
          </section>
        </section>
      </section>
    </chapter>
    <chapter xml:id="dis_ref">
      <title>System Documentation for DIS integration</title>
      <indexterm>
        <primary>DIS</primary>
        <secondary>System documentation</secondary>
      </indexterm>
      <sect1 xml:id="DisIntro">
        <title>Introduction</title>
        <para>Debrief is able to integrate with network simulators that adhere to the DIS protocol. Debrief is able to receive a set of DIS messages (see <xref linkend="dis_messages"/>). Debrief is also able to send StartResume and StopFreeze messages along the link. User support is provided both in the form of a Debrief tutorial, and here in the user guide (see <xref linkend="dis_support"/>).</para>
        <sect2 xml:id="DisStandard">
          <title>DIS Standard</title>
          <indexterm>
            <primary>DIS</primary>
            <secondary>Protocol version</secondary>
          </indexterm>
          <para>Debrief supports version 6 of the DIS standard (Version 6 - IEEE 1278.1a-1998 (amendment to IEEE 1278.1-1995)), as implemented by the Open Source OpenDis project: <uri xlink:href="https://github.com/open-dis/open-dis-java">https://github.com/open-dis/open-dis-java</uri><code/>. </para>
          <para>In practice, the version of OpenDis used will be updated to the most recent release each time the code in Debrief&apos; DIS plugin receives maintenance attention.</para>
        </sect2>
        <sect2 xml:id="FurtherDIS">
          <title>Adding support for further DIS message types</title>
          <indexterm>
            <primary>DIS</primary>
            <secondary>Supporting new message types</secondary>
          </indexterm>
          <para>The following steps should be taken to support new DIS message types: <orderedlist>
              <listitem>
                <para>Introduce a new listener interface for the new message (similar to <code>IDISFireListener)</code></para>
              </listitem>
              <listitem>
                <para>Extend <code>DISModule</code> to allow listeners for the message to be managed</para>
              </listitem>
              <listitem>
                <para>Extend <code>DISModule</code> to introduce a new handler method for this message (similar to <code>handleFire</code>)</para>
              </listitem>
              <listitem>
                <para>Extend the <code>logPDU</code> method of <code>DISModule</code> listen for this message, and pass it to the handler</para>
              </listitem>
              <listitem>
                <para>Introduce a new file listener for the event (like <code>FireFileListener</code>), and add it to <code>HeadlessDISLogger</code></para>
              </listitem>
              <listitem>
                <para>Introduce a new Debrief listener for the event (like <code>DebriefFireListener</code>), and add it to <code>DISListenerView</code></para>
              </listitem>
              <listitem>
                <para>Extend the list of messages supported (<xref linkend="dis_messages"/></para>
              </listitem>
            </orderedlist></para>
        </sect2>
      </sect1>
      <sect1 xml:id="dis_command_line">
        <title>Command line options<indexterm>
            <primary>DIS</primary>
            <secondary>Command line paremeters</secondary>
          </indexterm></title>
        <para>Some organisations may wish to specify the DIS IP Address &amp; Port values in the command line when starting Debrief. This allows a parent process/simulator to start Debrief preconfigured with the correcft network parameters.</para>
        <para>Set these values by using these settings on the command line: <code> -Dport=2345 -DipAddress=23.44.55.66</code>. </para>
      </sect1>
      <sect1 xml:id="dis_messages">
        <title>Messages supported</title>
        <indexterm>
          <primary>DIS</primary>
          <secondary>Messages supported</secondary>
        </indexterm>
        <para>
          <table xml:id="dis_messages_list">
            <title>DIS Messages Supported</title>
            <tgroup cols="3">
              <colspec colname="col1" colnum="1" colwidth="1.0*"/>
              <colspec colname="col2" colnum="2" colwidth="1.1*"/>
              <colspec colname="col3" colnum="3" colwidth="2.2*"/>
              <thead>
                <row>
                  <entry>Message</entry>
                  <entry>Fields</entry>
                  <entry>Representation in Debrief</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>Entity State</entry>
                  <entry><itemizedlist>
                      <listitem>
                        <para>Entity Id</para>
                      </listitem>
                      <listitem>
                        <para>Location</para>
                      </listitem>
                      <listitem>
                        <para>Orientation</para>
                      </listitem>
                      <listitem>
                        <para>Velocity</para>
                      </listitem>
                    </itemizedlist></entry>
                  <entry>Retrieve the vessel name from the <code>Launch</code> message lookup table, create a track for this fix (if necessary), and add this fix to that track</entry>
                </row>
                <row>
                  <entry>Collision</entry>
                  <entry><itemizedlist>
                      <listitem>
                        <para>Issuing Entity</para>
                      </listitem>
                      <listitem>
                        <para>Colliding Entity</para>
                      </listitem>
                    </itemizedlist></entry>
                  <entry>Create a narrative entry for this event, assigned against the Issuing Entity</entry>
                </row>
                <row>
                  <entry>Detonation</entry>
                  <entry><itemizedlist>
                      <listitem>
                        <para>Entity Id</para>
                      </listitem>
                      <listitem>
                        <para>Location</para>
                      </listitem>
                    </itemizedlist></entry>
                  <entry>Create both a narrative entry for this event, assigned against the Issuing Entity. Also create a text label at the relevant location, placed in the <code>Detonations</code> layer</entry>
                </row>
                <row>
                  <entry>Fire</entry>
                  <entry><itemizedlist>
                      <listitem>
                        <para>Firing Entity Id</para>
                      </listitem>
                      <listitem>
                        <para>Target Entity Id</para>
                      </listitem>
                    </itemizedlist></entry>
                  <entry>Create both a narrative entry for this event, assigned against the Issuing Entity. Also create a text label at the relevant location, placed in the <code>WPN Release</code> layer</entry>
                </row>
                <row>
                  <entry>Event Report</entry>
                  <entry><itemizedlist>
                      <listitem>
                        <para>Originator Id</para>
                      </listitem>
                      <listitem>
                        <para>Event Type</para>
                      </listitem>
                      <listitem>
                        <para>Variable Datums</para>
                      </listitem>
                    </itemizedlist></entry>
                  <entry>The Event Report PDU is used as a handler for textual content across a range of simulation events. See the list of event report types below (<xref linkend="dis_event_types"/>)</entry>
                </row>
                <row>
                  <entry>Start / Resume</entry>
                  <entry><itemizedlist>
                      <listitem>
                        <para>Time</para>
                      </listitem>
                    </itemizedlist></entry>
                  <entry>Update the Debrief <guilabel>DIS Listener View</guilabel> to acknowledge that the simulator is running (e.g. enable the <guilabel>Pause</guilabel> and <guilabel>Stop</guilabel> buttons</entry>
                </row>
                <row>
                  <entry>Stop / Freeze</entry>
                  <entry><itemizedlist>
                      <listitem>
                        <para>Time</para>
                      </listitem>
                      <listitem>
                        <para>Reason</para>
                      </listitem>
                    </itemizedlist></entry>
                  <entry>Update the Debrief <guilabel>DIS Listener View</guilabel> to acknowledge that the simulator has either stopped or paused (by inspecing the value of the <code>Reason</code> field)</entry>
                </row>
              </tbody>
            </tgroup>
          </table>
          <table xml:id="dis_event_types">
            <title>DIS Event Report messages</title>
            <tgroup cols="5">
              <colspec colname="col1" colnum="1" colwidth="1.2*"/>
              <colspec colname="col2" colnum="2" colwidth="0.7*"/>
              <colspec colname="col3" colnum="3" colwidth="1.8*"/>
              <colspec colname="col4" colnum="4" colwidth="1.2*"/>
              <colspec colname="col5" colnum="5" colwidth="1.8*"/>
              <thead>
                <row>
                  <entry>Type</entry>
                  <entry>Event Type</entry>
                  <entry>Sample</entry>
                  <entry>Parsing</entry>
                  <entry>Representation in Debrief</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>Comms</entry>
                  <entry>10001</entry>
                  <entry>muteTime=0 txFreq=1804 ....</entry>
                  <entry>Verbatim</entry>
                  <entry>Narrative entry</entry>
                </row>
                <row>
                  <entry>Launch</entry>
                  <entry>10002</entry>
                  <entry><code>NAME:FF23</code></entry>
                  <entry>Use colon as delimiter</entry>
                  <entry>Collate lookup table, to translate EntityId to entity name</entry>
                </row>
                <row>
                  <entry>New TMA Track</entry>
                  <entry>10003</entry>
                  <entry>DETECTION E3-3</entry>
                  <entry>E3-3</entry>
                  <entry>Collate lookup table, to translate EntityId to entity name</entry>
                </row>
                <row>
                  <entry>Tactics Change</entry>
                  <entry>10004</entry>
                  <entry><code>XXXX from YYYY</code></entry>
                  <entry>Verbatim</entry>
                  <entry>Narrative entry</entry>
                </row>
                <row>
                  <entry>New TMA Track (where subject is OSAT)</entry>
                  <entry>10005</entry>
                  <entry>DETECTION E3-2</entry>
                  <entry>E3-2</entry>
                  <entry>Collate lookup table, to translate EntityId to entity name</entry>
                </row>
              </tbody>
            </tgroup>
          </table>
        </para>
      </sect1>
      <sect1 xml:id="other_dis_specifics">
        <title>Other DIS specifics</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>Kind</term>
              <listitem>
                <para>A value of 1 denotes Platform, 2 denotes Munitions (Torpedo symbol), 8 for countermeasures, 101 the TMA track of interest (OSAT) and 102 other TMA tracks. Periods where a TMA track is denoted OSAT have fixes highlighted in a lighter shade (orange)</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Domain</term>
              <listitem>
                <para>0 for Other (sonar buoys), 3 for Surface (Frigate symbol), 4 for Sub-surface (submarine symbol), 6 for Torpedo</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Force</term>
              <listitem>
                <para>0 for Other (Orange), 1 for Friendly (Blue), 2 for Opposing (Red), 3 for Neutral (Green)</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Stop Reason</term>
              <listitem>
                <para>1 for Freeze (Pause), 2 for Stop (all complete), 7 for Iteration complete</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Stop PDU Request ID</term>
              <listitem>
                <para>The total number of iterations performed</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Start PDU Request ID</term>
              <listitem>
                <para>The id number of this iteration</para>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
      </sect1>
    </chapter>

  </part>
  <!-- ********************************************************************** -->

  <!-- ********************************************************************** -->

  <!--   ACKNOWLEDGEMENTS                                                            -->

  <!-- ********************************************************************** -->

  <!-- ********************************************************************** -->

  <acknowledgements xml:id="acknowledgements">
    <title>Acknowledgements</title>
    <formalpara>
      <title>Third Party Libraries</title>
      <para>Debrief uses a licensed copy of the WMFWriter library from Piet Jonas (<link xlink:href="http://piet.jonas.com/WMFWriter/WMFWriter.html">http://piet.jonas.com/WMFWriter/WMFWriter.html</link> ).</para>
    </formalpara>
    <formalpara>
      <title>Open Source Libraries</title>
      <para>Debrief also uses these Open Source libraries:<itemizedlist>
          <listitem>
            <para>XStream - <link xlink:href="http://xstream.codehaus.org/">http://xstream.codehaus.org/</link></para>
          </listitem>
          <listitem>
            <para>Apache Commons - <link xlink:href="http://commons.apache.org/">http://commons.apache.org/</link></para>
          </listitem>
          <listitem>
            <para>JDOM - <link xlink:href="http://www.jdom.org/">http://www.jdom.org/</link></para>
          </listitem>
          <listitem>
            <para>Java Topology Suite - <link xlink:href="http://tsusiatsoftware.net/jts/main.html">http://tsusiatsoftware.net/jts/main.html</link></para>
          </listitem>
          <listitem>
            <para>JFreeChart - <link xlink:href="http://www.jfree.org/jfreechart/">http://www.jfree.org/jfreechart/</link></para>
          </listitem>
          <listitem>
            <para>Michael Flanagans Scientific Library - <link xlink:href="http://www.ee.ucl.ac.uk/~mflanaga/java">http://www.ee.ucl.ac.uk/~mflanaga/java</link></para>
          </listitem>
          <listitem>
            <para>Date/Time support - <link xlink:href="http://www.joda.org/joda-time/">http://www.joda.org/joda-time/</link>
            </para>
          </listitem>
          <listitem>
            <para>Xuggle Media Player - <link xlink:href="http://www.xuggle.com/">http://www.xuggle.com/</link>
            </para>
          </listitem>
          <listitem>
            <para>Watchmaker for Evolutionary Computation - <link xlink:href="http://watchmaker.uncommons.org/">http://watchmaker.uncommons.org/</link></para>
          </listitem>
        </itemizedlist></para>
    </formalpara>
    <formalpara>
      <title>License</title>
      <para> Debrief is an Open Source application, offering a set of benefits (<xref linkend="SwitchToOpen"/>) <programlisting>
<![CDATA[            
/*
 *    Debrief - the Open Source Maritime Analysis Application
 *    http://debrief.info
 *
 *    (C) 2000-2015, Deep Blue C Technology Ltd
 *
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the Eclipse Public License v1.0
 *    (http://www.eclipse.org/legal/epl-v10.html)
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
 */
]]>            
          </programlisting>
      </para>
    </formalpara>
  </acknowledgements>

  <!-- ********************************************************************** -->

  <!-- ********************************************************************** -->

  <!--   GLOSSARY                                                            -->

  <!-- ********************************************************************** -->

  <!-- ********************************************************************** -->

  <appendix xml:id="app_glossary">
    <title>Debrief Glossary</title>

    <sect1 xml:id="gloss_intro">
      <title>Introduction</title>

      <para>This section contains explanations of terms used within Debrief</para>
    </sect1>

    <glossary xml:id="glossary">
      <glossentry xml:id="G_AUTEC">
        <glossterm>AUTEC</glossterm>

        <glossdef>
          <para>Atlantic Underwater Test Facility. Data files from this facility which are to be imported into Debrief should be suffixed with "RAO". The origin of AUTEC is: <screen>
              <markup>
23º 26&apos; 37.6280" N
77º 38&apos; 6.8250" W
              </markup>
            </screen></para>
        </glossdef>
      </glossentry>

      <glossentry xml:id="G_AFWTF">
        <glossterm>AFWTF</glossterm>

        <glossdef>
          <para>Atlantic Fleet Weapons Training Facility. Data files from this facility which are to be imported into Debrief should be suffixed with "PRN". The origin of AFWTF is : <screen>
              <markup>
17º 38.1577&apos; N 
065º 4.2065&apos; W</markup>
            </screen></para>
        </glossdef>
      </glossentry>

      <glossentry xml:id="g_annotation">
        <glossterm>Annotation</glossterm>

        <glossdef>
          <para>An annotation is the generic term used to describe the graphic elements added to a plot which do not represent vehicle positions, or bearings recorded on vehicle-mounted sensors. Examples of annotations are rectangles, ellipses and lines.</para>
        </glossdef>
      </glossentry>

      <glossentry xml:id="g_asset">
        <glossterm>ASSET</glossterm>

        <glossdef>
          <para>The <abbrev>Advanced Scenario Simulator for the Evaluation of Tactics</abbrev>, a modular simulation suite intended for high-level simulation of maritime tactical scenarios by a relatively inexperienced user (read: uniformed). ASSET was actually the predecessor to Debrief, with the initial Debrief software being created to analyse ASSET simulation results. Quickly it was recognised that Debrief could also be usefully employed in the analysis of real exercise tracks. Aaah, how close we came to not having Debrief at all...</para>
        </glossdef>
      </glossentry>

      <glossentry xml:id="g_bearing_rate">
        <glossterm>Bearing rate</glossterm>

        <glossdef>
          <para>Bearing rate within the application is calculated using the following formula: <screen>
<markup>Bdot = ((Tspd * sin(Tcrse) - Ospd * sin(Ocrse)) *
cos(brg) - (Tspd * cos(Tcrse) - Ospd * cos(Ocrse)) *
sin(brg)) / range * 60</markup>
</screen><screen>
<markup>Rdot = Range Rate (yds/min)
Bdot = Bearing Rate (degs/min)
Tspd, Tcrse = Target course and speed (degs &amp; yps)
Ospd, Ocrse = Ownship course and speed (degs &amp; yps)
brg = Bearing to target from ownship (degs)
range = Range to target from ownship (yds)</markup>
</screen></para>

          <para>Positive and negative bearing rates are named Right and Left according to naval convention, abbreviated to R and L in the tote.</para>
        </glossdef>
      </glossentry>

      <glossentry xml:id="g_bookmarks">
        <glossterm>Bookmarks</glossterm>

        <glossdef>
          <para>The combination of a DTG, a remark and the name of a plot-file. Debrief NG presents the series of bookmarks allowing you to quickly move through events of interest across a series of plot-files.</para>
        </glossdef>
      </glossentry>

      <glossentry xml:id="g_buoyfields">
        <glossterm>Buoyfields</glossterm>

        <glossdef>
          <para>A series of sonar buoys which are laid in a particular pattern during Anti-Submarine Warfare.</para>
        </glossdef>
      </glossentry>

      <glossentry xml:id="G_BUILD_DATE">
        <glossterm>Build date</glossterm>

        <glossdef>
          <para>Each copy of Debrief is aware of the date it was built. Find this out by selecting <guimenuitem>About</guimenuitem> from the <guimenu>Help</guimenu> menu.</para>
        </glossdef>
      </glossentry>

      <glossentry xml:id="g_cheat">
        <glossterm>Tutorials</glossterm>
        <glossdef>
          <para>Tutorials guide users through tasks. The task is broken down into steps and presented to the user one step at a time, and the user checks off the steps as he/she completes them. The Cheat Sheets can be accessed from the command in Debrief&apos;s <menuchoice>
              <guibutton>Help</guibutton>
            </menuchoice> menu, or the Tutorials section of the Debrief&apos;s Welcome page. </para>
        </glossdef>
      </glossentry>

      <glossentry xml:id="g_cmap">
        <glossterm>CMAP</glossterm>

        <glossdef>
          <para><abbrev>Core Maritime Analysis Platform</abbrev> a framework of components intended to be reused across a range of maritime analysis applications. The two initial CMAP applications are Debrief and <glossterm linkend="g_asset">ASSET</glossterm>.</para>
        </glossdef>
      </glossentry>

      <glossentry xml:id="g_coastline_file">
        <glossterm>Coastline file</glossterm>

        <glossdef>
          <para>Debrief expects to <indexterm>
              <primary>Coastline</primary>
              <secondary>File Format</secondary>
            </indexterm>find a coastline file (named <application>World.dat</application>) in its installation directory. Debrief loads this file in the background as soon as it opens; regardless of whether the user has requested to add a coastline to the current plot. Once the coastline is loaded (for the standard 1.2Mb file this takes around 8 seconds) there is no further performance penalty within the application.</para>

          <para>The coastline file should be formatted in the following way: <itemizedlist>
              <listitem>
                <para>The coastline consists of a series of coastline segments. Each segment is drawn as a continuous polygon by the application.</para>
              </listitem>

              <listitem>
                <para>Each segment begins with the # -b separator on a line of its own</para>
              </listitem>

              <listitem>
                <para>Then there are a series of lines each containing a point in latitude and longitude expressed in decimal degrees (to 6 decimal places in the standard file).</para>
              </listitem>
            </itemizedlist><screen>
              <markup>
# -b
-7.491098    4.257159
-7.523953    4.245425
-9.112761    5.008146
-9.464786    5.339050
-9.807424    5.681688
# -b
-9.807424    5.681688
-10.004558    5.845966
-11.152161    6.606341
-11.131039    6.639197
-11.163895    6.672052
-11.307052    6.761232
-11.351642    6.803475
              </markup>
            </screen></para>
        </glossdef>
      </glossentry>

      <glossentry xml:id="g_DeadReckoning">
        <glossterm>Dead reckoning</glossterm>

        <glossdef>
          <para>Dead reckoning (DR) is the process of estimating one&apos;s current position based upon a previously determined position, or fix, and advancing that position based upon known or estimated speeds over elapsed time, and course. Debrief plots tracks in DR mode by plotting the positions as a series of course/speed legs from an origin. Debrief plots lats/longs unchanged when in <glossterm linkend="g_OverTheGround">Over the Ground</glossterm> mode.</para>
        </glossdef>
      </glossentry>

      <glossentry xml:id="g_DIS">
        <glossterm>DIS Standard</glossterm>

        <glossdef>
          <para>Distributed Interactive Simulation (DIS) is an IEEE standard for conducting real-time platform-level wargaming across multiple host computers and is used worldwide, especially by military organizations but also by other agencies such as those involved in space exploration and medicine.</para>
        </glossdef>
      </glossentry>

      <glossentry xml:id="g_display_mode">
        <glossterm>Display mode</glossterm>

        <glossdef>
          <para>Each of the display modes used on the Debrief plot represents a different method of stepping through the plot. When in the normal mode each track is shown in full, with a highlight drawn over the current point (as indicated in the Tote). When in snail mode only the current point plus an optional back-track is plotted.</para>
        </glossdef>
      </glossentry>

      <glossentry xml:id="g_dtg">
        <glossterm>DTG</glossterm>

        <glossdef>
          <para>Acronym representing Date Time Group</para>
        </glossdef>
      </glossentry>

      <glossentry xml:id="g_earth_model">
        <glossterm>Earth Model</glossterm>

        <glossdef>
          <para>The Earth Model used by the application is modular and interchangeable. In the initial release of the application the calculations use the Rhumb-Line Formulae, as described in &apos;Admiralty Manual of Navigation, Volume 2, 1973&apos;. Short-distance sailing is defined as "the following of a rhumb-line track for a distance not greater than 600"</para>
        </glossdef>
      </glossentry>

      <glossentry xml:id="g_etopo">
        <glossterm>ETOPO</glossterm>

        <glossdef>
          <para>Standard for digital topographic data, predominantly distributed by the NOAA</para>
        </glossdef>
      </glossentry>
      <glossentry xml:id="g_github">
        <glossterm>GitHub</glossterm>
        <glossdef>
          <para><link xlink:href="http://github.com">GitHub.com</link> is a web-site providing a range of software development capabilities. Its name comes from its use of the <emphasis>Git</emphasis> software version control system. <emphasis>Git</emphasis> allows multiple developers to work simultaneously on a project, preventing conflicts and helping to merge divergent development paths.</para>
        </glossdef>
      </glossentry>

      <glossentry xml:id="g_highlighter">
        <glossterm>Highlighter</glossterm>

        <glossdef>
          <para>The highlighter is the graphic used to indicate the current point on a track. Use of different highlighters allows range rings or a vessel-specific symbol to be plotted at the current point</para>
        </glossdef>
      </glossentry>

      <glossentry xml:id="g_layer">
        <glossterm>Layer</glossterm>

        <glossdef>
          <para>A collection of objected plotted on the <application>Debrief</application> Plot. Each layer can be switched on and off individually using the Outline View (see <xref linkend="layer_mgr"/>). When written to a plot-file, each layer is stored separately - making it quite easy to copy individual layers out of a plot-file using a text-editor and collating them into a new file. (An example of this would be drawing exercise areas into one session, then moving them all into one layer, save the file to disk, copy this layer to a file of its own, then dropping this file of exercise areas into new files - an example of this is in the VPF best-practice, <xref linkend="vpf_how_to"/>)</para>
        </glossdef>
      </glossentry>
      <glossentry xml:id="g_lightweight">
        <glossterm>Lightweight Tracks</glossterm>

        <glossdef>
          <para> A simpler, faster version of a conventional track. These are quicker to render in Debrief and can be placed into Layers - unlike normal tracks, which all sit at the top level. Fewer formatting and manipulation operations are available for lightweight tracks, particularly those relating to TMA. </para>
        </glossdef>
      </glossentry>

      <glossentry xml:id="g_MWC">
        <glossterm>MWC</glossterm>

        <glossdef>
          <para>[Extracts taken from MWC 2000 Flyer]</para>

          <para>Under CinCFleet, the Maritime Warfare Centre (MWC) is a &apos;one-stop shop&apos; for the evolution and dissemination of maritime/joint doctrine and concepts through teaching, tactical development, operational analysis, force development and wargaming.</para>

          <para>It also provides the focus for the development and practice of operational level warfighting, planning and decision making.</para>

          <para>The MWC was formed on 1 October 1995 merging the activities of the Maritime Warfare Development Centre at HMS Dolphin and the Maritime Tactical School at HMS Dryad to create a focal point for doctrine and tactical development.</para>
        </glossdef>
      </glossentry>

      <glossentry xml:id="g_narrative">
        <glossterm>Narrative</glossterm>

        <glossdef>
          <para>A series of time-related text messages. Typically these may represent the narrative recorded in a control room during an exercise, but alternatively they may contain a series of status messages retrieved from a sensor or weapon. All that is required is that the message have a DTG attached and that it may be represented in text form.</para>
        </glossdef>
      </glossentry>

      <glossentry xml:id="g_ne">
        <glossterm>Natural Earth</glossterm>

        <glossdef>
          <para>In 2015 support for Natural Earth data was added to Debrief. Natural Earth is a public domain, freely available dataset of Vector and Raster data. To support Debrief analysts a customized version of Natural Earth has been produced that is compliant with the Mercator Projection, and styled suitably for the maritime domain. </para>
        </glossdef>
      </glossentry>

      <glossentry xml:id="g_OverTheGround">
        <glossterm>Over the ground</glossterm>

        <glossdef>
          <para>Plotting a Debrief track using the recorded sensor positions. Whilst Debrief stores course and speed data, and uses their values in calculations, they do not contribute to how the positions are plotted. Debrief plots a track using course and speed data when in <glossterm linkend="g_DeadReckoning">Dead Reckoning</glossterm> mode.</para>
        </glossdef>
      </glossentry>

      <glossentry xml:id="g_overview">
        <glossterm>Overview</glossterm>

        <glossdef>
          <para>A zoomed out plot showing the full dataset currently loaded. Double clicking on this plot forces the main plot to re-centre on the selected point, and dragging an area on this plot forces the main plot to zoom in on the selected area. The formatting on the overview chart is identical to (and unchangeable from) that on the main plot, with the exception that text is not plotted - to reduce clutter.</para>
        </glossdef>
      </glossentry>

      <glossentry xml:id="g_perspective">
        <glossterm>Perspective</glossterm>

        <glossdef>
          <para>Each Workbench window contains one or more perspectives. A perspective defines the initial set and layout of views in the Workbench window. Within the window, each perspective shares the same set of editors. Each perspective provides a set of functionality aimed at accomplishing a specific type of task or works with specific types of resources. For example, the <guibutton>Tactical Analysis</guibutton> perspective combines views that you would commonly use while editing analysing tactical files, while the <guibutton>Contact Ork</guibutton> perspective would help aliens (typically named Mork) in contacting their mother planet - together with the VOIP software link direct to Orson. As you work in the Workbench, you will probably switch perspectives frequently, especially if you&apos;re having Mindy trouble.</para>

          <para>Perspectives control what appears in certain menus and toolbars. They define visible action sets, which you can change to customize a perspective. You can save a perspective that you build in this manner, making your own custom perspective that you can open again later.</para>

          <para>You can use the <guimenu>General &gt; Perspectives</guimenu> preference page to open perspectives in the same window or in a new window.</para>
        </glossdef>
      </glossentry>

      <glossentry xml:id="g_pfwtf">
        <glossterm>PFWTF</glossterm>

        <glossdef>
          <para>Pacific Fleet Weapons Training Facility (see AFWTF). The origin of PFWTF is : <screen>              <markup>
22º 7.16646&apos; N
159º 55.17&apos; W
           </markup>          </screen></para>
        </glossdef>
      </glossentry>

      <glossentry xml:id="g_plt">
        <glossterm>Plot</glossterm>

        <glossdef>
          <para>A graphic <emphasis>God&apos;s-eye</emphasis> representation of the current dataset. By default the plot has a black background but this may be altered by the user.</para>
        </glossdef>
      </glossentry>

      <glossentry xml:id="g_plot_file">
        <glossterm>Plot-File</glossterm>

        <glossdef>
          <para>A file containing the following: <itemizedlist>
              <listitem>
                <para>The data originally loaded from the Replay file</para>
              </listitem>

              <listitem>
                <para>Any formatting applied to the data originally loaded</para>
              </listitem>

              <listitem>
                <para>The details of any features added to the plot from the toolbars</para>
              </listitem>

              <listitem>
                <para>The coordinates of the current view of the data</para>
              </listitem>

              <listitem>
                <para>The settings of any controls used in Debrief (time on the Tote, primary/secondary tracks, etc)</para>
              </listitem>
            </itemizedlist> Plot-Files end with an <filename>DPF</filename> suffix and may be viewed in <application>Internet Explorer</application> or edited using <application>Notepad</application>.</para>
        </glossdef>
      </glossentry>

      <glossentry xml:id="g_property_window">
        <glossterm>Properties window</glossterm>

        <glossdef>
          <para>A view containing a list of all of the editable properties for an object within Debrief. Where applicable, custom editors are supplied (Color, Location, DTG, etc)</para>
        </glossdef>
      </glossentry>

      <glossentry xml:id="g_range_rate">
        <glossterm>Range rate</glossterm>

        <glossdef>
          <para>Range rate within the application is calculated using the following formula: <screen>              <markup>
Rdot = (Tspd * cos (Tcrse - brg) - 
Ospd * cos(Ocrse - brg) /*60
              </markup>          </screen><screen>
              <markup>Rdot = Range Rate (yds/min)
Tspd, Tcrse = Target course and speed (degs &amp; yps)
Ospd, Ocrse = Ownship course and speed (degs &amp; yps)
brg = Bearing to target from ownship (degs)
              </markup>       </screen></para>
        </glossdef>
      </glossentry>

      <glossentry xml:id="g_replay">
        <glossterm>Replay</glossterm>

        <glossdef>
          <para>Replay is the name of the Unix application used for viewing tracks back in the early 90&apos;s at MWC</para>
        </glossdef>
      </glossentry>

      <glossentry xml:id="g_serial">
        <glossterm>Serial</glossterm>

        <glossdef>
          <para>A "block" of exercise time, typically a sub-section of an exercise. An analyst will normally analyse and exercise one serial at a time, and it is usual for the exercise data to be broken down into serials.</para>
        </glossdef>
      </glossentry>

      <glossentry xml:id="g_sensor">
        <glossterm>Sensor</glossterm>

        <glossdef>
          <para>A sensor is defined as source of bearing-related information. As such, it could clearly be an acoustic sensor such as a sonar, but could also be a periscope or radar. <application>Debrief</application> makes no specific assumptions regarding what type of sensor is being represented.</para>
        </glossdef>
      </glossentry>

      <glossentry xml:id="g_sensor_contact">
        <glossterm>Sensor contact</glossterm>

        <glossdef>
          <para>This is an individual contact recorded on a sensor, a single bearing line reaching from the sensor location (origin) along the contact bearing to the contact range.</para>
        </glossdef>
      </glossentry>

      <glossentry xml:id="g_session">
        <glossterm>Session</glossterm>

        <glossdef>
          <para>The layers, projection details, and settings of any GUI-elements for the current view</para>
        </glossdef>
      </glossentry>

      <glossentry xml:id="g_slant_range">
        <glossterm>Slant range</glossterm>

        <glossdef>
          <para>The line of sight distance between two points, not at the same level relative to a specific datum. Normally in Debrief range is just calculated in two-dimensions (at the surface), but slant ranges can be requested via the Preferences window. Slant ranges are particularly useful in Debrief when analysing the proximity of two entities that are very close when measured at the surface but who possess a significant depth separation.</para>
        </glossdef>
      </glossentry>

      <glossentry xml:id="g_snail_trail">
        <glossterm>Snail trail</glossterm>

        <glossdef>
          <para>A mode within <application>Debrief</application> where only the current vessel position plus a short back-track of previous positions is shown.</para>
        </glossdef>
      </glossentry>

      <glossentry xml:id="g_stepper_control">
        <glossterm>Stepper control</glossterm>

        <glossdef>
          <para>The Stepper Control is the collection of controls at the top of the Tote panel. The Stepper Control provides controls to move the current time backwards and forwards, controls to edit the stepper itself (edit properties and change display mode).</para>
        </glossdef>
      </glossentry>

      <glossentry xml:id="g_symbology">
        <glossterm>Symbology</glossterm>

        <glossdef>
          <para>This pair of text characters contained in an <filename>REP</filename> file indicate the formatting to be applied to this particular track/fix/annotation, although they can be over-ridden once the data is open in <application>Debrief</application>.</para>
        </glossdef>
      </glossentry>

      <glossentry xml:id="g_tzero">
        <glossterm>T-Zero</glossterm>

        <glossdef>
          <para>A specific time of interest, particularly the start of a particular event. Contexts typically have their own convention of t-zero. Lightweight torpedo launches use weapon-splash time.</para>
        </glossdef>
      </glossentry>

      <glossentry xml:id="g_tma_solution">
        <glossterm>TMA solution</glossterm>

        <glossdef>
          <para>Warships (submarines in particular) use Target Motion Analysis (TMA) to produce an estimate of target range. course and speed when the target is held on a bearing/frequency only sensor. TMA solutions frequently represent uncertainty over target location by representing the location as an ellipse - given by a centre-point, an orientation and dimensions for the maximum and minimum axis (as diameter, not radius).</para>
        </glossdef>
      </glossentry>

      <glossentry xml:id="g_track">
        <glossterm>Track</glossterm>

        <glossdef>
          <para>A series of positions recorded for a particular vehicle (ship, submarine, helo, etc). A track has its own characteristics such as colour, label and symbol frequency, and the symbol used to represent it when the symbol highlighter is in use (see <xref linkend="symbol_sets"/>).</para>
        </glossdef>
      </glossentry>

      <glossentry xml:id="g_tote">
        <glossterm>Tote</glossterm>

        <glossdef>
          <para>A GUI panel located by default at the lower-left hand side of the <application>Debrief</application> window. The Tote contains the Time Stepper, beneath which are shown the primary and secondary tracks, when assigned. When stepping forward through a <glossterm>serial</glossterm> the Tote contains data calculated from the current vessel positions.</para>
        </glossdef>
      </glossentry>

      <glossentry xml:id="g_vpf">
        <glossterm>VPF</glossterm>

        <glossdef>
          <para>The Vector Product Format is the format of vectored data which may be viewed by <application>Debrief</application>. The main type of VPF data is the Vector Map Level 0, an unclassified global database which includes coastlines, national borders and depth contours. Its supplier ( <link xlink:href="http://www.nima.mil" xmlns:xlink="http://www.w3.org/1999/xlink">WWW.NIMA.MIL</link>) describes it as: <quote>The Vector Product Format (VPF) is a standard format, structure, and organization for large geographic databases that are based on a georelational data model and are intended for direct use. </quote></para>
        </glossdef>
      </glossentry>

      <glossentry xml:id="g_xml">
        <glossterm>XML</glossterm>

        <glossdef>
          <para>The eXtensible Markup Language, as recommend by the World Wide Web consortium.</para>
        </glossdef>
      </glossentry>
    </glossary>
  </appendix>

  <!-- ********************************************************************** -->

  <!-- ********************************************************************** -->

  <!-- Index-->

  <!-- ********************************************************************** -->

  <!-- ********************************************************************** -->

  <index xml:id="the_index">
    <title>Index</title>
  </index>

  <!-- ********************************************************************** -->

  <!-- ********************************************************************** -->

  <!-- Colophon                                                              -->

  <!-- ********************************************************************** -->

  <!-- ********************************************************************** -->

  <colophon xml:id="colophon">
    <para>Debrief has been authored in DocBook XML version 5.0 using Oxygen V12. Version 6.5.2 of Saxon used version 1.76 of the Docbook XSL stylesheets and version 1.0 of fop to publish the document to PDF and HTML.</para>

    <para>The majority of the text was originally imported from previous <application>Debrief</application> help-files, but the reviews conducted in the transfer to DocBook have resulted in many corrections and clarifications. <uri xlink:href="http://sharp-words.co.uk/" xmlns:xlink="http://www.w3.org/1999/xlink">Sharp Words</uri> provided a block of tidying/reformatting in Summer 2011, including an update of the sources to Docbook 5.0.</para>
  </colophon>
</book>
<!-- 
Local Variables:
mode: sgml
sgml-indent-step: 2
sgml-indent-data: t
sgml-set-face: t
End:
-->
