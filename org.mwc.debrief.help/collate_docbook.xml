<?xml version="1.0" encoding="UTF-8"?>
<project name="org.mwc.debrief.help" default="docbook_to_eclipse" basedir=".">

	<!-- and the cvs-logging related ones -->
	<property name="rootDir" value="../" />
	<property name="contribDir" value="${rootDir}/contribs" />
	<property name="sourceDir" value="../" description="top level directory within which all our sources are stored" />
	<property name="deployDir" value="${rootDir}/deploy" description="where we start building the output set" />
	<property name="buildSVNLogDir" value="${deployDir}/svn" />

	<!-- and the docbook/help related bits -->
	<property name="contribDir" value="${rootDir}/contribs" />
	<property name="helpDir" value="./" />
	<property name="helpDest" value="${helpDir}/html/legacy" />
	<property name="webhelpOutput" value="html/webhelp" />
	<property name="webhelpDest" value="${helpDir}/html/webhelp" />
	<property name="pdfDest" value="${helpDir}/html/pdf" />
	<property name="pdfDestination" value="../org.mwc.cmap.combined.feature/root_installs" />

	<property name="webhelpDir" value="${rootDir}/org.mwc.debrief.help/docbook" />
	<property name="input-xml" value="${webhelpDir}/ng_help.xml" />
	<property name="input-images-dirs" value="${webhelpDir}/images/** ${webhelpDir}/figures/**" />
	<property name="xslt-processor-classpath" value="${contribDir}/saxon6_5_5/saxon.jar" />
	<property name="saxonhe-classpath" value="${contribDir}/SaxonHE9-6-0-1J/saxon9he.jar" />
	<property name="webhelp.indexer.language" value="en" />
	<property name="validate-against-dtd" value="false" />
	<property name="output-dir" value="${webhelpOutput}" />
	<property name="lib-dir" value="lib" />


	<import file="${contribDir}/docbook-xsl-1.78.1/webhelp/build.xml" />

	<target name="clear_output" description="ditch the existing output files">
		<delete dir="${helpDest}" />
	</target>

	<target name="docbook_to_eclipse" description="Generate html from docbook" depends="quiet">
		<!-- clear the output directories -->
		<antcall target="clear_output" />

		<!-- generate the output -->
		<mkdir dir="${helpDest}" />
		<mkdir dir="${pdfDest}" />

		<!-- build the history content 
		<antcall target="cvs_log" />-->

		<!-- generate the HTML. Note: we're set to fail on error, which covers the XML compile failing  -->
		<echo message="Generating HTML" />
		<java classpath="${xslt-processor-classpath}" fork="yes" dir="${helpDest}" classname="com.icl.saxon.StyleSheet" maxmemory="128m" failonerror="yes">
			<arg value="../../../org.mwc.debrief.help/docbook/ng_help.xml" />
			<arg value="../../../org.mwc.debrief.help/docbook/eclipse_html_style.xsl" />
		</java>

		<!-- hey, to maintain the correct document locations, we've got to copy the generated content back
		  into the top-level of the docbook output directories -->
		<echo message="Copying HTML" />
		<copy todir="${helpDest}/" preservelastmodified="yes">
			<fileset dir="${helpDest}/html/legacy" />
		</copy>
		<!-- and delete the duff directory (to stop us getting confused... -->
		<delete dir="${helpDest}/html/legacy" />


		<!-- also copy the images to the target directory -->
		<echo message="Copying images" />
		<copy todir="${helpDest}/figures" preservelastmodified="yes">
			<fileset dir="${helpDir}\docbook/figures" />
		</copy>
		<copy todir="${helpDest}/images" preservelastmodified="yes">
			<fileset dir="${helpDir}/docbook/images" />
		</copy>
		<!-- and the stylesheet -->
		<echo message="Copying stylesheet" />
		<copy todir="${helpDest}" preservelastmodified="yes">
			<fileset file="${helpDir}/docbook/Header.css" />
		</copy>

		<!-- make sure the help file gets moved across -->
		<echo message="Copying stylesheet" />
		<copy file="${helpDir}/docbook/Header.css" verbose="true" failonerror="true" todir="${helpDest}" preservelastmodified="yes" />

		<!-- try to insert our additional section content -->
		<echo message="Inserting history" />
		<antcall target="insert_history_link" />

		<!-- lastly, do the pdf stage-->
		<antcall target="docbook_to_pdf">
		</antcall>

	</target>


	<target name="docbook_to_webhelp">

		<!-- see contribs/docbook-xsl-1.78.1/webhelp/build.xml -->
		<delete dir="${webhelpDest}" />
		<mkdir dir="${webhelpDest}" />

		<echo message="Running DocBook build task" />
		<antcall target="webhelp">
			<param name="stylesheet-path" value="docbook/webhelp_style.xsl" />
		</antcall>


		<echo message="Copying images" />
		<copy todir="${webhelpDest}/figures" preservelastmodified="yes">
			<fileset dir="${helpDir}\docbook/figures" />
		</copy>
		<copy todir="${webhelpDest}/images" preservelastmodified="yes">
			<fileset dir="${helpDir}/docbook/images" />
		</copy>

		<!-- move the Debrief logo into the help content -->
		<copy description="replace header logo" todir="${webhelpDest}/common/images" overwrite="yes" failonerror="yes">
			<fileset file="${helpDir}/docbook/figures/logo.png" />
		</copy>

		<!-- move the favicon in, to replace the DocBook one -->
		<copy description="replace favicon" todir="${webhelpDest}" overwrite="yes" failonerror="yes">
			<fileset file="${helpDir}/docbook/figures/favicon.ico" />
		</copy>


	</target>

	<target name="docbook_to_internet">

		<!-- help the ftp task get going-->
		<property environment="env" />
		<property name="ftpPassword" value="${env.DebFtpPassword}" />
		<property name="ftpUsername" value="${env.DebFtpUsername}" />

		<property name="destination" value="/clickandbuilds/FastDebrief/tutorial" />

		<echo message="About to upload to internet" />

		<fail unless="ftpPassword">Sorry, the ftp isn't set in your environmental variables</fail>

		<!-- take a copy of the index page, we're going to rename it -->
		<copy file="html/legacy/index.html" tofile="html/legacy/home.html" />

		<!-- note, the ftp task relies on an Apache Commons jar.  It's in the lib
		     folder in the help project.  Tell Ant all about it using Ant/Runtime
			     preferences page -->
		<!-- note 2 we had to switch passive mode on, after server
	    replied with 502 PORT COMMAND NOT SUPPORTED -->
		<ftp password="${ftpPassword}" verbose="no" port="21" depends="yes" server="debrief.info" passive="true" userid="${ftpUsername}" remotedir="${destination}">
			<fileset dir="html/legacy" />
		</ftp>

		<ftp description="overwrite the default index page, so it redirects to the site's home page" password="${ftpPassword}" passive="true" server="debrief.info" userid="${ftpUsername}" remotedir="${destination}">
			<fileset file="lib/index.html" />
		</ftp>

	</target>

	<target name="docbook_to_pdf" description="Generate html from docbook">

		<property name="fopVersion" value="fop-1.0" description="the current version of FOP" />
		<property name="fopDir" value="${rootDir}/contribs/${fopVersion}" description="where the fop libraries are located" />
		<property name="docName" value="DebriefNG.pdf" description="The Debrief document file" />
		<property name="xml.dir" value="docbook" description="where our docbook sources are" />

		<echo message="Ditching old pdf" />
		<delete file="${pdfDestination}/${docName}" />

		<echo message="ditching old fo document" />
		<delete file="${rootDir}/org.mwc.debrief.help/docbook/out.fo" />

		<!-- produce the FO file, ready for PDF -->
		<property name="saxon.dir" value="${rootDir}/contribs/saxon6_5_5" />
		<property name="xml.dir" value="${helpDir}docbook" />
		<property name="fo.dir" value="fo" />
		<echo message="going from xml to FO" />
		<xslt style="${xml.dir}/fo_style.xsl" classpath="${saxon.dir}/saxon.jar" in="${xml.dir}/ng_help.xml" out="${xml.dir}/out.fo" />

		<taskdef name="fop" classname="org.apache.fop.tools.anttasks.Fop">
			<classpath>
				<pathelement location="${fopDir}/build/fop.jar" />
				<pathelement location="${fopDir}/lib/avalon-framework-4.2.0.jar" />
				<pathelement location="${fopDir}/lib/batik-all-1.7.jar" />
				<pathelement location="${fopDir}/lib/commons-logging-1.0.4.jar" />
				<pathelement location="${fopDir}/lib/xmlgraphics-commons-1.4.jar" />
				<pathelement location="${fopDir}/lib/commons-io-1.3.1.jar" />
			</classpath>
		</taskdef>
		<echo message="output to fo complete, now going to pdf" />
		<fop format="application/pdf" basedir="docbook" fofile="docbook/out.fo" outfile="docbook/DebriefNG.pdf" />

		<!-- ditch the fo file, we don't want it in version tracking -->
		<delete file="docbook/out.fo" failonerror="true" />

		<!-- ok, move the output file to the target directory -->
		<move file="docbook/DebriefNG.pdf" todir="${pdfDestination}" failonerror="true" />
	</target>

	<!-- now, how do we tie the two together? -->
	<target name="insert_history_link">
		<property name="dupFile" value="${helpDest}/toc2.xml" />

		<!-- make sure the target file is gone -->
		<delete file="${dupFile}" />

		<!-- create a fresh copy
		<copy file="${helpDest}\toc.xml" tofile="${dupFile}" /> -->

		<!-- try the change
		<replace file="${dupFile}">
			<replacetoken>label="Getting started"</replacetoken>
			<replacevalue>label="Short History" href="html/history/statcvs/short/index.html"/&gt;
			  	&lt;topic label="Verbose History" href="html/history/statcvs/long/index.html"/&gt;
			  	&lt;topic label="Getting started" </replacevalue>
		</replace> -->

	</target>

	<!--
	######################################################################################
	##	utility tasks
	######################################################################################
	  -->


	<target name="_log1_produce" description="produce the cvs change logs">

		<!-- clear the output directory -->
		<delete dir="${buildSVNLogDir}" />

		<!-- create the output directory if we have to -->
		<mkdir dir="${buildSVNLogDir}" />
		<mkdir dir="${buildSVNLogDir}/statcvs" />

		<!-- produce the CVS log -->
		<echo message="about to log:${sourceDir}" />

		<tstamp>
			<format property="statsvn.stop" pattern="yyyy-MM-dd" />
		</tstamp>
		<tstamp>
			<format property="statsvn.start" pattern="yyyy-MM-dd" offset="-90" unit="day" />
		</tstamp>

		<exec executable="svn" dir="${sourceDir}" output="../deploy/cvs/statcvs.xml">
			<arg line="log" />
			<arg line="http://subversion.assembla.com/svn/Debrief" />
			<arg line="-v" />
			<arg line="--xml" />
			<arg line="-r {${statsvn.start}}:{${statsvn.stop}}" />
		</exec>

	</target>

	<target name="_log2_format" description="use the stylesheet tidier">
		<antcall target="_svn_stat_formatter">
			<param name="svn_stat_outputDir" value="${buildSVNLogDir}/statcvs/short" />
			<param name="svn_stat_stylesheet" value="../org.mwc.cmap.installer/statcvs_template/single_page_suite.xml" />
			<param name="svn_stat_outputTitle" value="Abbreviated change statistics" />
		</antcall>

		<!--		<antcall target="_svn_stat_formatter">
			<param name="svn_stat_outputDir"
			       value="${buildSVNLogDir}/statcvs/long" />
			<param name="svn_stat_stylesheet"
			       value="../org.mwc.cmap.installer/statcvs_template/suite.xml" />
			<param name="svn_stat_outputTitle"
			       value="Debrief change statistics" />
		</antcall> -->
	</target>

	<target name="_log3_copy" description="copy the tidy cvs logs to the help structure so that they can be included in help-references">
		<copy todir="..\org.mwc.debrief.help\html\history">
			<fileset dir="${buildSVNLogDir}" />
		</copy>
	</target>

	<target name="cvs_log" description="do the steps to produce a cvs log">
		<antcall target="_log1_produce" />
		<antcall target="_log2_format" />
		<antcall target="_log3_copy" />
	</target>

	<target name="_svn_stat_formatter" description="use the stylesheet tidier">
		<!-- ok, delete the output directory -->
		<delete dir="${svn_stat_outputDir}" />

		<!-- and create it afresh -->
		<mkdir dir="${svn_stat_outputDir}" />

		<!-- and produce the output -->
		<java dir="${sourceDir}" jar="${contribDir}/statsvn-0.3.1/statsvn.jar" fork="true">
			<env key="LANG" value="en_US" />
			<jvmarg line="-mx256m" />
			<arg line="	-output-dir ${svn_stat_outputDir}
					-title 'Debrief NG Source listing' 
					deploy/cvs/statcvs.xml 
				    ${rootDir}" />
		</java>
	</target>

	<target name="javadoc" depends="quiet, ease_javadoc, debrief_javadoc" />
	
	<target name="quiet">
	<!--
	COMMENTED OUT, SINCE ANT FAILS ON THIS LINE ON Java > 9
		<script language="javascript">
		        var logger = project.getBuildListeners( ).firstElement( );
		        logger.setMessageOutputLevel( 0 );
		    </script>
		    -->
	</target>
	
	<target name="ease_javadoc">
		<delete dir="../org.mwc.debrief.scripting/help" />
        <exec executable="javadoc">
            <arg value="-classpath"/>
            <arg value="/usr/share/ant/lib/ant-launcher.jar:/usr/share/ant/lib/ant-apache-bcel.jar:/usr/share/ant/lib/ant-antlr.jar:/usr/share/ant/lib/ant-junit.jar:/usr/share/ant/lib/ant-junit4.jar:/usr/share/ant/lib/ant-swing.jar:/usr/share/ant/lib/ant-junitlauncher.jar:/usr/share/ant/lib/ant-jsch.jar:/usr/share/ant/lib/ant-javamail.jar:/usr/share/ant/lib/ant-jai.jar:/usr/share/ant/lib/ant-netrexx.jar:/usr/share/ant/lib/ant-commons-logging.jar:/usr/share/ant/lib/ant-commons-net.jar:/usr/share/ant/lib/ant-apache-xalan2.jar:/usr/share/ant/lib/ant-apache-bsf.jar:/usr/share/ant/lib/ant-apache-log4j.jar:/usr/share/ant/lib/ant-apache-resolver.jar:/usr/share/ant/lib/ant-jmf.jar:/usr/share/ant/lib/ant-jdepend.jar:/usr/share/ant/lib/ant.jar:/usr/share/ant/lib/ant-testutil.jar:/usr/share/ant/lib/ant-xz.jar:/usr/share/ant/lib/ant-apache-oro.jar:/usr/share/ant/lib/ant-apache-regexp.jar:/usr/lib/jvm/java-8-openjdk/lib/tools.jar"/>
            <arg value="-sourcepath"/>
            <arg value="../org.mwc.debrief.scripting/src:../org.mwc.cmap.legacy/src:../org.mwc.debrief.legacy/src"/>
            <arg value="-doclet"/>
            <arg value="org.eclipse.ease.helpgenerator.V9ModuleDoclet"/>
            <arg value="-docletpath"/>
            <arg value="${lib-dir}/easedoclet.jar"/>
            <arg value="-root"/>
            <arg value="../org.mwc.debrief.scripting"/>
            <arg value="-failOnMissingDocs"/>
            <arg value="false"/>
            <arg value="-failOnHTMLError"/>
            <arg value="false"/>
            <arg value="-subpackages"/>
            <arg value="org.mwc.debrief.scripting.wrappers"/>
           	<arg value="--ignore-source-errors"/>
        </exec>
	</target>

	<target name="debrief_javadoc">
		<delete dir="javadoc"/>
		<javadoc destdir="javadoc"  sourcepath="../org.mwc.cmap.legacy/src:../org.mwc.debrief.legacy/src" >
			<arg value="-notimestamp" />
           	<arg value="--ignore-source-errors"/>
		</javadoc>
	</target>

</project>
