<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
	elementFormDefault="qualified">
	<!-- -->
	<!--Top Level -->
	<!-- -->
	<xs:element name="Scenario">
		<xs:annotation>
			<xs:documentation>Container for an asset scenario</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: name, step time,
				step pause,
				#participants. Editable: step time, step pause
			</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element name="StepTime" type="DurationType">
					<xs:annotation>
						<xs:documentation>This represents how long we move forward at each
							time
							step
						</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="StepPause" type="DurationType"
					minOccurs="0">
					<xs:annotation>
						<xs:documentation>How long we pause for before moving to the next
							time
							step
						</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="Environment" type="CoreEnvironmentType"
					minOccurs="0">
					<xs:annotation>
						<xs:documentation>The environment for this scenario
						</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="Participants" type="ParticipantsType">
					<xs:annotation>
						<xs:documentation>The list of vessels/aircraft to be modelled in
							this
							scenario
						</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="DebriefLayer" type="DebriefLayerType"
					minOccurs="0">
					<xs:annotation>
						<xs:documentation>The backdrop layers to show</xs:documentation>
					</xs:annotation>
				</xs:element>
			</xs:sequence>
			<xs:attribute name="Created" type="xs:dateTime" use="optional">
				<xs:annotation>
					<xs:documentation>Date this file was created (yyyy-mm-ddThh:mm:ss)
					</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name="Name" type="xs:string" use="required">
				<xs:annotation>
					<xs:documentation>The name for this scenario</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name="Case" type="xs:string" use="optional">
				<xs:annotation>
					<xs:documentation>Where we are conducting multiple permutations of
						a particular
						scenario, this computer-generated attribute contains
						details of the current
						permutation
					</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name="StartTime" type="xs:dateTime" use="optional">
				<xs:annotation>
					<xs:documentation>Model time when this scenario starts
						(yyyy-mm-ddThh:mm:ss).
						The current time will be used if no DTG
						supplied
					</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name="ShowActivity" type="xs:boolean" use="optional">
				<xs:annotation>
					<xs:documentation>Whether to include participant activity details
						on plot
					</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name="ShowName" type="xs:boolean" use="optional">
				<xs:annotation>
					<xs:documentation>Whether to include participant names on plot
					</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name="ShowStatus" type="xs:boolean" use="optional">
				<xs:annotation>
					<xs:documentation>Whether to include participant status on plot
					</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name="ShowSymbol" type="xs:boolean" use="optional">
				<xs:annotation>
					<xs:documentation>Whether to include participant symbols on plot
					</xs:documentation>
				</xs:annotation>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<xs:element name="StandaloneObserverList">
		<xs:annotation>
			<xs:documentation>A wrapper for an observer list which lets us create
				file containing
				just observer list - none of the scenario controller
				wrappers around it. This is
				useful for loading into the Workbench
				since the other scenario control bits wouldn't
				make sense.
			</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: # observers.
				Editable:
				None
			</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element name="ObserverList" type="ObserverListType"
					minOccurs="0">
					<xs:annotation>
						<xs:documentation>The list of observers &amp; referees which will
							oversee
							this scenario
						</xs:documentation>
					</xs:annotation>
				</xs:element>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="ScenarioController">
		<xs:annotation>
			<xs:documentation>Combination of scenario generator and list of
				scenario
				observers
			</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: output dir
				Editable:
				nil
			</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element name="ScenarioGenerator" type="ScenarioGeneratorType"
					minOccurs="0" />
				<xs:element name="ObserverList" type="ObserverListType"
					minOccurs="0">
					<xs:annotation>
						<xs:documentation>The list of observers &amp; referees which will
							oversee
							this scenario
						</xs:documentation>
					</xs:annotation>
				</xs:element>
			</xs:sequence>
			<xs:attribute name="OutputDirectory" type="validString"
				use="required">
				<xs:annotation>
					<xs:documentation>The directory in which to place the data and
						results
						files
					</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name="RandomSeed" type="xs:int" use="optional">
				<xs:annotation>
					<xs:documentation>A seed to use for the random number generator in
						ASSET. The
						seed is optional, when omitted a different series of
						random numbers will be
						generated each time.
					</xs:documentation>
				</xs:annotation>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<xs:complexType name="ObserverListType">
		<xs:annotation>
			<xs:documentation>The list of observers and referees for this
				scenario
			</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: # observers.
				Editable:
				None
			</xs:documentation>
		</xs:annotation>
		<xs:choice minOccurs="0" maxOccurs="unbounded">
			<xs:element name="PlotInvestigationSubjectObserver" type="PlotInvestigationSubjectObserverType" />
			<xs:element name="CloudObserver" type="CloudObserverType" />
			<xs:element name="DebriefReplayObserver" type="DebriefReplayObserverType" />
			<xs:element name="NMEAObserver" type="NMEAObserverType" />
			<xs:element name="BMRObserver" type="BMRObserverType" />
			<xs:element name="CSVStatusObserver" type="CSVStatusObserverType" />
			<xs:element name="CSVDetectionObserver" type="CSVDetectionObserverType" />
			<xs:element name="DebriefDeployableSensorLocationObserver"
				type="DebriefDeployableSensorLocationObserverType" />
			<xs:element name="TrackPlotObserver" type="TrackPlotObserverType" />
			<xs:element name="ElapsedTimeObserver" type="ElapsedTimeObserverType" />
			<xs:element name="FinalStateObserver" type="FinalStateObserverType" />
			<xs:element name="CSVTrackObserver" type="CSVTrackObserverType" />
			<xs:element name="CSV_CLog_TrackObserver" type="CSV_CLog_TrackObserverType" />
			<xs:element name="TowedArrayLocationObserver" type="TowedArrayLocationObserverType" />
			<xs:element name="TimeObserver" type="TimeObserverType" />
			<xs:element name="ProximityObserver" type="ProximityObserverType" />
			<xs:element name="RemoveInAreaObserver" type="RemoveInAreaObserverType" />
			<xs:element name="StopOnProximityObserver" type="StopOnProximityObserverType" />
			<xs:element name="RemoveDetectedObserver" type="RemoveDetectedObserverType" />
			<xs:element name="DetectionObserver" type="DetectionObserverType" />
			<xs:element name="PlotSensorObserver" type="PlotSensorObserverType" />
			<xs:element name="PlotDetectionStatusObserver" type="PlotDetectionStatusObserverType" />
			<xs:element name="StopOnDetectionObserver" type="StopOnDetectionObserverType" />
			<xs:element name="StopOnProximityDetectionObserver" type="StopOnProximityDetectionObserverType" />
			<xs:element name="ProportionDetectedObserver" type="ProportionDetectedObserverType" />
			<xs:element name="TimeToLaunchObserver" type="TimeToLaunchObserverType" />
		</xs:choice>
	</xs:complexType>
	<!-- -->
	<!--Sensors -->
	<!-- -->
	<xs:element name="BroadbandSensor" type="BroadbandSensorType">
		<xs:annotation>
			<xs:documentation>instance of subject, declared to allow standalone
				instance of this
				object to be defined in file
			</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="ActiveBroadbandSensor" type="ActiveBroadbandSensorType">
		<xs:annotation>
			<xs:documentation>instance of subject, declared to allow standalone
				instance of this
				object to be defined in file
			</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="DippingActiveBroadbandSensor" type="DippingActiveBroadbandSensorType">
		<xs:annotation>
			<xs:documentation>instance of subject, declared to allow standalone
				instance of this
				object to be defined in file
			</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="NarrowbandSensor" type="NarrowbandSensorType">
		<xs:annotation>
			<xs:documentation>instance of subject, declared to allow standalone
				instance of this
				object to be defined in file
			</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="OpticLookupSensor" type="OpticLookupSensorType">
		<xs:annotation>
			<xs:documentation>instance of subject, declared to allow standalone
				instance of this
				object to be defined in file
			</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="PlainCookieSensor" type="PlainCookieSensorType">
		<xs:annotation>
			<xs:documentation>instance of subject, declared to allow standalone
				instance of this
				object to be defined in file
			</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="RadarLookupSensor" type="RadarLookupSensorType">
		<xs:annotation>
			<xs:documentation>instance of subject, declared to allow standalone
				instance of this
				object to be defined in file
			</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="MADLookupSensor" type="MADLookupSensorType">
		<xs:annotation>
			<xs:documentation>instance of subject, declared to allow standalone
				instance of this
				object to be defined in file
			</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="ActiveInterceptSensor" type="ActiveInterceptSensorType">
		<xs:annotation>
			<xs:documentation>instance of subject, declared to allow standalone
				instance of this
				object to be defined in file
			</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:complexType name="SensorFitType">
		<xs:annotation>
			<xs:documentation>Collection of sensors</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: Custom UI showing
				list of
				sensors Editable: nil
			</xs:documentation>
		</xs:annotation>
				<xs:choice minOccurs="0" maxOccurs="unbounded">
					<xs:element name="BroadbandSensor" type="BroadbandSensorType"
						minOccurs="0" />
					<xs:element name="ActiveBroadbandSensor" type="ActiveBroadbandSensorType"
						minOccurs="0" />
					<xs:element name="DippingActiveBroadbandSensor" type="DippingActiveBroadbandSensorType"
						minOccurs="0" />
					<xs:element name="NarrowbandSensor" type="NarrowbandSensorType"
						minOccurs="0" />
					<xs:element name="OpticLookupSensor" type="OpticLookupSensorType"
						minOccurs="0" />
					<xs:element name="PlainCookieSensor" type="PlainCookieSensorType"
						minOccurs="0" />
					<xs:element name="TypedCookieSensor" type="TypedCookieSensorType"
						minOccurs="0" />
					<xs:element name="TypedCookieInterceptSensor" type="TypedCookieInterceptType"
						minOccurs="0" />
					<xs:element name="RadarLookupSensor" type="RadarLookupSensorType"
						minOccurs="0" />
					<xs:element name="MADLookupSensor" type="MADLookupSensorType"
						minOccurs="0" />
					<xs:element name="ActiveInterceptSensor" type="ActiveInterceptSensorType"
						minOccurs="0" />
					<xs:element name="BistaticReceiver" type="BistaticReceiverType"
						minOccurs="0" />
				</xs:choice>
	</xs:complexType>
	<xs:complexType name="CoreSensorType">
		<xs:annotation>
			<xs:documentation>The base description sensors</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: name, working,
				Editable: name,
				working
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="SensorOffset" type="WorldDistanceType" minOccurs="0" maxOccurs="1">
				<xs:annotation>
					<xs:documentation>
						Offset for this sensor from tactical datum
					</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="Name" type="xs:string" use="optional">
			<xs:annotation>
				<xs:documentation>The name of this sensor</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="Medium" type="xs:string" use="optional">
			<xs:annotation>
				<xs:documentation>Optional override type for medium of this sensor
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="Working" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Whether this sensor is currently working
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="id" type="xs:int" use="optional">
			<xs:annotation>
				<xs:documentation>The id of this sensor (only normally present in
					machine-generated
					scenario files)
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="DetectionIntervalMillis" type="xs:integer">
			<xs:annotation>
				<xs:documentation>How long to pause between detection
					opportunities.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="Ambiguous" type="xs:boolean" use="required">
			<xs:annotation>
				<xs:documentation>Whether this sensor produces ambiguous bearings
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="CanProduceRange" type="xs:boolean"
			use="required">
			<xs:annotation>
				<xs:documentation>Whether this sensor produces a range value
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="CoreLookupSensorType">
		<xs:annotation>
			<xs:documentation>The base description for lookup sensors
			</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: nil, Editable: nil
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="CoreSensorType">
				<xs:sequence>
					<xs:element name="TBDO" type="DurationType">
						<xs:annotation>
							<xs:documentation>Time between detection opportunities
							</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="CTP" type="DurationType">
						<xs:annotation>
							<xs:documentation>Classification time period</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="ITP" type="DurationType">
						<xs:annotation>
							<xs:documentation>Identification time period</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
				<xs:attribute name="VDR" type="xs:float" use="required">
					<xs:annotation>
						<xs:documentation>Variability in detection range
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="MRF" type="xs:float" use="required">
					<xs:annotation>
						<xs:documentation>Maximum range factor (once detected, a contact
							will be
							held out to this range)
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="CRF" type="xs:float" use="required">
					<xs:annotation>
						<xs:documentation>Classification range factor</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="IRF" type="xs:float" use="required">
					<xs:annotation>
						<xs:documentation>Identification range factor</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="OpticLookupSensorType">
		<xs:annotation>
			<xs:documentation>Typical Optic sensor</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: inherited
				Editable:
				inherited
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="CoreLookupSensorType">
				<xs:sequence />
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="MADLookupSensorType">
		<xs:annotation>
			<xs:documentation>Typical MAD sensor</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: inherited
				Editable:
				inherited
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="CoreLookupSensorType" />
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="RadarLookupSensorType">
		<xs:annotation>
			<xs:documentation>Radar</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: inherited, K
				Editable:
				inherited, K
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="CoreLookupSensorType">
				<xs:sequence />
				<xs:attribute name="K" type="xs:float" use="required">
					<xs:annotation>
						<xs:documentation>The radar constant</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="BroadbandSensorType">
		<xs:annotation>
			<xs:documentation>Typical broadband (hull-mounted) sensor
			</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: inherited,
				aperture Editable:
				inherited, aperture
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="CoreSensorType">
				<xs:sequence />
				<xs:attribute name="Aperture" type="xs:float" use="required">
					<xs:annotation>
						<xs:documentation>The angle of coverage in degrees for this sensor
							either
							side (therefore doubled for total aperture)
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="PlainCookieSensorType">
		<xs:annotation>
			<xs:documentation>Very simple cookie-cutter sensor</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: inherited,
				aperture Editable:
				inherited, detection range
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="CoreSensorType">
				<xs:sequence>
					<xs:element name="DetectionRange" type="WorldDistanceType">
						<xs:annotation>
							<xs:documentation>Range at which this sensor makes a detection -
								against
								all target y
							</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
				<xs:attribute name="ProducesRange" type="xs:boolean"
					use="optional">
					<xs:annotation>
						<xs:documentation>Whether this sensor produces range data (default
							= true)
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="TypedCookieInterceptType">
		<xs:annotation>
			<xs:documentation>Simple cookie-cutter intercept sensor with per-type
				ranges
			</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: inherited,
				aperture Editable:
				inherited, detection range
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="CoreSensorType">
				<xs:sequence>
					<xs:element name="TypedRangeDoublet" type="TypedRangeDatumType"
						maxOccurs="unbounded" minOccurs="1">
						<xs:annotation>
							<xs:documentation>Collection of detection range vs target type
								items
							</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
				<xs:attribute name="DetectionLevel" type="DetectionLevelType"
					use="optional">
					<xs:annotation>
						<xs:documentation>The level of detection delivered by this
							sensor
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="TypedCookieSensorType">
		<xs:annotation>
			<xs:documentation>Simple cookie-cutter sensor with per-type ranges
			</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: inherited,
				aperture Editable:
				inherited, detection range
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="CoreSensorType">
				<xs:sequence>
					<xs:element name="TypedRangeDoublet" type="TypedRangeDatumType"
						maxOccurs="unbounded" minOccurs="1">
						<xs:annotation>
							<xs:documentation>Collection of detection range vs target type
								items
							</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
				<xs:attribute name="ProducesRange" type="xs:boolean"
					use="optional">
					<xs:annotation>
						<xs:documentation>Whether this sensor produces range data (default
							= true)
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="IncludesNoise" type="xs:boolean" use="optional">
					<xs:annotation>
						<xs:documentation>Whether to include noise data on the bearings (default = false)
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="DetectionLevel" type="DetectionLevelType">
					<xs:annotation>
						<xs:documentation>The level of detection delivered by this
							sensor
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="NarrowbandSensorType">
		<xs:annotation>
			<xs:documentation>
				Typical narrowband (towed-array) sensor
			</xs:documentation>
			<xs:documentation source="http://asset.info/ui">
				Visible: inherited, steady time Editable: inherited,
				steady time
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="CoreSensorType">
				<xs:sequence>
					<xs:element name="SteadyTime" type="DurationType">
						<xs:annotation>
							<xs:documentation>
								Time taken for the array to steady
								post-turn
							</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
				<xs:attribute name="HasBearing" type="xs:boolean"
					use="optional">
					<xs:annotation>
						<xs:documentation>
							Whether this sensor can record bearing data
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="SecondHarmonic" type="xs:boolean">
					<xs:annotation>
						<xs:documentation>
							Whether this sensor tracks the second harmonic
							- this is a workaround to create sensor cuts
							on two target tonals
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="ActiveBroadbandSensorType">
		<xs:annotation>
			<xs:documentation>Active broadband sensor</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: inherited, source
				level
				Editable: inherited, source level
			</xs:documentation>
		</xs:annotation>

		<xs:complexContent>
			<xs:extension base="BroadbandSensorType">
				<xs:sequence />
				<xs:attribute name="SourceLevel" type="xs:float" use="required">
					<xs:annotation>
						<xs:documentation>The active signal source level
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="DippingActiveBroadbandSensorType">
		<xs:annotation>
			<xs:documentation>Dipping active broadband sensor</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: inherited
				Editable:
				inherited
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="ActiveBroadbandSensorType">
				<xs:sequence>
					<xs:element name="AirLowerRate" type="SpeedType" />
					<xs:element name="AirRaiseRate" type="SpeedType" />
					<xs:element name="WaterLowerRate" type="SpeedType" />
					<xs:element name="WaterRaiseRate" type="SpeedType" />
					<xs:element name="RaisePause" type="DurationType" />
					<xs:element name="LowerPause" type="DurationType" />
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="ActiveInterceptSensorType">
		<xs:annotation>
			<xs:documentation>Active intercept sensor</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: inherited
				Editable:
				inherited
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="CoreSensorType">
				<xs:sequence />
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="BistaticReceiverType">
		<xs:annotation>
			<xs:documentation>Active intercept sensor</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: inherited Editable: inherited </xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="CoreSensorType">
				<xs:sequence/>
				<xs:attribute name="Suppress" type="xs:boolean" use="optional">
					<xs:annotation>
						<xs:documentation>Whether to suppress bearings when obscured by direct path</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="SuppressAngle" type="xs:double" use="optional">
					<xs:annotation>
						<xs:documentation>The angle (either side) of the direct path that gets obscured (degs)</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- -->
	<!--Environment -->
	<!-- -->
	<xs:complexType name="CoreEnvironmentType">
		<xs:annotation>
			<xs:documentation>The environment for this scenario
			</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: Name, indicators
				for
				environments present Editable: Name
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="RadarLookupEnvironment" type="RadarLookupType"
				minOccurs="0" />
			<xs:element name="VisualLookupEnvironment" type="VisualLookupType"
				minOccurs="0" />
			<xs:element name="MADLookupEnvironment" type="MADLookupType"
				minOccurs="0" />
		</xs:sequence>
		<xs:attribute name="Name" type="xs:token" use="required">
			<xs:annotation>
				<xs:documentation>The name of this environment</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="SeaState" use="required">
			<xs:annotation>
				<xs:documentation>The current sea state (1 to 6)</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:NMTOKEN">
					<xs:enumeration value="1" />
					<xs:enumeration value="2" />
					<xs:enumeration value="3" />
					<xs:enumeration value="4" />
					<xs:enumeration value="5" />
					<xs:enumeration value="6" />
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="LightLevel" use="optional">
			<xs:annotation>
				<xs:documentation>The current light level</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:NMTOKEN">
					<xs:enumeration value="DAYLIGHT" />
					<xs:enumeration value="DUSK" />
					<xs:enumeration value="MOON_NIGHT" />
					<xs:enumeration value="DARK_NIGHT" />
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="AtmosphericAttenuation" use="required">
			<xs:annotation>
				<xs:documentation>The current sea state (0 to 6)</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:NMTOKEN">
					<xs:enumeration value="VERY_CLEAR" />
					<xs:enumeration value="CLEAR" />
					<xs:enumeration value="LIGHT_HAZE" />
					<xs:enumeration value="HAZE" />
					<xs:enumeration value="MIST" />
					<xs:enumeration value="FOG" />
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
	</xs:complexType>
	<!-- -->
	<!--Lookup tables for Lookup Sensor Type -->
	<!-- -->
	<xs:complexType name="RadarLookupType">
		<xs:annotation>
			<xs:documentation>Collection of radar identification characteristics
			</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: Name Editable: nil
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="TargetAspectSet" type="TargetAspectSetType" />
			<xs:element name="TargetSeaStateSet" type="TargetSeaStateSetType" />
		</xs:sequence>
		<xs:attribute name="Name" type="xs:string" use="required" />
	</xs:complexType>
	<xs:complexType name="VisualLookupType">
		<xs:annotation>
			<xs:documentation>Collection of visual identification characteristics
			</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: Name Editable: nil
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="VisualAttenuationDatum" type="VisualAttenuationDatumType" />
			<xs:element name="TargetVisibilitySet" type="TargetVisibilitySetType" />
			<xs:element name="TargetSeaStateSet" type="TargetSeaStateSetType" />
			<xs:element name="LightLevelDatum" type="LightLevelDatumType" />
		</xs:sequence>
		<xs:attribute name="Name" type="xs:string" use="required" />
	</xs:complexType>
	<xs:complexType name="MADLookupType">
		<xs:annotation>
			<xs:documentation>MAD performance</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: Type Editable: nil
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="PredictedRangeSet" type="PredictedRangeSetType" />
		</xs:sequence>
		<xs:attribute name="Name" type="xs:string" use="required" />
	</xs:complexType>
	<xs:complexType name="LightAttenuationDatumType">
		<xs:annotation>
			<xs:documentation>Series of values of attribute at different light
				attenuation
				values
			</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: Type Editable: nil
			</xs:documentation>
		</xs:annotation>
		<xs:attribute name="Daylight" type="xs:float" use="required" />
		<xs:attribute name="Dusk" type="xs:float" use="required" />
		<xs:attribute name="MoonlitNight" type="xs:float" use="required" />
		<xs:attribute name="DarkNight" type="xs:float" use="required" />
	</xs:complexType>
	<xs:complexType name="LightLevelDatumType">
		<xs:annotation>
			<xs:documentation>Series of values of attribute at different light
				level
				values
			</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: Type Editable: nil
			</xs:documentation>
		</xs:annotation>
		<xs:attribute name="Daylight" type="xs:float" use="required" />
		<xs:attribute name="Dusk" type="xs:float" use="required" />
		<xs:attribute name="MoonlitNight" type="xs:float" use="required" />
		<xs:attribute name="DarkNight" type="xs:float" use="required" />
	</xs:complexType>
	<xs:complexType name="PredictedRangeSetType">
		<xs:annotation>
			<xs:documentation>Maintenance object</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: Nil Editable: nil
			</xs:documentation>
		</xs:annotation>

		<xs:sequence>
			<xs:element name="PredictedRangeDatum" type="PredictedRangeDatumType"
				maxOccurs="unbounded" />
		</xs:sequence>
		<xs:attribute name="UnknownType" type="xs:float" use="optional">
			<xs:annotation>
				<xs:documentation>Fallback value to use for target types not
					explicitly represented
					in this list. Omission of this value wil stop
					modelling if unrepresented target
					type is encountered - normally the
					correct behaviour
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="PredictedRangeDatumType">
		<xs:annotation>
			<xs:documentation>Maintenance object</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: Nil Editable: nil
			</xs:documentation>
		</xs:annotation>

		<xs:sequence />
		<xs:attribute ref="Type" use="required" />
		<xs:attribute name="PredictedRange" type="xs:float" use="required">
			<xs:annotation>
				<xs:documentation>Predicted range (in metres) at which MAD hit will
					fire
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="TargetVisibilitySetType">
		<xs:annotation>
			<xs:documentation>Maintenance object</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: Nil Editable: nil
			</xs:documentation>
		</xs:annotation>

		<xs:sequence>
			<xs:element name="TargetVisibilityDatum" type="TargetVisibilityDatumType"
				maxOccurs="unbounded" />
		</xs:sequence>
		<xs:attribute name="UnknownType" type="xs:float" use="optional">
			<xs:annotation>
				<xs:documentation>Fallback value to use for target types not
					explicitly represented
					in this list. Omission of this value wil stop
					modelling if unrepresented target
					type is encountered - normally the
					correct behaviour
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="TargetVisibilityDatumType">
		<xs:annotation>
			<xs:documentation>Series of values of attribute at different
				visibility
				values
			</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: Type Editable: nil
			</xs:documentation>
		</xs:annotation>

		<xs:sequence />
		<xs:attribute ref="Type" use="required" />
		<xs:attribute name="Visibility" type="xs:float" use="required" />
	</xs:complexType>
	<xs:complexType name="VisualAttenuationDatumType">
		<xs:annotation>
			<xs:documentation>Series of values of attribute at different
				visibility
				levels
			</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: Type Editable: nil
			</xs:documentation>
		</xs:annotation>

		<xs:sequence />
		<xs:attribute name="VeryClear" type="xs:float" use="required" />
		<xs:attribute name="Clear" type="xs:float" use="required" />
		<xs:attribute name="LightHaze" type="xs:float" use="required" />
		<xs:attribute name="Haze" type="xs:float" use="required" />
		<xs:attribute name="Mist" type="xs:float" use="required" />
		<xs:attribute name="Fog" type="xs:float" use="required" />
	</xs:complexType>
	<xs:complexType name="TargetAspectSetType">
		<xs:annotation>
			<xs:documentation>Maintenance object</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: Nil Editable: nil
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="TargetAspectDatum" type="TargetAspectDatumType"
				maxOccurs="unbounded" />
		</xs:sequence>
		<xs:attribute name="UnknownType" type="xs:float" use="optional">
			<xs:annotation>
				<xs:documentation>Fallback value to use for target types not
					explicitly represented
					in table. Omission of this value wil stop
					modelling if unrepresented target type
					is encountered - normally the
					correct behaviour
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="TargetSeaStateSetType">
		<xs:annotation>
			<xs:documentation>Maintenance object</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: Nil Editable: nil
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="TargetSeaStateDatum" type="TargetSeaStateDatumType"
				maxOccurs="unbounded" />
		</xs:sequence>
		<xs:attribute name="UnknownType" type="xs:float" use="optional">
			<xs:annotation>
				<xs:documentation>Fallback value to use for target types not
					explicitly represented
					in table. Omission of this value wil stop
					modelling if unrepresented target type
					is encountered - normally the
					correct behaviour
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="TargetAspectDatumType">
		<xs:annotation>
			<xs:documentation>Series of values of attribute at different aspects
			</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: Type Editable: nil
			</xs:documentation>
		</xs:annotation>
		<xs:attribute ref="Type" use="required" />
		<xs:attribute name="DeadAhead" type="xs:float" use="required" />
		<xs:attribute name="Bow" type="xs:float" use="required" />
		<xs:attribute name="Beam" type="xs:float" use="required" />
		<xs:attribute name="Quarter" type="xs:float" use="required" />
		<xs:attribute name="Astern" type="xs:float" use="required" />
	</xs:complexType>
	<xs:complexType name="TargetSeaStateDatumType">
		<xs:annotation>
			<xs:documentation>Series of values of attribute at different sea
				states
			</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: Type Editable: nil
			</xs:documentation>
		</xs:annotation>
		<xs:attribute ref="Type" use="required" />
		<xs:attribute name="SeaState_0" type="xs:float" use="required" />
		<xs:attribute name="SeaState_1" type="xs:float" use="required" />
		<xs:attribute name="SeaState_2" type="xs:float" use="required" />
		<xs:attribute name="SeaState_3" type="xs:float" use="required" />
		<xs:attribute name="SeaState_4" type="xs:float" use="required" />
		<xs:attribute name="SeaState_5" type="xs:float" use="required" />
		<xs:attribute name="SeaState_6" type="xs:float" use="required" />
		<xs:attribute name="SeaState_7" type="xs:float" use="optional" />
		<xs:attribute name="SeaState_8" type="xs:float" use="optional" />
		<xs:attribute name="SeaState_9" type="xs:float" use="optional" />
		<xs:attribute name="SeaState_10" type="xs:float" use="optional" />
	</xs:complexType>
	<!--Participants -->
	<!-- -->
	<xs:complexType name="ParticipantsType">
		<xs:annotation>
			<xs:documentation>The list of vessels/aircraft to be modelled in this
				scenario
			</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: # of participants
				Editable:
				nil
			</xs:documentation>
		</xs:annotation>
		<xs:choice minOccurs="0" maxOccurs="unbounded">
			<xs:element name="SSK" type="SSKType" minOccurs="0" />
			<xs:element name="Surface" type="SurfaceType" minOccurs="0" />
			<xs:element name="Helo" type="HeloType" minOccurs="0" />
			<xs:element name="FixedWing" type="FixedWingType"
				minOccurs="0" />
			<xs:element name="SSN" type="SSNType" minOccurs="0" />
			<xs:element name="BuoyField" type="BuoyFieldType"
				minOccurs="0" />
			<xs:element name="Buoy" type="BuoyType" minOccurs="0" />
			<xs:element name="Torpedo" type="TorpedoType" minOccurs="0" />
		</xs:choice>
	</xs:complexType>
	<xs:complexType name="ParticipantType" abstract="true">
		<xs:annotation>
			<xs:documentation>What type of participant this is</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: id, overview of
				all params.
				Editable: categories, name, some child elements according
				to their UI
				definition
			</xs:documentation>
		</xs:annotation>

		<xs:sequence>
			<xs:element name="Category" type="CategoryType">
				<xs:annotation>
					<xs:documentation>What type of participant this is
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="SensorFit" type="SensorFitType">
				<xs:annotation>
					<xs:documentation>The suite of sensors on this participant
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="Status" type="StatusType">
				<xs:annotation>
					<xs:documentation>The current status of this participant
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="DemandedStatus" type="DemandedStatusType"
				minOccurs="0">
				<xs:annotation>
					<xs:documentation>The current demanded status of this participant
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:choice>
				<xs:element name="Waterfall" type="WaterfallType"
					minOccurs="0">
					<xs:annotation>
						<xs:documentation>A hierarchy of behaviours, with control falling
							to lower
							behaviours when higher behaviours not applicable
						</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="Sequence" type="SequenceType"
					minOccurs="0">
					<xs:annotation>
						<xs:documentation>A sequence of behaviours, activated in order
						</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="Switch" type="SwitchType" minOccurs="0">
					<xs:annotation>
						<xs:documentation>A groups of behaviours, only one of which is
							active
						</xs:documentation>
					</xs:annotation>
				</xs:element>
			</xs:choice>
			<xs:element name="RadiatedCharacteristics" type="RadiatedCharacteristicsType"
				minOccurs="0" maxOccurs="unbounded">
				<xs:annotation>
					<xs:documentation>The types of radiated noise produced by this
						participant
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="SelfNoiseCharacteristics" type="SelfNoiseCharacteristicsType"
				minOccurs="0">
				<xs:annotation>
					<xs:documentation>What type of self-noise encountered by this
						participant
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="Movement" type="MovementType" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The movement model for this type of participant
					</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="Name" type="xs:token" use="required">
			<xs:annotation>
				<xs:documentation>The unique name for this participant
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="id" type="xs:int" use="optional">
			<xs:annotation>
				<xs:documentation>The unique id for this participant
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="isAlive" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Whether this participant should be 'alive' at the
					start of the scenario. Used
					in conjunction with DeferredBirth
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="MonteCarloTarget" type="xs:boolean"
			use="optional">
			<xs:annotation>
				<xs:documentation>Flag to indicate that this participant should be
					handled with
					special Monte Carlo processing
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="PaintDecisions" type="xs:boolean"
			use="optional">
			<xs:annotation>
				<xs:documentation>Flag to indicate that when shown graphically the
					viewer application should attempt to display any spatial
					decision-related data
					for this participant
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<!-- -->
	<!-- declare instances of the vessel types so we can create them externally -->
	<!-- -->
	<xs:element name="FixedWing" type="FixedWingType">
		<xs:annotation>
			<xs:documentation>instance of subject, declared to allow standalone
				instance of this
				object to be defined in file
			</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="Helo" type="HeloType">
		<xs:annotation>
			<xs:documentation>instance of subject, declared to allow standalone
				instance of this
				object to be defined in file
			</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="SSN" type="SSNType">
		<xs:annotation>
			<xs:documentation>instance of subject, declared to allow standalone
				instance of this
				object to be defined in file
			</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="SSK" type="SSKType">
		<xs:annotation>
			<xs:documentation>instance of subject, declared to allow standalone
				instance of this
				object to be defined in file
			</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="Torpedo" type="TorpedoType">
		<xs:annotation>
			<xs:documentation>instance of subject, declared to allow standalone
				instance of this
				object to be defined in file
			</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="Surface" type="SurfaceType">
		<xs:annotation>
			<xs:documentation>instance of subject, declared to allow standalone
				instance of this
				object to be defined in file
			</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="BuoyField" type="BuoyFieldType">
		<xs:annotation>
			<xs:documentation>instance of subject, declared to allow standalone
				instance of this
				object to be defined in file
			</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:complexType name="FixedWingType">
		<xs:annotation>
			<xs:documentation>Representation of a Fixed Wing aircraft
			</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: inherited
				Editable:
				inherited
			</xs:documentation>

		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="ParticipantType">
				<xs:sequence>
					<xs:element name="FixedWingMovementCharacteristics"
						type="FixedWingMovementCharacteristicsType">
						<xs:annotation>
							<xs:documentation>The movement characteristics of this
								participant
							</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="HeloType">
		<xs:annotation>
			<xs:documentation>Representation of a Helicopter</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: inherited
				Editable:
				inherited
			</xs:documentation>

		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="ParticipantType">
				<xs:sequence>
					<xs:element name="HeloMovementCharacteristics" type="HeloMovementCharacteristicsType">
						<xs:annotation>
							<xs:documentation>The movement characteristics of this
								participant
							</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="BuoyFieldType">
		<xs:annotation>
			<xs:documentation>Representation of a sonar buoy field
			</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: inherited
				Editable:
				inherited
			</xs:documentation>

		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="ParticipantType">
				<xs:sequence>
					<xs:element name="Coverage" type="WorldAreaType">
						<xs:annotation>
							<xs:documentation>The area covered by the buoy field
							</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="TimePeriod" type="TimePeriodType"
						minOccurs="0">
						<xs:annotation>
							<xs:documentation>The area covered by the buoy field
							</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="SSNType">
		<xs:annotation>
			<xs:documentation>Representation of a SSK</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: inherited
				Editable:
				inherited
			</xs:documentation>

		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="ParticipantType">
				<xs:sequence>
					<xs:element name="SSMovementCharacteristics" type="SSMovementCharacteristicsType" />
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="SSKType">
		<xs:annotation>
			<xs:documentation>Representation of a SSN</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: inherited
				Editable:
				inherited
			</xs:documentation>

		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="ParticipantType">
				<xs:sequence>
					<xs:element name="SSMovementCharacteristics" type="SSMovementCharacteristicsType">
						<xs:annotation>
							<xs:documentation>The movement characteristics of this
								participant
							</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
				<xs:attribute name="ChargeRate" type="xs:float" use="required">
					<xs:annotation>
						<xs:documentation>The rate at which the SSK is able to charge main
							batteries
							(percentage/second)
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="TorpedoType">
		<xs:annotation>
			<xs:documentation>Representation of a torpedo</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: inherited
				Editable:
				inherited
			</xs:documentation>

		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="ParticipantType">
				<xs:sequence>
					<xs:element name="SSMovementCharacteristics" type="SSMovementCharacteristicsType">
						<xs:annotation>
							<xs:documentation>The movement characteristics of this
								participant
							</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="BuoyType">
		<xs:annotation>
			<xs:documentation>Representation of a sonar buoy</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: inherited
				Editable:
				inherited
			</xs:documentation>

		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="ParticipantType">
				<xs:sequence>
					<xs:element name="SSMovementCharacteristics" type="SSMovementCharacteristicsType">
						<xs:annotation>
							<xs:documentation>The movement characteristics of this
								participant
							</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="SurfaceType">
		<xs:annotation>
			<xs:documentation>Representation of a Surface vessel
			</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: inherited
				Editable:
				inherited
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="ParticipantType">
				<xs:sequence>
					<xs:element name="SurfaceMovementCharacteristics" type="SurfaceMovementCharacteristicsType">
						<xs:annotation>
							<xs:documentation>The movement characteristics of this
								participant
							</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- -->
	<!--Radiated noise levels -->
	<!-- -->
	<xs:complexType name="SSKBroadbandType">
		<xs:annotation>
			<xs:documentation>Radiated noise for SSK, includes dived and snorting
				noise
				levels
			</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible:base, snort
				Editable: base,
				snort
			</xs:documentation>
		</xs:annotation>

		<xs:attribute name="BaseNoiseLevel" type="xs:float" use="required" />
		<xs:attribute name="SnortNoiseLevel" type="xs:float" use="required" />
	</xs:complexType>
	<xs:complexType name="OpticType">
		<xs:annotation>
			<xs:documentation>Size of subject</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible:xsect, height
				Editable:
				xsect
			</xs:documentation>
		</xs:annotation>

		<xs:sequence>
			<xs:element name="Height" type="WorldDistanceType" />
		</xs:sequence>
		<xs:attribute name="XSectArea" type="xs:float" use="required">
			<xs:annotation>
				<xs:documentation>Square metre-age of this target</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="BaseNoiseLevel" type="xs:float" use="optional">
			<xs:annotation>
				<xs:documentation>The base radiated noise level for this vehicle.
					The actual
					radiated noise level adds a speed-dependent factor onto
					this
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="BroadbandType">
		<xs:annotation>
			<xs:documentation>Broadband noise characteristics</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: noise level
				Editable: noise
				level
			</xs:documentation>
		</xs:annotation>
		<xs:attribute name="BaseNoiseLevel" type="xs:float" use="required">
			<xs:annotation>
				<xs:documentation>The base radiated noise level for this vehicle.
					The actual
					radiated noise level adds a speed-dependent factor onto
					this
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="NarrowbandType">
		<xs:annotation>
			<xs:documentation>Narrowband noise characteristics</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: noise level
				Editable: noise
				level
			</xs:documentation>
		</xs:annotation>
		<xs:attribute name="BaseNoiseLevel" type="xs:float" use="required">
			<xs:annotation>
				<xs:documentation>The base radiated noise level for this tonal
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="Frequency" type="xs:float" use="required">
			<xs:annotation>
				<xs:documentation>The radiated frequency for this tonal
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<!--layered chart data -->
	<!-- -->
	<xs:complexType name="DebriefLayerType">
		<xs:annotation>
			<xs:documentation>A freeform text layer layer containing Debrief
				objects
			</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: #chars in
				description Editable:
				nil
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:any processContents="skip" maxOccurs="unbounded" />
		</xs:sequence>
	</xs:complexType>
	<!-- -->
	<!--Utility types -->
	<!-- -->
	<xs:attribute name="Type">
		<xs:annotation>
			<xs:documentation>Vehicle categorisation</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: Type Editable:
				Type
			</xs:documentation>
		</xs:annotation>
		<xs:simpleType>
			<xs:restriction base="xs:NMTOKEN">
				<xs:enumeration value="SUBMARINE" />
				<xs:enumeration value="MINISUB" />
				<xs:enumeration value="TORPEDO" />
				<xs:enumeration value="CARRIER" />
				<xs:enumeration value="FRIGATE" />
				<xs:enumeration value="DESTROYER" />
				<xs:enumeration value="TROOP_CARRIER" />
				<xs:enumeration value="OILER" />
				<xs:enumeration value="FISHING_VESSEL" />
				<xs:enumeration value="HELICOPTER" />
				<xs:enumeration value="MPA" />
				<xs:enumeration value="AV_MISSILE" />
				<xs:enumeration value="BUOY_FIELD" />
				<xs:enumeration value="BUOY" />
			</xs:restriction>
		</xs:simpleType>
	</xs:attribute>
	<xs:complexType name="CategoryType">
		<xs:annotation>
			<xs:documentation>Triplet attribute description of this platform
			</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: Env, Force, Type
				Editable:
				combo boxes for Env, Force, Type
			</xs:documentation>
		</xs:annotation>
		<xs:attribute name="Environment" use="required">
			<xs:annotation>
				<xs:documentation>The environment in which this vehicle travels
				</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:NMTOKEN">
					<xs:enumeration value="SUBSURFACE">
						<xs:annotation>
							<xs:documentation>A subsurface vessel (submarine, torpedo, sonar
								buoy)
							</xs:documentation>
						</xs:annotation>
					</xs:enumeration>
					<xs:enumeration value="SURFACE">
						<xs:annotation>
							<xs:documentation>A surface vessel (ship)</xs:documentation>
						</xs:annotation>
					</xs:enumeration>
					<xs:enumeration value="AIRBORNE">
						<xs:annotation>
							<xs:documentation>An airborne vehicle (aircraft, helo, missile)
							</xs:documentation>
						</xs:annotation>
					</xs:enumeration>
					<xs:enumeration value="CROSS">
						<xs:annotation>
							<xs:documentation>A vehicle which travels across more than one
								environment (air-launched torpedo, subsurface to air missile)
							</xs:documentation>
						</xs:annotation>
					</xs:enumeration>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="Force" use="required">
			<xs:annotation>
				<xs:documentation>The Force which this vehicle belongs to: Blue=Own
					Forces,
					Red=Hostile, Green=Friendly
				</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:NMTOKEN">
					<xs:enumeration value="RED" />
					<xs:enumeration value="BLUE" />
					<xs:enumeration value="GREEN" />
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute ref="Type" use="required">
			<xs:annotation>
				<xs:documentation>The broad type of vehicle this is
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="LocationType">
		<xs:annotation>
			<xs:documentation>Location</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: location summary
				Editable:
				inherited
			</xs:documentation>
		</xs:annotation>
		<xs:choice>
			<xs:element name="shortLocation" type="shortLocationType" />
			<xs:element name="longLocation" type="longLocationType" />
			<xs:element name="relativeLocation" type="relativeLocationType" />
		</xs:choice>
	</xs:complexType>
	<xs:complexType name="DemandedStatusType">

		<xs:annotation>
			<xs:documentation>Demanded state</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: course. speed
				Editable: course.
				speed
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="Height" type="WorldDistanceType" />
			<xs:element name="Speed" type="SpeedType" />
		</xs:sequence>
		<xs:attribute name="Course" type="xs:float" use="required" />
		<xs:attribute name="Id" type="xs:string" default="0" />
		<xs:attribute name="Time" type="xs:dateTime" />
	</xs:complexType>
	<xs:complexType name="StatusType">

		<xs:annotation>
			<xs:documentation>Description of platform status</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: course, speed, id
				Editable:
				course, speed
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="Location" type="LocationType" />
			<xs:element name="Speed" type="SpeedType" />
		</xs:sequence>
		<xs:attribute name="Course" type="xs:float" use="required" />
		<xs:attribute name="Fuel" type="xs:float" use="required" />
		<xs:attribute name="Time" type="xs:dateTime" use="optional" />
		<xs:attribute name="Id" type="xs:int" default="0" />
	</xs:complexType>
	<xs:complexType name="TypeType">

		<xs:annotation>
			<xs:documentation>Attributes to describe platform</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: inherited, name
				Editable:
				inherited, name
			</xs:documentation>
		</xs:annotation>
		<xs:attribute name="Name" use="required">
			<xs:simpleType>
				<xs:restriction base="xs:NMTOKEN">
					<xs:enumeration value="SUBSURFACE" />
					<xs:enumeration value="SURFACE" />
					<xs:enumeration value="AIRBORNE" />
					<xs:enumeration value="CROSS" />
					<xs:enumeration value="RED" />
					<xs:enumeration value="BLUE" />
					<xs:enumeration value="GREEN" />
					<xs:enumeration value="SUBMARINE" />
					<xs:enumeration value="MINISUB" />
					<xs:enumeration value="CARRIER" />
					<xs:enumeration value="FRIGATE" />
					<xs:enumeration value="DESTROYER" />
					<xs:enumeration value="TROOP_CARRIER" />
					<xs:enumeration value="OILER" />
					<xs:enumeration value="FISHING_VESSEL" />
					<xs:enumeration value="HELICOPTER" />
					<xs:enumeration value="MPA" />
					<xs:enumeration value="AV_MISSILE" />
					<xs:enumeration value="TORPEDO" />
					<xs:enumeration value="BUOY_FIELD" />
					<xs:enumeration value="BUOY" />
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="WorldAreaType">

		<xs:annotation>
			<xs:documentation>Rectangle</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: inherited,
				TopLeft, BottomRight
				Editable: inherited
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="TopLeft" type="LocationType" />
			<xs:element name="BottomRight" type="LocationType" />
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="WorldPathType">

		<xs:annotation>
			<xs:documentation>Series of locations</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: inherited, # of
				locations
				Editable: inherited
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="Point" type="LocationType" maxOccurs="unbounded">
				<xs:annotation>
					<xs:documentation>A location which is part of the Path of points
					</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="longLocationType">

		<xs:annotation>
			<xs:documentation>Detailed description of location</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: inherited,
				calculated lat,
				calculated long Editable: inherited
			</xs:documentation>
		</xs:annotation>
		<xs:sequence minOccurs="0">
			<xs:element name="Height" type="WorldDistanceType">
				<xs:annotation>
					<xs:documentation>Height for this location (metres, optional)
					</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="LatDeg" type="xs:int" use="required" />
		<xs:attribute name="LatMin" type="xs:int" use="required" />
		<xs:attribute name="LatSec" type="xs:float" use="required" />
		<xs:attribute name="LatHem" use="required">
			<xs:simpleType>
				<xs:restriction base="xs:NMTOKEN">
					<xs:enumeration value="N" />
					<xs:enumeration value="S" />
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="LongDeg" type="xs:int" use="required" />
		<xs:attribute name="LongMin" type="xs:int" use="required" />
		<xs:attribute name="LongSec" type="xs:float" use="required" />
		<xs:attribute name="LongHem" use="required">
			<xs:simpleType>
				<xs:restriction base="xs:NMTOKEN">
					<xs:enumeration value="E" />
					<xs:enumeration value="W" />
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="shortLocationType">

		<xs:annotation>
			<xs:documentation>Brief description of location</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: inherited, lat,
				long, height
				Editable: inherited, lat, long
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="Height" type="WorldDistanceType"
				minOccurs="0">
				<xs:annotation>
					<xs:documentation>Height for this location (metres, optional)
					</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="Lat" type="xs:string" use="required">
			<xs:annotation>
				<xs:documentation>Latitude for this location (decimal degrees)
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="Long" type="xs:string" use="required">
			<xs:annotation>
				<xs:documentation>Longitude for this location (decimal degrees)
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="relativeLocationType">

		<xs:annotation>
			<xs:documentation>Relative distances to location</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: inherited, north,
				east, height
				Editable: inherited, north, east, height
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="North" type="WorldDistanceType">
				<xs:annotation>
					<xs:documentation>How far North this location is</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="East" type="WorldDistanceType">
				<xs:annotation>
					<xs:documentation>How far East this location is</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="Height" type="WorldDistanceType"
				minOccurs="0">
				<xs:annotation>
					<xs:documentation>Height for this location (metres, optional)
					</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="FormatHelperType">
		<xs:annotation>
			<xs:documentation>Debrief format helper</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: text
				Editable: text
			</xs:documentation>
		</xs:annotation>
		<xs:attribute name="Text" type="xs:string" use="required">
			<xs:annotation>
				<xs:documentation>Content of format helper
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>	
	<xs:complexType name="MovementCharacteristicsType">
		<xs:annotation>
			<xs:documentation>2d movement model</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: inherited
				Editable:
				inherited
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="MinSpeed" type="SpeedType" />
			<xs:element name="MaxSpeed" type="SpeedType" />
			<xs:element name="AccelerationRate" type="AccelerationType" />
			<xs:element name="DecelerationRate" type="AccelerationType" />
		</xs:sequence>
		<xs:attribute name="FuelUsageRate" type="xs:float" use="required">
			<xs:annotation>
				<xs:documentation>The rate at which fuel is used (units per knot per
					second)
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="Name" type="xs:string" use="required" />
	</xs:complexType>
	<xs:complexType name="SurfaceMovementCharacteristicsType">
		<xs:annotation>
			<xs:documentation>2d movement model</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: inherited
				Editable:
				inherited
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="MovementCharacteristicsType">
				<xs:sequence>
					<xs:element name="TurningCircle" type="WorldDistanceType" />
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="ThreeDimMovementCharacteristicsType">
		<xs:annotation>
			<xs:documentation>3d movement model</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: inherited
				Editable:
				inherited
			</xs:documentation>
		</xs:annotation>

		<xs:complexContent>
			<xs:extension base="MovementCharacteristicsType">
				<xs:sequence>
					<xs:element name="MinHeight" type="WorldDistanceType">
						<xs:annotation>
							<xs:documentation>The minimum (lowest) height achievable
							</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="MaxHeight" type="WorldDistanceType">
						<xs:annotation>
							<xs:documentation>The maximum (lowest) height achievable
							</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="DefaultClimbRate" type="SpeedType">
						<xs:annotation>
							<xs:documentation>The rate of change of height when climbing
							</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="DefaultDiveRate" type="SpeedType">
						<xs:annotation>
							<xs:documentation>The rate of change of height when diving
							</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="FixedWingMovementCharacteristicsType">
		<xs:annotation>
			<xs:documentation>Movement characteristics for a fixed wing aircraft
			</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: inherited.
				Editable: inherited
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="ThreeDimMovementCharacteristicsType">
				<xs:sequence>
					<xs:element name="DefaultClimbSpeed" type="SpeedType">
						<xs:annotation>
							<xs:documentation>The normal speed adopted when climbing
							</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="DefaultDiveSpeed" type="SpeedType">
						<xs:annotation>
							<xs:documentation>The normal speed adopted when diving
							</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
				<xs:attribute name="DefaultTurnRate" type="xs:float"
					use="required">
					<xs:annotation>
						<xs:documentation>The turn rate for this helo (degs per second)
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="HeloMovementCharacteristicsType">
		<xs:annotation>
			<xs:documentation>Helo movement model</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: inherited
				Editable:
				inherited
			</xs:documentation>
		</xs:annotation>

		<xs:complexContent>
			<xs:extension base="ThreeDimMovementCharacteristicsType">
				<xs:sequence>
					<xs:element name="DefaultClimbSpeed" type="SpeedType" />
					<xs:element name="DefaultDiveSpeed" type="SpeedType" />
				</xs:sequence>
				<xs:attribute name="DefaultTurnRate" type="xs:float"
					use="required">
					<xs:annotation>
						<xs:documentation>The turn rate for this helo (degs per second)
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="SSMovementCharacteristicsType">
		<xs:annotation>
			<xs:documentation>Submarine movement model</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: inherited, turn
				circle
				Editable: inherited
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="ThreeDimMovementCharacteristicsType">
				<xs:sequence>
					<xs:element name="TurningCircle" type="WorldDistanceType" />
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="TargetType">
		<xs:annotation>
			<xs:documentation>Collection of types of platform</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: list of types
				Editable:
				nil
			</xs:documentation>
		</xs:annotation>

		<xs:sequence>
			<xs:element name="TargetType" type="TargetTypeType" />
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="TargetTypeType">
		<xs:annotation>
			<xs:documentation>Collection of subject types</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: list of types
				Editable:
				nil
			</xs:documentation>
		</xs:annotation>

		<xs:sequence>
			<xs:element name="Type" type="TypeType" minOccurs="1"
				maxOccurs="unbounded" />
		</xs:sequence>
		<xs:attribute name="AND" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Whether we apply and AND or OR operation to this
					list of category
					types
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>

	</xs:complexType>
	<xs:complexType name="TypedRangeDatumType">
		<xs:annotation>
			<xs:documentation>Collection of doublets that include a list of types
				and their
				detection range
			</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: list of types
				Editable:
				nil
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="Type" type="TypeType" minOccurs="0"
				maxOccurs="unbounded" />
			<xs:element name="DetectionRange" minOccurs="1"
				type="WorldDistanceType" />
			<xs:element name="DetectionPeriod" minOccurs="0"
				type="DurationType">
				<xs:annotation>
					<xs:documentation>Indication of how long this target type must be
						held for, before reaching the specified detection level
					</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="MovementType" />
	<xs:complexType name="RadiatedCharacteristicsType">
		<xs:annotation>
			<xs:documentation>Platform radiated noise</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: names of types
				Editable:
				nil
			</xs:documentation>
		</xs:annotation>

		<xs:sequence>
			<xs:element name="Narrowband" type="NarrowbandType"
				minOccurs="0" />
			<xs:element name="Optic" type="OpticType" minOccurs="0" />
			<xs:element name="Broadband" type="BroadbandType"
				minOccurs="0" />
			<xs:element name="SSKBroadband" type="SSKBroadbandType"
				minOccurs="0" />
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="WatchType">
		<xs:annotation>
			<xs:documentation>Type of platform to test for</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: child type
				Editable: child
				type
			</xs:documentation>
		</xs:annotation>

		<xs:sequence>
			<xs:element name="TargetType" type="TargetTypeType" />
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="SelfNoiseCharacteristicsType">
		<xs:annotation>
			<xs:documentation>Platform interference levels</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: names of child
				types Editable:
				nil
			</xs:documentation>
		</xs:annotation>

		<xs:sequence>
			<xs:element name="Optic" type="OpticType" minOccurs="0" />
			<xs:element name="Broadband" type="BroadbandType"
				minOccurs="0" />
			<xs:element name="SSKBroadband" type="SSKBroadbandType"
				minOccurs="0" />
		</xs:sequence>
	</xs:complexType>
	<!-- -->
	<!--Data values -->
	<!-- -->
	<xs:complexType name="DurationType">
		<xs:annotation>
			<xs:documentation>Duration (time period)</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible:Value, Units
				Editable: Value,
				Units
			</xs:documentation>
		</xs:annotation>

		<xs:attribute name="Units" use="required">
			<xs:simpleType>
				<xs:restriction base="xs:NMTOKEN">
					<xs:enumeration value="millis" />
					<xs:enumeration value="seconds" />
					<xs:enumeration value="minutes" />
					<xs:enumeration value="hours" />
					<xs:enumeration value="days" />
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="Value" type="xs:float" use="required" />
	</xs:complexType>
	<xs:complexType name="TimePeriodType">
		<xs:annotation>
			<xs:documentation>Time period</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible:Start, End
				Editable: Start, End
			</xs:documentation>
		</xs:annotation>
		<xs:attribute name="Start" type="xs:dateTime" use="required">
			<xs:annotation>
				<xs:documentation>Start of this period (yyyy-mm-ddThh:mm:ss)
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="End" type="xs:dateTime" use="required">
			<xs:annotation>
				<xs:documentation>End of this period (yyyy-mm-ddThh:mm:ss)
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="SpeedType">
		<xs:annotation>
			<xs:documentation>Speed</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible:Value, Units
				Editable: Value,
				Units
			</xs:documentation>
		</xs:annotation>

		<xs:attribute name="Units" use="required">
			<xs:simpleType>
				<xs:restriction base="xs:token">
					<xs:enumeration value="m/s" />
					<xs:enumeration value="kts" />
					<xs:enumeration value="ft/s" />
					<xs:enumeration value="ft/min" />
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="Value" type="xs:float" use="required" />
	</xs:complexType>
	<xs:complexType name="AccelerationType">
		<xs:annotation>
			<xs:documentation>Acceleration</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: Value Editable:
				Units
			</xs:documentation>
		</xs:annotation>

		<xs:attribute name="Units" use="required">
			<xs:simpleType>
				<xs:restriction base="xs:token">
					<xs:enumeration value="m/s/s" />
					<xs:enumeration value="kt/s" />
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="Value" type="xs:float" use="required" />
	</xs:complexType>
	<xs:complexType name="WorldDistanceType">
		<xs:annotation>
			<xs:documentation>Distance</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: value, units
				Editable:value,
				units
			</xs:documentation>
		</xs:annotation>
		<xs:attribute name="Units" use="required">
			<xs:simpleType>
				<xs:restriction base="xs:NMTOKEN">
					<xs:enumeration value="ft" />
					<xs:enumeration value="m" />
					<xs:enumeration value="yds" />
					<xs:enumeration value="km" />
					<xs:enumeration value="nm" />
					<xs:enumeration value="degs" />
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="Value" type="xs:float" use="required" />
	</xs:complexType>
	<!-- -->
	<!--Behaviours -->
	<!-- -->
	<xs:element name="Waterfall" type="WaterfallType">
		<xs:annotation>
			<xs:documentation>Standalone instance of a waterfall behaviour
			</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="Switch" type="SwitchType">
		<xs:annotation>
			<xs:documentation>Standalone instance of a Switch behaviour
			</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: inherited, index.
				Editable:
				inherited, index
			</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="Sequence" type="SequenceType">
		<xs:annotation>
			<xs:documentation>Standalone instance of a Sequence behaviour
			</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: inherited, # of
				child
				behaviours. Editable: inherited
			</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:complexType name="DecisionModelType" abstract="true">
		<xs:annotation>
			<xs:documentation>Core description for a decision model
			</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: Name, IsActive.
				Editable: Name,
				IsActive
			</xs:documentation>
		</xs:annotation>
		<xs:attribute name="IsActive" type="xs:boolean" use="optional"
			default="true">
			<xs:annotation>
				<xs:documentation>Whether this decision model model is active
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="StayAlive" type="xs:boolean" use="optional"
			default="true">
			<xs:annotation>
				<xs:documentation>Whether this decision model stays alive on
					completion
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="Name" type="xs:string" use="required">
			<xs:annotation>
				<xs:documentation>The name of this particular instance of this
					decision
					model
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="WaterfallType">
		<xs:annotation>
			<xs:documentation>A sequence of behaviours, followed in order until
				one returns a valid
				value
			</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: inherited, # of
				child
				behaviours. Editable: inherited
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="DecisionModelType">
				<xs:sequence>
					<xs:choice minOccurs="0" maxOccurs="unbounded">
						<xs:element name="Transit" type="TransitType">
							<xs:annotation>
								<xs:documentation>To travel between a series of points
								</xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element name="WorkingTransit" type="WorkingTransitType">
							<xs:annotation>
								<xs:documentation>To travel between a series of points with
									regular
									interruptions to perform particular activity
								</xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element name="TransitWaypoint" type="TransitWaypointType">
							<xs:annotation>
								<xs:documentation>To travel between a series of points using a
									waypoint visiting pattern (such as On Top or Directed On Top)
								</xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element name="Trail" type="TrailType">
							<xs:annotation>
								<xs:documentation>To trail behind a target of the indicated type
								</xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element name="SternArcClearance" type="SternArcClearanceType">
							<xs:annotation>
								<xs:documentation>To perform a stern arc clearance
								</xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element name="SSKRecharge" type="SSKRechargeType">
							<xs:annotation>
								<xs:documentation>To recharge an SSK batteries via snorting
								</xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element name="Investigate" type="InvestigateType">
							<xs:annotation>
								<xs:documentation>Behaviour to go and investigate a series of
									compatible targets
								</xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element name="Intercept" type="InterceptType">
							<xs:annotation>
								<xs:documentation>Behaviour covering course changes to intercept
									moving target
								</xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element name="BearingTrail" type="BearingTrailType">
							<xs:annotation>
								<xs:documentation>Extension of the trail behaviour which allows
									specification of the bearing to be stationed relative to the
									target course
								</xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element name="RectangleWander" type="RectangleWanderType">
							<xs:annotation>
								<xs:documentation>Behaviour which represents a vehicle wandering
									within a rectangle - possibly specifying speed and height
									values
								</xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element name="Wander" type="WanderType">
							<xs:annotation>
								<xs:documentation>Behaviour which represents a vehicle wandering
									around an origin - possibly specifying speed and height values
								</xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element name="Evade" type="EvadeType">
							<xs:annotation>
								<xs:documentation>To turn away from a particular class of target
									when detected
								</xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element name="Detonate" type="DetonateType">
							<xs:annotation>
								<xs:documentation>Detonate ones-self, typically when one is a
									torpedo
								</xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element name="LaunchWeapon" type="LaunchWeaponType">
							<xs:annotation>
								<xs:documentation>Launch a new participant into the environment
									(typically a torpedo)
								</xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element name="LaunchSensor" type="LaunchSensorType">
							<xs:annotation>
								<xs:documentation>Drop a sonar buoy or similar outboard sensor
								</xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element name="UserControl" type="UserControlType">
							<xs:annotation>
								<xs:documentation>The course, speed and depth of this target is
									controlled by the user (typically via some GUI interface)
								</xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element name="Terminate" type="TerminateType">
							<xs:annotation>
								<xs:documentation>Suspend the simulation (typically found at the
									end of a sequence)
								</xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element name="Composite" type="CompositeType">
							<xs:annotation>
								<xs:documentation>This architectural behaviour contains a
									combination of condition and response
								</xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element name="Move" type="MoveType">
							<xs:annotation>
								<xs:documentation>Relocate to the indicated position
								</xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element name="CircularDatumSearch" type="CircularDatumSearchType">
							<xs:annotation>
								<xs:documentation>On detection of a particular target type, drop
									a
									circular buoy pattern and prosecute any applicable target
								</xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element name="NewState" type="NewStateType">
							<xs:annotation>
								<xs:documentation>Trigger transition to a new vessel state
								</xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element name="MarkDip" type="MarkDipType">
							<xs:annotation>
								<xs:documentation>Lower a dipping sensor into the water
								</xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element name="RaiseBody" type="RaiseBodyType">
							<xs:annotation>
								<xs:documentation>Request that a dipping sonar be retracted
								</xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element name="SawSearch" type="SawSearchType">
							<xs:annotation>
								<xs:documentation>Sawtooth search pattern</xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element name="LadderSearch" type="LadderSearchType">
							<xs:annotation>
								<xs:documentation>Ladder search (also called a creeping line
									ahead)
								</xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element name="LadderSearch2" type="LadderSearch2Type">
							<xs:annotation>
								<xs:documentation>Fresh implementation of Ladder search (also
									called a creeping line
									ahead)
								</xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element name="InwardSpiralSearch" type="InwardSpiralSearchType">
							<xs:annotation>
								<xs:documentation>Inward spiral search</xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element name="OutwardSpiralSearch" type="OutwardSpiralSearchType">
							<xs:annotation>
								<xs:documentation>Outward spiral search</xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element name="ExpandingSquareSearch" type="ExpandingSquareSearchType">
							<xs:annotation>
								<xs:documentation>Experimental behaviour representing conducting
									a
									search around a particular location (probably datum)
								</xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element name="Waterfall" type="WaterfallType">
							<xs:annotation>
								<xs:documentation>Prioritised sequence of behaviours
								</xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element name="Sequence" type="SequenceType">
							<xs:annotation>
								<xs:documentation>A collection of behaviours to be implemented
									in
									sequence - when one returns a "null" to indicate processing
									complete then the next is called
								</xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element name="Switch" type="SwitchType">
							<xs:annotation>
								<xs:documentation>Contains multiple waterfalls of behaviour -
									only
									one of which is active. The active behaviour is determined
									by
									the index attribute
								</xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element name="Wait" type="WaitType">
							<xs:annotation>
								<xs:documentation>Insert a pause, maintaining current
									course/speed
								</xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element name="DeferredBirth" type="DeferredBirthType">
							<xs:annotation>
								<xs:documentation>Insert a pause, maintaining current
									course/speed
								</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:choice>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="SequenceType">
		<xs:annotation>
			<xs:documentation>A collection of behaviours to be implemented in
				sequence - when one
				returns a "null" to indicate processing complete
				then the next is
				called
			</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: inherited, # of
				child
				behaviours. Editable: inherited
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="WaterfallType" />
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="RectangleWanderType">
		<xs:annotation>
			<xs:documentation>Behaviour which represents a vehicle wandering
				within a rectangle -
				possibly specifying speed and height values
			</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: inherited, speed.
				Editable:
				inherited, speed
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="DecisionModelType">
				<xs:sequence>
					<xs:element name="Area" type="WorldAreaType" />
					<xs:element name="Speed" type="SpeedType" />
					<xs:element name="Height" type="WorldDistanceType" />
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="WanderType">

		<xs:annotation>
			<xs:documentation>Behaviour which represents a vehicle wandering
				around an origin -
				possibly specifying speed and height values
			</xs:documentation>
			<xs:documentation>Vsiible: inherited, range, speed, height. Editable:
				inherited,
				range
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="DecisionModelType">
				<xs:sequence>
					<xs:element name="Range" type="WorldDistanceType" />
					<xs:element name="Location" type="LocationType" />
					<xs:element name="Speed" type="SpeedType" />
					<xs:element name="Height" type="WorldDistanceType" />
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="EvadeType">
		<xs:annotation>
			<xs:documentation>Flee targets of specified type</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: inherited,
				duration, target
				type Editable: inherited, duration
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="DecisionModelType">
				<xs:sequence>
					<xs:element name="Duration" type="DurationType">
						<xs:annotation>
							<xs:documentation>How long we flee for</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="FleeHeight" type="WorldDistanceType">
						<xs:annotation>
							<xs:documentation>The height (depth) which we will move to whilst
								fleeing
							</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="FleeSpeed" type="SpeedType" />
					<xs:element name="TargetType" type="TargetTypeType" />
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="TerminateType">
		<xs:annotation>
			<xs:documentation>Terminate current simulation</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: inherited
				Editable: course, speed, depth
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="DecisionModelType">
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="UserControlType">
		<xs:annotation>
			<xs:documentation>User control of platform</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: inherited, course,
				speed, depth
				Editable: inherited, course, speed, depth
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="DecisionModelType">
				<xs:attribute name="Course" type="xs:float" use="required" />
				<xs:attribute name="Speed" type="xs:float" use="required" />
				<xs:attribute name="Depth" type="xs:float" use="required" />
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="DetectionForPeriodType">
		<xs:annotation>
			<xs:documentation>Loiter in an area for a time period, even after
				contact
				lost
			</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: inherited,
				continue monitoring,
				duration Editable: inherited, duration, continue
				monitoring
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="DecisionModelType">
				<xs:sequence>
					<xs:element name="WorldDistance" type="WorldDistanceType"
						minOccurs="0" />
					<xs:element name="TargetType" type="TargetTypeType" />
					<xs:element name="Duration" type="DurationType"
						minOccurs="0" />
				</xs:sequence>
				<xs:attribute name="ContinueMonitoring" type="xs:boolean"
					use="required" />
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="CircularDatumSearchType">
		<xs:annotation>
			<xs:documentation>Conduct a circluar search</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: inherited, world
				distance,
				target type Editable: inherited, world distance
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="DecisionModelType">
				<xs:sequence>
					<xs:element name="WorldDistance" type="WorldDistanceType" />
					<xs:element name="TargetType" type="TargetTypeType" />
				</xs:sequence>
				<xs:attribute name="LaunchWeaponType" type="xs:string"
					use="required" />
				<xs:attribute name="LaunchWeaponFileName" type="xs:string"
					use="required" />
				<xs:attribute name="LaunchBuoyType" type="xs:string"
					use="required" />
				<xs:attribute name="LaunchBuoyFileName" type="xs:string"
					use="required" />
				<xs:attribute name="NumBuoys" type="xs:integer" use="required" />
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="SwitchType">
		<xs:annotation>
			<xs:documentation>Behavious which contains a series of child
				behaviours - only one of
				which is active. This particular behaviour
				lends itself to Monte Carlo modelling
				where a participant can have
				one of a series of behaviours - with the Monte Carlo
				variance merely
				indicating which one to use
			</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: inherited, index,
				# waterfall
				entries. Editable: inherited, index
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="DecisionModelType">
				<xs:sequence minOccurs="0" maxOccurs="unbounded">
					<xs:element name="Waterfall" type="WaterfallType" />
				</xs:sequence>
				<xs:attribute name="Index" type="xs:integer" use="required">
					<xs:annotation>
						<xs:documentation>The index number of the active behaviour
							(starting with
							1)
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="CompositeType">
		<xs:annotation>
			<xs:documentation>Condition/response behaviour construct
			</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: inherited,
				condition name,
				response name Editable: inherited
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="DecisionModelType">
				<xs:sequence>
					<xs:choice minOccurs="0" maxOccurs="1">
						<xs:element name="Detection" type="DetectionType" />
						<xs:element name="DetectionForPeriod" type="DetectionForPeriodType" />
						<xs:element name="ElapsedTime" type="ElapsedTimeType" />
					</xs:choice>
					<xs:choice minOccurs="0" maxOccurs="1">
						<xs:element name="ManoeuvreToLocation" type="ManoeuvreToLocationType" />
						<xs:element name="ManoeuvreToCourse" type="ManoeuvreToCourseType" />
						<xs:element name="ChangeSensorLineUp" type="ChangeSensorLineUpType" />
					</xs:choice>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="DetectionType">
		<xs:annotation>
			<xs:documentation>Condition that a detection must be made
			</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: inherited,
				distance, target
				type Editable: inherited
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="DecisionModelType">
				<xs:sequence>
					<xs:element name="WorldDistance" type="WorldDistanceType"
						minOccurs="0" />
					<xs:element name="TargetType" type="TargetTypeType" />
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="ElapsedTimeType">
		<xs:annotation>
			<xs:documentation>Stop the behaviour after the specified period (zero
				period to just fire once)
			</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: inherited,
				duration Editable:
				inherited, duration
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="DecisionModelType">
				<xs:sequence>
					<xs:element name="Duration" type="DurationType" />
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="DetonateType">
		<xs:annotation>
			<xs:documentation>Trigger a weapon detonation</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: inherited, power,
				target type
				Editable: inherited
			</xs:documentation>
		</xs:annotation>

		<xs:complexContent>
			<xs:extension base="DecisionModelType">
				<xs:sequence>
					<xs:element name="WorldDistance" type="WorldDistanceType" />
					<xs:element name="TargetType" type="TargetTypeType" />
				</xs:sequence>
				<xs:attribute name="DetonationPower" type="xs:float"
					use="required" />
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="LaunchSensorType">
		<xs:annotation>
			<xs:documentation>Launch the indicated sensor</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: inherited, sensor
				type
				Editable: inherited
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="DecisionModelType">
				<xs:sequence>
					<xs:element name="Height" type="WorldDistanceType" />
				</xs:sequence>
				<xs:attribute name="SensorType" use="required">
					<xs:simpleType>
						<xs:restriction base="xs:NMTOKEN">
							<xs:enumeration value="BB_PASSIVE" />
							<xs:enumeration value="BB_ACTIVE" />
							<xs:enumeration value="NB_PASSIVE" />
							<xs:enumeration value="NB_ACTIVE" />
						</xs:restriction>
					</xs:simpleType>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="LaunchWeaponType">
		<xs:annotation>
			<xs:documentation>Load the indicated file, launch participant
			</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: inherited, launch
				type, launch
				file name. Editable: inherited
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="DecisionModelType">
				<xs:sequence>
					<xs:element name="CoolOffTime" type="DurationType" />
					<xs:element name="WorldDistance" type="WorldDistanceType" />
					<xs:element name="TargetType" type="TargetTypeType" />
				</xs:sequence>
				<xs:attribute name="LaunchType" type="xs:string" />
				<xs:attribute name="LaunchTypeFileName" type="xs:string" />
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="ManoeuvreToCourseType">
		<xs:annotation>
			<xs:documentation>Conduct a course/speed change</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: inherited,
				relative speed,
				speed, relative course, course Editable: inherited,
				relative speed, speed, relative
				course, course
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="DecisionModelType">
				<xs:sequence>
					<xs:element name="Speed" type="SpeedType" minOccurs="0">
						<xs:annotation>
							<xs:documentation>The speed change to make (abs or rel)
							</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="Height" type="WorldDistanceType"
						minOccurs="0">
						<xs:annotation>
							<xs:documentation>The new height to adopt</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
				<xs:attribute name="RelativeSpeed" type="xs:boolean">
					<xs:annotation>
						<xs:documentation>Whether to make a relative rather than absolute
							speed
							change
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="Course" type="xs:float" />
				<xs:attribute name="RelativeCourse" type="xs:boolean">
					<xs:annotation>
						<xs:documentation>Whether to turn to a relative rather than
							absolute
							course
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="InvestigateType">
		<xs:annotation>
			<xs:documentation>Behaviour to go and investigate a series of
				compatible
				targets
			</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: inherited, target
				type,
				detection level. Editable: inherited, detection level combo
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="DecisionModelType">
				<xs:sequence>
					<xs:element name="TargetType" type="TargetTypeType"
						minOccurs="1" maxOccurs="1">
						<xs:annotation>
							<xs:documentation>The type of target to investigate
							</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="WatchType" type="TargetTypeType"
						minOccurs="0" maxOccurs="1">
						<xs:annotation>
							<xs:documentation>The type of platform we're defending
								(investigate targets nearest
								to the first matching platform of
								this type)
							</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="Height" type="WorldDistanceType"
						minOccurs="0">
						<xs:annotation>
							<xs:documentation>The height at which to conduct investigation
							</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
				<xs:attribute name="DetectionLevel" type="DetectionLevelType"
					use="required">
					<xs:annotation>
						<xs:documentation>The level of classification to achieve for each
							target
							before moving onto the next
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="CollaborativeSearch" type="xs:boolean"
					use="optional">
					<xs:annotation>
						<xs:documentation>Whether platforms conduct collaborative search,
							only trying to ID a target if it hasn't already been done by one
							in the scenario
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="TrailType">
		<xs:annotation>
			<xs:documentation>Following compliant targets</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: inherited, range,
				target type
				Editable: inherited, range
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="DecisionModelType">
				<xs:sequence>
					<xs:element name="TrailRange" type="WorldDistanceType" />
					<xs:element name="AllowableError" type="WorldDistanceType" />
					<xs:element name="TargetType" type="TargetTypeType" />
					<xs:element name="Height" type="WorldDistanceType"
						minOccurs="0" />
				</xs:sequence>
				<xs:attribute name="AllowSpeedChange" type="xs:boolean"
					use="optional">
					<xs:annotation>
						<xs:documentation>Whether to allow the trailing platform to modify
							it's speed
							to maintain the optimal trail distance
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>

			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="BearingTrailType">
		<xs:annotation>
			<xs:documentation>Extension of the trail behaviour which allows
				specification of the
				bearing to be stationed at related to the target
				course
			</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: inherited, range,
				target type.
				Editable: inherited, range, target type
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="TrailType">
				<xs:attribute name="TrailBearing" type="xs:float" use="required" />
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="InterceptType">
		<xs:annotation>
			<xs:documentation>Behaviour covering course changes to intercept
				moving
				target
			</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: inherited, Target
				type.
				Editable: inherited, target type
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="DecisionModelType">
				<xs:sequence>
					<xs:element name="TargetType" type="TargetTypeType">
						<xs:annotation>
							<xs:documentation>The type of target to intercept
							</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
				<xs:attribute name="AllowSpeedchange" type="xs:boolean"
					use="required">
					<xs:annotation>
						<xs:documentation>Whether we can request speed change (to max
							speed) in
							order to intercept target
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="ChangeSensorLineUpType">
		<xs:annotation>
			<xs:documentation>Change sensor status</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: inherited, medium,
				switch on.
				Editable: inherited, , combo of mediums, switch on
			</xs:documentation>
		</xs:annotation>
		<xs:attribute name="Name" type="xs:string" use="required" />
		<xs:attribute name="Medium" use="required">
			<xs:simpleType>
				<xs:restriction base="xs:NMTOKEN">
					<xs:enumeration value="PassiveBB" />
					<xs:enumeration value="Narrowband" />
					<xs:enumeration value="Visual" />
					<xs:enumeration value="Radar" />
					<xs:enumeration value="Magnetic" />
					<xs:enumeration value="ActiveBB" />
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="SwitchOn" type="xs:boolean" use="required" />
	</xs:complexType>
	<xs:complexType name="ManoeuvreToLocationType">
		<xs:annotation>
			<xs:documentation>Move somewhere</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: inherited, speed.
				Editable:
				inherited, speed
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="DecisionModelType">
				<xs:sequence>
					<xs:element name="Location" type="LocationType" />
					<xs:element name="Speed" type="SpeedType" minOccurs="0">
						<xs:annotation>
							<xs:documentation>The speed to travel at</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="MoveType">
		<xs:annotation>
			<xs:documentation>Move to somewhere</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: inherited, course,
				speed,
				hieght Editable: inherited, course, speed
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="DecisionModelType">
				<xs:sequence>
					<xs:element name="Speed" type="SpeedType" minOccurs="0" />
					<xs:element name="Height" type="WorldDistanceType"
						minOccurs="0" />
					<xs:element name="Vector" type="WorldDistanceType"
						minOccurs="0">
						<xs:annotation>
							<xs:documentation>The vector to move by (or null to just get the
								vessel
								onto the demanded course and speed)
							</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
				<xs:attribute name="Course" type="xs:float" use="optional" />
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="SternArcClearanceType">
		<xs:annotation>
			<xs:documentation>Conduct stern arc clearance</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: inherited,
				frequency. Editable:
				inherited
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="DecisionModelType">
				<xs:sequence>
					<xs:element name="Frequency" type="DurationType"
						minOccurs="0">
						<xs:annotation>
							<xs:documentation>To perform a series of Stern Arc Clearances
								enter a
								frequency at which they should be performed. The
								RandomClearances
								parameter will add a degree of randomness to the
								actual frequency.
								Omitting the Frequency will cause just a single
								stern arc clearance
								performed as soon as requested by controlling
								behaviour
							</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
				<xs:attribute name="RandomClearances" type="xs:boolean"
					use="optional">
					<xs:annotation>
						<xs:documentation>Whether to apply randomness to the frequency
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="Style" use="required">
					<xs:annotation>
						<xs:documentation>The type of Stern Arc Clearance manoeuvre to
							conduct
						</xs:documentation>
					</xs:annotation>
					<xs:simpleType>
						<xs:restriction base="xs:NMTOKEN">
							<xs:enumeration value="SingleLeg" />
							<xs:enumeration value="DoubleLeg" />
						</xs:restriction>
					</xs:simpleType>
				</xs:attribute>
				<xs:attribute name="CourseChange" type="xs:double" use="required">
					<xs:annotation>
						<xs:documentation>The desired course change</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="SSKRechargeType">
		<xs:annotation>
			<xs:documentation>Recharge batteries</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: inherited, min,
				max Editable:
				inherited, min, max
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="DecisionModelType">
				<xs:sequence>
					<xs:element name="EvadeThese" type="TargetTypeType" />
					<xs:element name="SnortSpeed" type="SpeedType" />
				</xs:sequence>
				<xs:attribute name="MinLevel" type="xs:float" use="required" />
				<xs:attribute name="SafeLevel" type="xs:float" use="required" />
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="TransitType">
		<xs:annotation>
			<xs:documentation>Travel along a route</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: inherited, path
				length, speed
				Editable: inherited, speed
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="DecisionModelType">
				<xs:sequence>
					<xs:element name="WorldPath" type="WorldPathType" />
					<xs:element name="Speed" type="SpeedType">
						<xs:annotation>
							<xs:documentation>The speed to transit at (kts)
							</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
				<xs:attribute name="Destination" type="xs:integer" use="optional">
					<xs:annotation>
						<xs:documentation>Which destination we are heading for
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="Looping" type="xs:boolean" use="required">
					<xs:annotation>
						<xs:documentation>Whether we transit through this route of points
							again on
							completion
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="Reverse" type="xs:boolean" use="optional">
					<xs:annotation>
						<xs:documentation>If we do want to loop through these points
							again, this
							flag indicates if the successive runs should travel
							through the points
							in the reverse order to the last.
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="WorkingTransitType">
		<xs:annotation>
			<xs:documentation>Conduct a transit, performing activity along way
			</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: inherited, num
				stops, activity
				name Editable: inherited, num stops
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="TransitType">
				<xs:sequence>
					<xs:element name="Activity" type="SequenceType">
						<xs:annotation>
							<xs:documentation>The activity repeatedly performed during the
								transit
							</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
				<xs:attribute name="NumStops" type="xs:int" use="required">
					<xs:annotation>
						<xs:documentation>The number of time we conduct the activity
							during the
							transit
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="TransitWaypointType">
		<xs:annotation>
			<xs:documentation>Conduct a transit</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: inherited, type
				Editable:
				inherited, type
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="TransitType">
				<xs:sequence />
				<xs:attribute name="Visitor" use="required">
					<xs:annotation>
						<xs:documentation>The strategy we want to use to travel through
							the path of
							points, as described in http://b.html for your
							interest.
						</xs:documentation>
					</xs:annotation>
					<xs:simpleType>
						<xs:restriction base="xs:NMTOKEN">
							<xs:enumeration value="OnTop" />
							<xs:enumeration value="DirectedOnTop" />
							<xs:enumeration value="MakeWaypoint" />
						</xs:restriction>
					</xs:simpleType>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="LadderSearchType">
		<xs:annotation>
			<xs:documentation>Conduct ladder search</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: inherited, search
				speed
				Editable: inherited
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="DecisionModelType">
				<xs:sequence>
					<xs:element name="StartPoint" type="LocationType">
						<xs:annotation>
							<xs:documentation>The start point for the search
							</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="TrackSpacing" type="WorldDistanceType">
						<xs:annotation>
							<xs:documentation>The "width" of the ladder we follow
							</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="LegLength" type="WorldDistanceType">
						<xs:annotation>
							<xs:documentation>The "depth" of each stretch in the direction of
								travel
							</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="SearchHeight" type="WorldDistanceType"
						minOccurs="0">
						<xs:annotation>
							<xs:documentation>The (optional) height to search at
							</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="SearchSpeed" type="SpeedType"
						minOccurs="0">
						<xs:annotation>
							<xs:documentation>The (optional) speed to search at
							</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
				<xs:attribute name="LadderAxis" type="xs:double" use="required">
					<xs:annotation>
						<xs:documentation>The direction the ladder is pointing
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="MaxNumLegs" type="xs:integer" use="optional">
					<xs:annotation>
						<xs:documentation>The number of legs to travel along. A leg is
							defined as
							one section along the axis followed by a second section
							across the
							ladder axis
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="LadderSearch2Type">
		<xs:annotation>
			<xs:documentation>Conduct updated ladder search</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: inherited, search
				speed
				Editable: inherited
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="DecisionModelType">
				<xs:sequence>
					<xs:element name="StartPoint" type="LocationType"
						minOccurs="0">
						<xs:annotation>
							<xs:documentation>The start point for the search. Omit to use
								current vehicle location
							</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="TrackSpacing" type="WorldDistanceType"
						minOccurs="1">
						<xs:annotation>
							<xs:documentation>The gap between the rungs of our ladder
							</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="Width" type="WorldDistanceType"
						minOccurs="1">
						<xs:annotation>
							<xs:documentation>The width of the area to be covered
							</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="Height" type="WorldDistanceType"
						minOccurs="1">
						<xs:annotation>
							<xs:documentation>The height of the area to be covered
							</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="SearchHeight" type="WorldDistanceType"
						minOccurs="0">
						<xs:annotation>
							<xs:documentation>The (optional) height to search at
							</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="SearchSpeed" type="SpeedType"
						minOccurs="0">
						<xs:annotation>
							<xs:documentation>The (optional) speed to search at
							</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="SawSearchType">
		<xs:annotation>
			<xs:documentation>Conduct saw search</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: inherited, search
				speed
				Editable: inherited
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="DecisionModelType">
				<xs:sequence>
					<xs:element name="StartPoint" type="LocationType"
						minOccurs="0">
						<xs:annotation>
							<xs:documentation>The start point for the search. Omit to use
								current vehicle location
							</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="TrackSpacing" type="WorldDistanceType"
						minOccurs="1">
						<xs:annotation>
							<xs:documentation>The gap between the rungs of our ladder
							</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="Width" type="WorldDistanceType"
						minOccurs="1">
						<xs:annotation>
							<xs:documentation>The width of the area to be covered
							</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="Height" type="WorldDistanceType"
						minOccurs="1">
						<xs:annotation>
							<xs:documentation>The height of the area to be covered
							</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="SearchHeight" type="WorldDistanceType"
						minOccurs="0">
						<xs:annotation>
							<xs:documentation>The (optional) height to search at
							</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="SearchSpeed" type="SpeedType"
						minOccurs="0">
						<xs:annotation>
							<xs:documentation>The (optional) speed to search at
							</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="InwardSpiralSearchType">
		<xs:annotation>
			<xs:documentation>Conduct inward spiral search</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: inherited, search
				speed
				Editable: inherited
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="DecisionModelType">
				<xs:sequence>
					<xs:element name="StartPoint" type="LocationType"
						minOccurs="0">
						<xs:annotation>
							<xs:documentation>The start point for the search. Omit to use
								current vehicle location
							</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="TrackSpacing" type="WorldDistanceType"
						minOccurs="1">
						<xs:annotation>
							<xs:documentation>The gap between the rungs of our ladder
							</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="Width" type="WorldDistanceType"
						minOccurs="1">
						<xs:annotation>
							<xs:documentation>The width of the area to be covered
							</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="Height" type="WorldDistanceType"
						minOccurs="1">
						<xs:annotation>
							<xs:documentation>The height of the area to be covered
							</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="SearchHeight" type="WorldDistanceType"
						minOccurs="0">
						<xs:annotation>
							<xs:documentation>The (optional) height to search at
							</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="SearchSpeed" type="SpeedType"
						minOccurs="0">
						<xs:annotation>
							<xs:documentation>The (optional) speed to search at
							</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="OutwardSpiralSearchType">
		<xs:annotation>
			<xs:documentation>Conduct outward spiral search</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: inherited, search
				speed
				Editable: inherited
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="DecisionModelType">
				<xs:sequence>
					<xs:element name="StartPoint" type="LocationType"
						minOccurs="0">
						<xs:annotation>
							<xs:documentation>The start point for the search. Omit to use
								current vehicle location
							</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="TrackSpacing" type="WorldDistanceType"
						minOccurs="1">
						<xs:annotation>
							<xs:documentation>The gap between the rungs of our ladder
							</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="Width" type="WorldDistanceType"
						minOccurs="1">
						<xs:annotation>
							<xs:documentation>The width of the area to be covered
							</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="Height" type="WorldDistanceType"
						minOccurs="1">
						<xs:annotation>
							<xs:documentation>The height of the area to be covered
							</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="SearchHeight" type="WorldDistanceType"
						minOccurs="0">
						<xs:annotation>
							<xs:documentation>The (optional) height to search at
							</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="SearchSpeed" type="SpeedType"
						minOccurs="0">
						<xs:annotation>
							<xs:documentation>The (optional) speed to search at
							</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="ExpandingSquareSearchType">
		<xs:annotation>
			<xs:documentation>Conduct an expanding square search
			</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: inherited, max num
				legs
				Editable: inherited, max num legs
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="DecisionModelType">
				<xs:sequence>
					<xs:element name="StartPoint" type="LocationType" />
					<xs:element name="TrackSpacing" type="WorldDistanceType" />
				</xs:sequence>
				<xs:attribute name="InitialTrack" type="xs:double" use="required" />
				<xs:attribute name="Clockwise" type="xs:boolean" use="required" />
				<xs:attribute name="MaxNumLegs" type="xs:integer" use="optional" />
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="NewStateType">
		<xs:annotation>
			<xs:documentation>Switch platform to alternate state
			</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: inherited, new
				state Editable:
				inherited, new state
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="DecisionModelType">
				<xs:attribute name="RequestedState" use="required">
					<xs:simpleType>
						<xs:restriction base="xs:NMTOKEN">
							<xs:enumeration value="ADS_DEPLOYED" />
							<xs:enumeration value="ADS_HOUSED" />
							<xs:enumeration value="IN_HOVER" />
						</xs:restriction>
					</xs:simpleType>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="MarkDipType">
		<xs:annotation>
			<xs:documentation>Start mark dip behaviour</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: inherited, depth
				Editable:
				inherited, depth
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="DecisionModelType">
				<xs:sequence>
					<xs:element name="BodyDepth" type="WorldDistanceType">
						<xs:annotation>
							<xs:documentation>The depth at which we want the buoy deployed
							</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="WaitType">
		<xs:annotation>
			<xs:documentation>Insert a pause, maintaining current course/speed
			</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: inherited
				Editable:
				inherited
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="DecisionModelType">
				<xs:sequence>
					<xs:element name="Duration" type="DurationType" />
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="DeferredBirthType">
		<xs:annotation>
			<xs:documentation>Defer starting the participant
			</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: inherited
				Editable:
				inherited
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="DecisionModelType">
				<xs:sequence>
					<xs:element name="Duration" type="DurationType" />
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="RaiseBodyType">
		<xs:annotation>
			<xs:documentation>Raise the dipping sensor</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: inherited
				Editable:
				inherited
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="DecisionModelType" />
		</xs:complexContent>
	</xs:complexType>
	<!-- -->
	<!--Scenario observers -->
	<!-- -->
	<!-- <xs:complexContent> <xs:extension base="DecisionModelType"> <xs:sequence> 
		</xs:sequence> </xs:extension> </xs:complexContent> -->
	<xs:complexType name="CoreObserverType" abstract="true">
		<xs:annotation>
			<xs:documentation>Core observer functionality</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: name, active
				Editable: name,
				active
			</xs:documentation>
		</xs:annotation>

		<xs:attribute name="Name" type="xs:token" use="required" />
		<xs:attribute name="Active" type="xs:boolean" use="required" />
	</xs:complexType>
	<xs:complexType name="BatchCollatorType">
		<xs:annotation>
			<xs:documentation>Structure used to define an Inter-Scenario
				observer; one that records
				performance across a series of scenario
				runs
			</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: Active, Percase,
				OnlyBatchReporting, filename. Editable: Active, Percase,
				OnlyBatchReporting,
				filename
			</xs:documentation>
		</xs:annotation>
		<xs:attribute name="Active" type="xs:boolean" use="required">
			<xs:annotation>
				<xs:documentation>Whether this collator is active</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="PerCase" type="xs:boolean" use="required">
			<xs:annotation>
				<xs:documentation>Whether to collate the results on a per-case basis
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="OnlyBatchReporting" type="xs:boolean"
			use="required">
			<xs:annotation>
				<xs:documentation>Whether to override (cancel) reporting scenario
					performance for
					each run
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="file_name" type="xs:string" use="optional">
			<xs:annotation>
				<xs:documentation>The filename to use for the results plot (or omit
					to have
					auto-generated filename)
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="CollationMethod" use="required">
			<xs:simpleType>
				<xs:annotation>
					<xs:documentation>How to statistically process the results stored
					</xs:documentation>
				</xs:annotation>
				<xs:restriction base="xs:NMTOKEN">
					<xs:enumeration value="COUNT">
						<xs:annotation>
							<xs:documentation>Count the number of results returned
							</xs:documentation>
						</xs:annotation>
					</xs:enumeration>
					<xs:enumeration value="AVERAGE">
						<xs:annotation>
							<xs:documentation>Calculate the average (mean) of numerical
								results
								returned
							</xs:documentation>
						</xs:annotation>
					</xs:enumeration>
					<xs:enumeration value="LIST">
						<xs:annotation>
							<xs:documentation>Return a list of results returned
							</xs:documentation>
						</xs:annotation>
					</xs:enumeration>
					<xs:enumeration value="ITEMIZED_LIST">
						<xs:annotation>
							<xs:documentation>Return a list of results returned, each
								annotated with
								the parent scenario
							</xs:documentation>
						</xs:annotation>
					</xs:enumeration>
					<xs:enumeration value="FREQUENCY_LIST">
						<xs:annotation>
							<xs:documentation>Return a frequency list of values returned:
								indicating
								the number of times each value occured
							</xs:documentation>
						</xs:annotation>
					</xs:enumeration>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="ElapsedTimeObserverType">
		<xs:annotation>
			<xs:documentation>Keep track of how long the scenario runs for
			</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: inherited, Batch
				collator type.
				Editable: inherited
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="CoreObserverType">
				<xs:sequence>
					<xs:element name="BatchCollator" type="BatchCollatorType"
						minOccurs="0" />
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="FinalStateObserverType">
		<xs:annotation>
			<xs:documentation>Get a report on the final status of the scenario
			</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: inherited.
				Editable:
				inherited
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="CoreObserverType">
				<xs:sequence>
					<xs:element name="BatchCollator" type="BatchCollatorType"
						minOccurs="0" />
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>



	<xs:complexType name="PlotInvestigationSubjectObserverType">
		<xs:annotation>
			<xs:documentation>Show who's investigating what</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible:Inherited .
				Editable:
				inherited
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="CoreObserverType">
				<xs:sequence>
					<xs:element name="Watch" type="WatchType">
						<xs:annotation>
							<xs:documentation>The participant hosting the sensor
							</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="DetectionObserverType">
		<xs:annotation>
			<xs:documentation>Record any detections</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible:Inherited .
				Editable:
				inherited
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="CoreObserverType">
				<xs:sequence>
					<xs:element name="Target" type="TargetType">
						<xs:annotation>
							<xs:documentation>The target the watched vessel must detect
							</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="Watch" type="WatchType">
						<xs:annotation>
							<xs:documentation>The participant hosting the sensor
							</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="BatchCollator" type="BatchCollatorType"
						minOccurs="0">
						<xs:annotation>
							<xs:documentation>Optional structure defining if/how we collate
								stats
								across multiple runs
							</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
				<xs:attribute name="DetectionLevel" type="DetectionLevelType">
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:simpleType name="DetectionLevelType">
		<xs:annotation>
			<xs:documentation>An increasing series of categories for the level of
				knowledge about
				the subject participant.
			</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:NMTOKEN">
			<xs:enumeration value="Undetected" />
			<xs:enumeration value="Detected" />
			<xs:enumeration value="Classified" />
			<xs:enumeration value="Identified" />
		</xs:restriction>
	</xs:simpleType>
	<xs:complexType name="CoreFileObserverType">
		<xs:annotation>
			<xs:documentation>Record information to file</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: inherited.
				Editable:
				inherited
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="CoreObserverType">
				<xs:attribute name="directory_name" type="xs:string"
					use="optional">
					<xs:annotation>
						<xs:documentation>The directory to contain the results plots
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="file_name" type="xs:string" use="optional">
					<xs:annotation>
						<xs:documentation>The filename to use for the results plot (or
							omit to have
							auto-generated filename). %s gets replaced with the
							current scenario
							name, and %d gets replaced with the current DTG.
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="CSVTrackObserverType">
		<xs:annotation>
			<xs:documentation>Record tracks as CSV file</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: inherited .
				Editable:
				inherited
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="CoreFileObserverType">
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
    <xs:complexType name="CSV_CLog_TrackObserverType">
		<xs:annotation>
			<xs:documentation>Record tracks as CSV file in C-Log format</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: inherited .
				Editable:
				inherited
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="CoreFileObserverType">
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="TowedArrayLocationObserverType">
		<xs:annotation>
			<xs:documentation>Record Towed Array Datasets</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: inherited .
				Editable:
				inherited
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="CoreFileObserverType">
				<xs:sequence>
					<xs:element name="SubjectToTrack" type="TargetTypeType"
						minOccurs="0">
						<xs:annotation>
							<xs:documentation>The type of target we want to record a
								narrative full
								(or omit to record all)
							</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
				<xs:attribute name="MESSAGE_NAME" use="required">
					<xs:annotation>
						<xs:documentation>Type of REP message to write</xs:documentation>
					</xs:annotation>
					<xs:simpleType>
						<xs:restriction base="xs:NMTOKEN">
							<xs:enumeration value="TA_FORE_AFT" />
							<xs:enumeration value="TA_MODULES" />
							<xs:enumeration value="TA_COG_ABS" />
							<xs:enumeration value="TA_COG_REL" />
						</xs:restriction>
					</xs:simpleType>
				</xs:attribute>
				<xs:attribute name="OFFSETS" type="xs:string"
					use="required">
					<xs:annotation>
						<xs:documentation>Comma separated list of offset lengths (in m)
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="DEFAULT_DEPTH" type="xs:double"
					use="required">
					<xs:annotation>
						<xs:documentation>Default depth value to use
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>				
				<xs:attribute name="SENSOR_NAME" type="xs:string"
					use="required">
					<xs:annotation>
						<xs:documentation>What to call the sensor
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>				
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="DebriefReplayObserverType">
		<xs:annotation>
			<xs:documentation>Produce a Debrief plot file of the indicated
				target(s)
			</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: inherited,
				SubjectToTrack.
				Editable: inherited
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="CoreFileObserverType">
				<xs:sequence>
					<xs:element name="SubjectToTrack" type="TargetTypeType"
						minOccurs="0">
						<xs:annotation>
							<xs:documentation>The type of target we want to record a
								narrative full
								(or omit to record all)
							</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="FormatHelper" type="FormatHelperType"
						minOccurs="0" maxOccurs="unbounded">
						<xs:annotation>
							<xs:documentation>Debrief format helpers
							</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
				<xs:attribute name="record_detections" type="xs:boolean"
					use="required">
					<xs:annotation>
						<xs:documentation>Whether to record detections to file
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="PlotSensorLocation" type="xs:boolean"
					use="optional">
					<xs:annotation>
						<xs:documentation>Whether to include sensor location (or just use "NULL")
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="record_decisions" type="xs:boolean"
					use="required">
					<xs:annotation>
						<xs:documentation>Whether to record decisions to file
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="record_positions" type="xs:boolean"
					use="required">
					<xs:annotation>
						<xs:documentation>Whether to record positions to file
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="SubjectSensor" type="xs:string"
					use="optional">
					<xs:annotation>
						<xs:documentation>Which specific sensor to listen to
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="TargetFolder" type="xs:string"
					use="optional">
					<xs:annotation>
						<xs:documentation>Whether to put tracks into a target folder
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="NMEAObserverType">
		<xs:annotation>
			<xs:documentation>Produce a AIS data-file of the indicated
				target(s)
			</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: inherited,
				SubjectToTrack.
				Editable: inherited
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="CoreFileObserverType">
				<xs:sequence>
					<xs:element name="SubjectToTrack" type="TargetTypeType"
						minOccurs="0">
						<xs:annotation>
							<xs:documentation>The type of target we want to record a
								narrative full
								(or omit to record all)
							</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
				<xs:attribute name="record_detections" type="xs:boolean"
					use="required">
					<xs:annotation>
						<xs:documentation>Whether to record detections to file
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="PlotSensorLocation" type="xs:boolean"
					use="optional">
					<xs:annotation>
						<xs:documentation>Whether to include sensor location (or just use "NULL")
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="record_positions" type="xs:boolean"
					use="required">
					<xs:annotation>
						<xs:documentation>Whether to record positions to file
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="SubjectSensor" type="xs:string"
					use="optional">
					<xs:annotation>
						<xs:documentation>Which specific sensor to listen to
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="BMRObserverType">
		<xs:annotation>
			<xs:documentation>Produce a BMR narrative of the indicated
				target(s)
			</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: inherited,
				SubjectToTrack.
				Editable: inherited
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="CoreFileObserverType">
				<xs:sequence>
					<xs:element name="SubjectToTrack" type="TargetTypeType"
						minOccurs="0">
						<xs:annotation>
							<xs:documentation>The type of target we want to record a
								narrative full
								(or omit to record all)
							</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
				<xs:attribute name="PlotSensorLocation" type="xs:boolean"
					use="optional">
					<xs:annotation>
						<xs:documentation>Whether to include sensor location (or just use "NULL")
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="SubjectSensor" type="xs:string"
					use="optional">
					<xs:annotation>
						<xs:documentation>Which specific sensor to listen to
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="CSVStatusObserverType">
		<xs:annotation>
			<xs:documentation>Produce a CSV file of the indicated
				target(s) statuses
			</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: inherited,
				SubjectToTrack.
				Editable: inherited
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="CoreFileObserverType">
				<xs:sequence>
					<xs:element name="SubjectToTrack" type="TargetTypeType"
						minOccurs="0">
						<xs:annotation>
							<xs:documentation>The type of target we want to record a
								narrative full
								(or omit to record all)
							</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
				<xs:attribute name="SubjectName" type="xs:string"
					use="optional">
					<xs:annotation>
						<xs:documentation>Name of subject we're tracking
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>				
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
		<xs:complexType name="CSVDetectionObserverType">
		<xs:annotation>
			<xs:documentation>Produce a CSV file of the indicated
				target(s) statuses
			</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: inherited,
				SubjectToTrack.
				Editable: inherited
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="CoreFileObserverType">
				<xs:sequence>
					<xs:element name="SubjectToTrack" type="TargetTypeType"
						minOccurs="0">
						<xs:annotation>
							<xs:documentation>The type of target we want to record a
								narrative full
								(or omit to record all)
							</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
				<xs:attribute name="SubjectName" type="xs:string"
					use="optional">
					<xs:annotation>
						<xs:documentation>Name of subject we're tracking
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>								
				<xs:attribute name="SensorName" type="xs:string"
					use="optional">
					<xs:annotation>
						<xs:documentation>Name of sensor we're listening to
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>								
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>	
	<xs:complexType name="CloudObserverType">
		<xs:annotation>
			<xs:documentation>Record tracks to the GND cloud</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: inherited,
				SubjectToTrack.
				Editable: inherited
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="CoreFileObserverType">
				<xs:sequence>
					<xs:element name="SubjectToTrack" type="TargetTypeType"
						minOccurs="0">
						<xs:annotation>
							<xs:documentation>The type of target we want to record a
								narrative full
								(or omit to record all)
							</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
				<xs:attribute name="record_detections" type="xs:boolean"
					use="required">
					<xs:annotation>
						<xs:documentation>Whether to record detections to file
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="record_decisions" type="xs:boolean"
					use="required">
					<xs:annotation>
						<xs:documentation>Whether to record decisions to file
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="record_positions" type="xs:boolean"
					use="required">
					<xs:annotation>
						<xs:documentation>Whether to record positions to file
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="hostURL" type="xs:anyURI" use="required">
					<xs:annotation>
						<xs:documentation>URL of the cloud store
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="database" type="xs:string" use="required">
					<xs:annotation>
						<xs:documentation>Name of database to use in cloud store
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="DebriefDeployableSensorLocationObserverType">
		<xs:annotation>
			<xs:documentation>Produce a track plot showing the location of any
				deployed sensor
				(dipping sonar)
			</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: inherited, subject
				to track.
				Editable: inherited
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="DebriefReplayObserverType">
				<xs:sequence />
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="TrackPlotObserverType">
		<xs:annotation>
			<xs:documentation>Produce an image showing the positions of the
				participants
			</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: inherited.
				Editable:
				inherited.
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="CoreFileObserverType">
				<xs:sequence>
					<xs:element name="GridDelta" type="WorldDistanceType" />
				</xs:sequence>
				<xs:attribute name="image_width" type="xs:int" use="optional"
					default="400">
					<xs:annotation>
						<xs:documentation>The width of plot to produce (pixels)
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="image_height" type="xs:int" use="optional"
					default="400">
					<xs:annotation>
						<xs:documentation>The height of plot to produce (pixels)
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="show_scale" type="xs:boolean" use="optional"
					default="true">
					<xs:annotation>
						<xs:documentation>Whether to place a scale on the plot
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="show_positions" type="xs:boolean"
					use="optional" default="true">
					<xs:annotation>
						<xs:documentation>Whether to show a position symbol at all vessel
							positions
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="only_final_positions" type="xs:boolean"
					use="optional">
					<xs:annotation>
						<xs:documentation>Only show the final vessel positions - don't
							show the
							complete tracks.
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="ProportionDetectedObserverType">
		<xs:annotation>
			<xs:documentation>Calculate the proporation of valid targets which
				were identified by
				valid watched participants.
			</xs:documentation>
			<xs:documentation source="UI">Visible: inherited, target,
				watch. Editable:
				inherited.
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="DetectionObserverType">
				<xs:sequence />
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="PlotSensorObserverType">
		<xs:annotation>
			<xs:documentation>Plot the performance of cookie-cutter sensors on
				the screen. Uses
				dotted line if not in contact, solid if in contact
			</xs:documentation>
			<xs:documentation source="UI">Visible: inherited, target,
				watch. Editable:
				inherited.
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="DetectionObserverType">
				<xs:sequence />
				<xs:attribute name="ShowNames" type="xs:boolean" use="optional">
					<xs:annotation>
						<xs:documentation>Whether to label the rings with the target
							type
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="ShadeCircle" type="xs:boolean" use="optional">
					<xs:annotation>
						<xs:documentation>Whether to shade in the rings</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>

		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="PlotDetectionStatusObserverType">
		<xs:annotation>
			<xs:documentation>Plot the changing detection state of a target. Red
				for undetected, for
				detected
			</xs:documentation>
			<xs:documentation source="UI">Visible: inherited, target,
				watch. Editable:
				inherited.
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="DetectionObserverType">
				<xs:sequence />
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="RemoveInAreaObserverType">
		<xs:annotation>
			<xs:documentation>Remove participants that stray into this area.
			</xs:documentation>
			<xs:documentation source="UI">Visible: inherited, target,
				watch. Editable:
				inherited.
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="CoreObserverType">
				<xs:sequence>
					<xs:element name="WorldArea" type="WorldAreaType" />
					<xs:element name="Watch" type="WatchType" />
					<xs:element name="BatchCollator" type="BatchCollatorType"
						minOccurs="0" />
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="ProximityObserverType">
		<xs:annotation>
			<xs:documentation>Keep track of how close we get to vessels of the
				target type.
			</xs:documentation>
			<xs:documentation source="UI">Visible: inherited, target,
				watch. Editable:
				inherited.
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="CoreObserverType">
				<xs:sequence>
					<xs:element name="Target" type="TargetType" />
					<xs:element name="Watch" type="WatchType" />
					<xs:element name="BatchCollator" type="BatchCollatorType"
						minOccurs="0" />
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="StopOnProximityObserverType">
		<xs:annotation>
			<xs:documentation>Stop if we get within the indicated distance of a
				valid target.
			</xs:documentation>
			<xs:documentation source="UI">Visible: inherited, Range.
				Editable: inherited,
				range.
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="ProximityObserverType">
				<xs:sequence>
					<xs:element name="Range" type="WorldDistanceType" />
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="StopOnDetectionObserverType">
		<xs:annotation>
			<xs:documentation>Stop if our watched participant detects a target
				participant.
			</xs:documentation>
			<xs:documentation> Visible: Inherited. Editable: inherited.
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="DetectionObserverType">
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="StopOnProximityDetectionObserverType">
		<xs:annotation>
			<xs:documentation>Stop if our watched participant detects a target
				participant and is
				within the indicated range of it.
			</xs:documentation>
			<xs:documentation> Visible: Inherited, target, watch, range.
				Editable: inherited,
				range
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="StopOnDetectionObserverType">
				<xs:sequence>
					<xs:element name="Range" type="WorldDistanceType">
						<xs:annotation>
							<xs:documentation>If detection range is less than this, stop the
								scenario
							</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="RemoveDetectedObserverType">
		<xs:annotation>
			<xs:documentation>This observer is typically used in Monte-Carlo
				search simulations,
				removing targets of the specified type as they
				are detected by participants of the
				"watch" type.
			</xs:documentation>
			<xs:documentation> Visible: inherited, watch type, target type.
				Editable:
				inherited.
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="CoreObserverType">
				<xs:sequence>
					<xs:element name="Target" type="TargetType" />
					<xs:element name="Watch" type="WatchType" />
				</xs:sequence>
				<xs:attribute name="PlotTheDead" type="xs:boolean" use="required">
					<xs:annotation>
						<xs:documentation>Whether to plot a marker where detected
							platforms are
							removed
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="DetectionLevel" type="DetectionLevelType"
					use="optional">
					<xs:annotation>
						<xs:documentation>The level of detection delivered by this
							sensor
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="TimeObserverType">
		<xs:annotation>
			<xs:documentation>Stop the scenario after an elapsed time.
			</xs:documentation>
			<xs:documentation> Visible:inherited, duration. Editable: inherited,
				duration.
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="CoreObserverType">
				<xs:sequence>
					<xs:element name="Duration" type="DurationType" />
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="TimeToLaunchObserverType">
		<xs:annotation>
			<xs:documentation>Record how long before launch happens.
			</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: inherited, plus
				target type.
				Editable: inherited.
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="CoreObserverType">
				<xs:sequence>
					<xs:element name="Target" type="TargetType" />
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- -->
	<!--Monte Carlo stuff -->
	<!-- -->
	<xs:complexType name="ScenarioGeneratorType">
		<xs:annotation>
			<xs:documentation>Container for either multi-scenario,
				multi-participant or both type of
				generator.
			</xs:documentation>
			<xs:documentation> Visible: None. Editable: None</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="MultiScenarioGenerator" type="MultiScenarioGeneratorType"
				minOccurs="0">
				<xs:annotation>
					<xs:documentation>To specify that multiple scenarios will be
						generated
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="MultiParticipantGenerator" type="MultiParticipantGeneratorType"
				minOccurs="0" maxOccurs="1">
				<xs:annotation>
					<xs:documentation>To specify that multiple participants will be
						generated within
						this/each scenario
					</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="MultiScenarioGeneratorType">
		<xs:annotation>
			<xs:documentation>How to generate a series of scenarios.
			</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: file suffix,
				MaxPerms, Number,
				# of variances. Editable: maxPerms, number perms
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:annotation>
				<xs:documentation>The list of variances to apply to each scenario
				</xs:documentation>
			</xs:annotation>
			<xs:element name="VarianceList" type="VarianceListType" />
		</xs:sequence>
		<xs:attribute name="Active" type="xs:boolean" use="required">
			<xs:annotation>
				<xs:documentation>Whether to bother with scenario generation
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="NameTemplate" type="validString" use="required">
			<xs:annotation>
				<xs:documentation>The suffix to append each new file. Use %i for an
					counter, %d for
					the current DTG, %s for the scenario name
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="MaxPerms" type="xs:int" use="optional">
			<xs:annotation>
				<xs:documentation>The maximum number of instances of each
					permutation to produce.
					That-is, for each combination of scenario
					variables, this is the maximum number
					of scenarios to be produced
					for it.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="Number" type="xs:int" use="required">
			<xs:annotation>
				<xs:documentation>The number of permutations to produce
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="MultiParticipantGeneratorType">
		<xs:annotation>
			<xs:documentation>The list of participants to vary.
			</xs:documentation>
			<xs:documentation> Visible: # of participants. Editable: None.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence maxOccurs="unbounded">
			<xs:element name="ParticipantVariance" type="ParticipantVariancesType" />
		</xs:sequence>
	</xs:complexType>
	<xs:annotation>
		<xs:documentation>And now the low level generic ones
		</xs:documentation>
	</xs:annotation>
	<xs:complexType name="ParticipantVariancesType">
		<xs:annotation>
			<xs:documentation>The set of variances for a single participant.
			</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: # of permutations,
				boolean for
				parallel planes. Editable: # of permutations, checkbox
				for parallel
				planes
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="VarianceListType">
				<xs:sequence>
					<xs:element name="ParticipantLocation" type="ParticipantLocatorType"
						minOccurs="0">
						<xs:annotation>
							<xs:documentation>The area in which to distribute the instances
							</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
				<xs:attribute name="name" type="validString" use="required">
					<xs:annotation>
						<xs:documentation>the name of this participant (as recorded in the
							scenario
							file itself)t
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="number" type="xs:int" use="required">
					<xs:annotation>
						<xs:documentation>How many permutations of this participant to
							generate
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="inParallelPlanes" type="xs:boolean"
					default="true">
					<xs:annotation>
						<xs:documentation>Whether the multiple instances of this
							participant should
							be processed in separate (parallel) planes
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="RandomCourse" type="xs:boolean"
					default="true">
					<xs:annotation>
						<xs:documentation>Whether the give the participant a random course
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="ParticipantLocatorType">
		<xs:annotation>
			<xs:documentation>A means of describing an area within which a
				uniform grid of
				participants is created.
			</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: None. Editable:
				None
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="WorldArea" type="WorldAreaType">
				<xs:annotation>
					<xs:documentation>Area within which new participants are created
					</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="inRandomLocations" type="xs:boolean"
			use="optional">
			<xs:annotation>
				<xs:documentation>Whether to distribute patricipants randomly within
					area (alternate is uniform distribution)
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>

	</xs:complexType>
	<xs:complexType name="VarianceListType">
		<xs:annotation>
			<xs:documentation>A list of variances to be applied.
			</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: # of variances.
				Editable:
				None
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:annotation>
				<xs:documentation>A list of variances to apply</xs:documentation>
			</xs:annotation>
			<xs:element name="Variance" type="VarianceType" maxOccurs="unbounded"
				minOccurs="0">
				<xs:annotation>
					<xs:documentation>A specific variance to be applied
					</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="VarianceType">
		<xs:annotation>
			<xs:documentation>A specific variance to be applied.
			</xs:documentation>
			<xs:documentation> Visible: Name, XPath. Editable: Name, XPath
			</xs:documentation>
		</xs:annotation>
		<xs:choice>
			<xs:annotation>
				<xs:documentation>The type of variance to be used</xs:documentation>
			</xs:annotation>
			<xs:element name="LocationArea" type="LocationAreaType">
				<xs:annotation>
					<xs:documentation>Select a location within a specified area.
						Visible: Random
						name. Editable: Combo of randomisation algorithms
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="LocationOffset" type="LocationOffsetType">
				<xs:annotation>
					<xs:documentation>Apply a variance to a location. Visible: Random
						name.
						Editable: Combo of randomisation algorithms
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="Node" type="NodeType">
				<xs:annotation>
					<xs:documentation>Change the value of the whole node. Visible:
						Snippet name.
						Editable: Combo of snippet names
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="Attribute" type="AttributeType">
				<xs:annotation>
					<xs:documentation>Change the value of a single attribute
					</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:choice>
		<xs:attribute name="name" type="validString" use="required">
			<xs:annotation>
				<xs:documentation>user description of the node we are going to
					change
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="id" type="validString" use="required">
			<xs:annotation>
				<xs:documentation>XPath identifier for the node to be changed. Note
					that for
					participant variances, this id will be prepended by the
					participant identifier
					(plus trailing slash) - so they're not needed
					in here, just an id like
					"Status/Speed"
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="RandomVarianceType" abstract="true">
		<xs:annotation>
			<xs:documentation>Parent structure for a variance which uses a random
				pattern
			</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: Type, Editable:
				Type
			</xs:documentation>
		</xs:annotation>
		<xs:attribute name="RandomModel" use="optional">
			<xs:annotation>
				<xs:documentation>The model through which random permutations are
					generated
				</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:NMTOKEN">
					<xs:enumeration value="Uniform">
						<xs:annotation>
							<xs:documentation>Uniformly generate random permutations
								throughout the
								defined range
							</xs:documentation>
						</xs:annotation>
					</xs:enumeration>
					<xs:enumeration value="Normal">
						<xs:annotation>
							<xs:documentation>Generate random permutations with a 3 standard
								deviation gaussian distribution based on the centre of the range
								(which may exceed the outer limits of the range)
							</xs:documentation>
						</xs:annotation>
					</xs:enumeration>
					<xs:enumeration value="NormalConstrained">
						<xs:annotation>
							<xs:documentation>Generate random permutations with a 3 standard
								deviation gaussian distribution based on the centre of the range
								constrained to the outer limits of the range (another sample is
								produced if the current sample is outside the limits)#
							</xs:documentation>
						</xs:annotation>
					</xs:enumeration>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="NodeType">
		<xs:annotation>
			<xs:documentation>Change the value of the whole node
			</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: Type. Editable:
				combo of type
				names
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:annotation>
				<xs:documentation>Provide a list of XML snippets to choose from
				</xs:documentation>
			</xs:annotation>
			<xs:element name="XMLChoice" type="XMLChoiceType" />
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="ChoiceType">
		<xs:annotation>
			<xs:documentation>Provide a list of attribute values to choose from.
			</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: Current value.
				Editable: combo
				of values
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="Value" type="ValueType" maxOccurs="unbounded">
				<xs:annotation>
					<xs:documentation>Each new text value to use</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="XMLChoiceType">
		<xs:annotation>
			<xs:documentation>Provide a list of XML snippets to choose from.
			</xs:documentation>
			<xs:documentation> Visible: Name of current snippet. Editable: Combo
				of snippet
				names.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="XMLSnippet" maxOccurs="unbounded">
				<xs:annotation>
					<xs:documentation>Each new XML snippet to use</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:any namespace="##any" processContents="skip" />
					</xs:sequence>
					<xs:attribute name="Name">
						<xs:annotation>
							<xs:documentation>Name given to this snippet permutation
							</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="Name" type="xs:Name" use="required">
			<xs:annotation>
				<xs:documentation>A user-friendly name for what we are changing
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="AttributeType">
		<xs:annotation>
			<xs:documentation>Change the value of a single attribute.
			</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: Value. Editable:
				None
			</xs:documentation>
		</xs:annotation>
		<xs:choice>
			<xs:element name="Range" type="RangeType">
				<xs:annotation>
					<xs:documentation>Use a range of values to specify the attribute.
						Visible:
						Value. Editable: Text box for value.
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="Choice" type="ChoiceType">
				<xs:annotation>
					<xs:documentation>Provide a list of attribute values to choose
						from. Visible:
						Value. Editable: Combo box of values.
					</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:choice>
		<xs:attribute name="name" type="xs:Name" use="required">
			<xs:annotation>
				<xs:documentation>The attribute name of what we are changing
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="RangeType">
		<xs:annotation>
			<xs:documentation>Use a range of values to specify the attribute.
			</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: First 5 values.
				Editable:
				None
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="RandomVarianceType">
				<xs:sequence />
				<xs:attribute name="min" type="xs:decimal" use="required">
					<xs:annotation>
						<xs:documentation>Min value to use (inclusive)</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="max" type="xs:decimal" use="required">
					<xs:annotation>
						<xs:documentation>Max value to use (inclusive)</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="step" type="xs:decimal" use="optional">
					<xs:annotation>
						<xs:documentation>Step interval to use in generating new values.
							If omitted,
							random values will be generated according to the
							random model
							specified
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="number_permutations" type="xs:decimal"
					use="optional">
					<xs:annotation>
						<xs:documentation>When calculating values within the range,
							specifying the
							number of permutations causes that many
							permutations to be created.
							Instances from this limited number of
							permutations are selected in
							sequence for new random scenarios.
							When per-case analysis of scenario
							results is used a continuously
							random set of vlaues would prevent
							analysis of grouped results.
							Specifying that a restricted number of
							permutations will be used
							ensures that groups of matching scenarios can
							be analysed
							together.
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="format" type="validString">
					<xs:annotation>
						<xs:documentation>String format to use (eg 0.0 0 0.0000)
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="ValueType">
		<xs:annotation>
			<xs:documentation source="http://asset.info/ui">Visible: Value. Editable:
				Value
			</xs:documentation>
		</xs:annotation>
		<xs:attribute name="value" type="validString" use="required" />
	</xs:complexType>
	<xs:simpleType name="validString">
		<xs:restriction base="xs:token">
			<xs:minLength value="1" />
		</xs:restriction>
	</xs:simpleType>
	<xs:complexType name="LocationAreaType">
		<xs:annotation>
			<xs:documentation>An area within which random locations are to be
				defined.
			</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: TopLeft,
				BottomRight. Editable:
				None
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="RandomVarianceType">
				<xs:sequence>
					<xs:element name="WorldArea" type="WorldAreaType">
						<xs:annotation>
							<xs:documentation>Area within which new locations are created
							</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="LocationOffsetType">
		<xs:annotation>
			<xs:documentation>Offset to apply to a location - to create series of
				new locations.
			</xs:documentation>
			<xs:documentation source="http://asset.info/ui">Visible: Distance, Origin.
				Editable:
				Distance
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="RandomVarianceType">
				<xs:sequence>
					<xs:element name="Origin" type="LocationType">
						<xs:annotation>
							<xs:documentation>The centre of the box</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="OffsetDistance" type="WorldDistanceType">
						<xs:annotation>
							<xs:documentation>Maximum distance offset to apply
							</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
</xs:schema>
