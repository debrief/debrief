***************
*** 78,92 ****
  { return characterSet; 
  }
  
- public void setCharacters(byte[] pCharacters)
- { characters = pCharacters;
- }
- 
  @XmlElement(name="characters" )
  @Basic
  public byte[] getCharacters()
  { return characters; }
  
  
  public void marshal(DataOutputStream dos)
  {
--- 76,119 ----
  { return characterSet; 
  }
  
  @XmlElement(name="characters" )
  @Basic
  public byte[] getCharacters()
  { return characters; }
  
+     /**
+      * Ensure what is set does not go over 11 characters -- post-processing patch
+      * @param pCharacters an array of characters to set
+      */
+     public void setCharacters(byte[] pCharacters) 
+     {
+         if (pCharacters.length >= characters.length) 
+         {
+             System.arraycopy(pCharacters, 0, characters, 0, characters.length);
+         } 
+         else 
+         {
+             int pCharactersLength = pCharacters.length;
+             System.arraycopy(pCharacters, 0, characters, 0, pCharactersLength);
+             for (int ix = pCharactersLength; ix < characters.length; ix++) 
+             {
+                 // Ensure all zeros in unfilled fields
+                 characters[ix] = 0;
+             }
+         }
+     }
+     
+     /**
+      * An added convieniece method (added by patch): accepts a string, and either
+      * truncates or zero-fills it to fit into the 11-byte character marking field.
+      * @param marking the marking string, converted internally into a character array that
+      * is exactly 11 bytes long
+      */
+     public void setCharacters(String marking)
+     {
+         byte[] buff = marking.getBytes();
+         this.setCharacters(buff);
+     }
  
  public void marshal(DataOutputStream dos)
  {
