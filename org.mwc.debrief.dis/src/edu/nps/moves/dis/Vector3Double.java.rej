***************
*** 168,171 ****
  
      return ivarsEqual;
   }
  } // end of class
--- 168,239 ----
  
      return ivarsEqual;
   }
+     
+     /**
+      * Assuming that the x,y,z values of this Vector3Double are x=latitude,
+      * y=longitude, (in degrees) and z=altitude (in meters), converts them
+      * to DIS coordinates<p>
+      *
+      * Vector3Double is very often ued for setting the entity position. This is a
+      * convienience method that allows the programmer to set a latitude, longitude,
+      * and altitude, and have it  converted to the DIS coordiinate system<p>
+      *
+      * The DIS standard uses an earth-centered, rectilinear coordinate system with
+      * the Z axis pointing through the north pole, the X axis pointing out at the
+      * intersection of the equator and prime meridian, and the Y axis pointing out
+      * at the equator and 90 deg east. Since pretty much no one else uses this,
+      * it can make finding the "DIS standard" x,y,z difficult if you have only
+      * latitude, longitude, and altitude. This method does the converstion from those
+      * three values to the DIS coordinate system.<p>
+      *
+      * The conversion is always somewhat problematic, depending on what model of the
+      * earth's surface you use. This uses the WGS84 elipsoid model, and may not be
+      * accurate around the poles.<p>
+      */
+     
+     public void convertLatitudeLongitudeAltitudeToDis()
+     {
+         double radiansLat;
+         double radiansLon;
+         double xyz[] = new double[3];
+         
+         radiansLat = (Math.PI * x) / 180.0;
+         radiansLon = (Math.PI * y) / 180.0;
+         
+         // Do the conversion
+         xyz = CoordinateConversions.getXYZfromLatLonRadians(radiansLat, radiansLon, z);
+         
+         // Set the values
+         this.setX(xyz[0]);
+         this.setY(xyz[1]);
+         this.setZ(xyz[2]);
+     }
+     
+     /**
+      * Assuming that the Vector3Double contains DIS coordinate system values, converts
+      * them in place to latitude in the x value, longitude in the y value, (in degrees)
+      * and altitude in meters for the z value.
+      *
+      */
+     public void convertDisToLatitudeLongitudeAltitude()
+     {
+         Vector3Double location = new Vector3Double();
+         double[] xyz = new double[3];
+         double[] result;
+         
+         xyz[0] = x;
+         xyz[1] = y;
+         xyz[2] = z;
+         
+         result = CoordinateConversions.xyzToLatLonRadians(xyz);
+         
+         // Convert radians in the result to degrees
+         result[0] = (result[0] * 180.0)/Math.PI; // latitude
+         result[1] = (result[1] * 180.0)/Math.PI; // longitude
+         
+         this.setX(result[0]);
+         this.setY(result[1]);
+         this.setZ(result[2]);
+     }
+     
  } // end of class
